// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Combat.proto

package com.mokylin.bleach.protobuf;

public final class CombatMessage {
  private CombatMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GCCombatInitDataMissionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.GCCombatInitDataMission)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    boolean hasCombatInitData();
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getCombatInitData();
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder getCombatInitDataOrBuilder();

    /**
     * <code>repeated int32 remainDrammaIds = 2;</code>
     *
     * <pre>
     ** 剩余未触发的剧情Id列表 
     * </pre>
     */
    java.util.List<java.lang.Integer> getRemainDrammaIdsList();
    /**
     * <code>repeated int32 remainDrammaIds = 2;</code>
     *
     * <pre>
     ** 剩余未触发的剧情Id列表 
     * </pre>
     */
    int getRemainDrammaIdsCount();
    /**
     * <code>repeated int32 remainDrammaIds = 2;</code>
     *
     * <pre>
     ** 剩余未触发的剧情Id列表 
     * </pre>
     */
    int getRemainDrammaIds(int index);
  }
  /**
   * Protobuf type {@code com.mokylin.GCCombatInitDataMission}
   *
   * <pre>
   ** 关卡战斗初始数据 
   * </pre>
   */
  public static final class GCCombatInitDataMission extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.GCCombatInitDataMission)
      GCCombatInitDataMissionOrBuilder {
    // Use GCCombatInitDataMission.newBuilder() to construct.
    private GCCombatInitDataMission(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GCCombatInitDataMission(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GCCombatInitDataMission defaultInstance;
    public static GCCombatInitDataMission getDefaultInstance() {
      return defaultInstance;
    }

    public GCCombatInitDataMission getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GCCombatInitDataMission(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = combatInitData_.toBuilder();
              }
              combatInitData_ = input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(combatInitData_);
                combatInitData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                remainDrammaIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              remainDrammaIds_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                remainDrammaIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                remainDrammaIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          remainDrammaIds_ = java.util.Collections.unmodifiableList(remainDrammaIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataMission_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataMission_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.class, com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.Builder.class);
    }

    public static com.google.protobuf.Parser<GCCombatInitDataMission> PARSER =
        new com.google.protobuf.AbstractParser<GCCombatInitDataMission>() {
      public GCCombatInitDataMission parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GCCombatInitDataMission(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GCCombatInitDataMission> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int COMBATINITDATA_FIELD_NUMBER = 1;
    private com.mokylin.bleach.protobuf.CombatMessage.CombatInitData combatInitData_;
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    public boolean hasCombatInitData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getCombatInitData() {
      return combatInitData_;
    }
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder getCombatInitDataOrBuilder() {
      return combatInitData_;
    }

    public static final int REMAINDRAMMAIDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> remainDrammaIds_;
    /**
     * <code>repeated int32 remainDrammaIds = 2;</code>
     *
     * <pre>
     ** 剩余未触发的剧情Id列表 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRemainDrammaIdsList() {
      return remainDrammaIds_;
    }
    /**
     * <code>repeated int32 remainDrammaIds = 2;</code>
     *
     * <pre>
     ** 剩余未触发的剧情Id列表 
     * </pre>
     */
    public int getRemainDrammaIdsCount() {
      return remainDrammaIds_.size();
    }
    /**
     * <code>repeated int32 remainDrammaIds = 2;</code>
     *
     * <pre>
     ** 剩余未触发的剧情Id列表 
     * </pre>
     */
    public int getRemainDrammaIds(int index) {
      return remainDrammaIds_.get(index);
    }

    private void initFields() {
      combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
      remainDrammaIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCombatInitData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCombatInitData().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, combatInitData_);
      }
      for (int i = 0; i < remainDrammaIds_.size(); i++) {
        output.writeInt32(2, remainDrammaIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, combatInitData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < remainDrammaIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(remainDrammaIds_.get(i));
        }
        size += dataSize;
        size += 1 * getRemainDrammaIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.GCCombatInitDataMission}
     *
     * <pre>
     ** 关卡战斗初始数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.GCCombatInitDataMission)
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMissionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataMission_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataMission_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.class, com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCombatInitDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (combatInitDataBuilder_ == null) {
          combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
        } else {
          combatInitDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        remainDrammaIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataMission_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission build() {
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission result = new com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (combatInitDataBuilder_ == null) {
          result.combatInitData_ = combatInitData_;
        } else {
          result.combatInitData_ = combatInitDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          remainDrammaIds_ = java.util.Collections.unmodifiableList(remainDrammaIds_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.remainDrammaIds_ = remainDrammaIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission.getDefaultInstance()) return this;
        if (other.hasCombatInitData()) {
          mergeCombatInitData(other.getCombatInitData());
        }
        if (!other.remainDrammaIds_.isEmpty()) {
          if (remainDrammaIds_.isEmpty()) {
            remainDrammaIds_ = other.remainDrammaIds_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRemainDrammaIdsIsMutable();
            remainDrammaIds_.addAll(other.remainDrammaIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCombatInitData()) {
          
          return false;
        }
        if (!getCombatInitData().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataMission) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.mokylin.bleach.protobuf.CombatMessage.CombatInitData combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.CombatInitData, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder, com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder> combatInitDataBuilder_;
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public boolean hasCombatInitData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getCombatInitData() {
        if (combatInitDataBuilder_ == null) {
          return combatInitData_;
        } else {
          return combatInitDataBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder setCombatInitData(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData value) {
        if (combatInitDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          combatInitData_ = value;
          onChanged();
        } else {
          combatInitDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder setCombatInitData(
          com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder builderForValue) {
        if (combatInitDataBuilder_ == null) {
          combatInitData_ = builderForValue.build();
          onChanged();
        } else {
          combatInitDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder mergeCombatInitData(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData value) {
        if (combatInitDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              combatInitData_ != com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance()) {
            combatInitData_ =
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.newBuilder(combatInitData_).mergeFrom(value).buildPartial();
          } else {
            combatInitData_ = value;
          }
          onChanged();
        } else {
          combatInitDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder clearCombatInitData() {
        if (combatInitDataBuilder_ == null) {
          combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
          onChanged();
        } else {
          combatInitDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder getCombatInitDataBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCombatInitDataFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder getCombatInitDataOrBuilder() {
        if (combatInitDataBuilder_ != null) {
          return combatInitDataBuilder_.getMessageOrBuilder();
        } else {
          return combatInitData_;
        }
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.CombatInitData, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder, com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder> 
          getCombatInitDataFieldBuilder() {
        if (combatInitDataBuilder_ == null) {
          combatInitDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder, com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder>(
                  getCombatInitData(),
                  getParentForChildren(),
                  isClean());
          combatInitData_ = null;
        }
        return combatInitDataBuilder_;
      }

      private java.util.List<java.lang.Integer> remainDrammaIds_ = java.util.Collections.emptyList();
      private void ensureRemainDrammaIdsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          remainDrammaIds_ = new java.util.ArrayList<java.lang.Integer>(remainDrammaIds_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRemainDrammaIdsList() {
        return java.util.Collections.unmodifiableList(remainDrammaIds_);
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public int getRemainDrammaIdsCount() {
        return remainDrammaIds_.size();
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public int getRemainDrammaIds(int index) {
        return remainDrammaIds_.get(index);
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public Builder setRemainDrammaIds(
          int index, int value) {
        ensureRemainDrammaIdsIsMutable();
        remainDrammaIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public Builder addRemainDrammaIds(int value) {
        ensureRemainDrammaIdsIsMutable();
        remainDrammaIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public Builder addAllRemainDrammaIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRemainDrammaIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, remainDrammaIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 remainDrammaIds = 2;</code>
       *
       * <pre>
       ** 剩余未触发的剧情Id列表 
       * </pre>
       */
      public Builder clearRemainDrammaIds() {
        remainDrammaIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.GCCombatInitDataMission)
    }

    static {
      defaultInstance = new GCCombatInitDataMission(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.GCCombatInitDataMission)
  }

  public interface GCCombatInitDataExpeditionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.GCCombatInitDataExpedition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    boolean hasCombatInitData();
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getCombatInitData();
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder getCombatInitDataOrBuilder();
  }
  /**
   * Protobuf type {@code com.mokylin.GCCombatInitDataExpedition}
   *
   * <pre>
   ** 远征战斗初始数据 
   * </pre>
   */
  public static final class GCCombatInitDataExpedition extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.GCCombatInitDataExpedition)
      GCCombatInitDataExpeditionOrBuilder {
    // Use GCCombatInitDataExpedition.newBuilder() to construct.
    private GCCombatInitDataExpedition(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GCCombatInitDataExpedition(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GCCombatInitDataExpedition defaultInstance;
    public static GCCombatInitDataExpedition getDefaultInstance() {
      return defaultInstance;
    }

    public GCCombatInitDataExpedition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GCCombatInitDataExpedition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = combatInitData_.toBuilder();
              }
              combatInitData_ = input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(combatInitData_);
                combatInitData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataExpedition_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataExpedition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.class, com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.Builder.class);
    }

    public static com.google.protobuf.Parser<GCCombatInitDataExpedition> PARSER =
        new com.google.protobuf.AbstractParser<GCCombatInitDataExpedition>() {
      public GCCombatInitDataExpedition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GCCombatInitDataExpedition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GCCombatInitDataExpedition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int COMBATINITDATA_FIELD_NUMBER = 1;
    private com.mokylin.bleach.protobuf.CombatMessage.CombatInitData combatInitData_;
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    public boolean hasCombatInitData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getCombatInitData() {
      return combatInitData_;
    }
    /**
     * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder getCombatInitDataOrBuilder() {
      return combatInitData_;
    }

    private void initFields() {
      combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCombatInitData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCombatInitData().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, combatInitData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, combatInitData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.GCCombatInitDataExpedition}
     *
     * <pre>
     ** 远征战斗初始数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.GCCombatInitDataExpedition)
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpeditionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataExpedition_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataExpedition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.class, com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCombatInitDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (combatInitDataBuilder_ == null) {
          combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
        } else {
          combatInitDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_GCCombatInitDataExpedition_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition build() {
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition result = new com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (combatInitDataBuilder_ == null) {
          result.combatInitData_ = combatInitData_;
        } else {
          result.combatInitData_ = combatInitDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition.getDefaultInstance()) return this;
        if (other.hasCombatInitData()) {
          mergeCombatInitData(other.getCombatInitData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCombatInitData()) {
          
          return false;
        }
        if (!getCombatInitData().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.GCCombatInitDataExpedition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.mokylin.bleach.protobuf.CombatMessage.CombatInitData combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.CombatInitData, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder, com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder> combatInitDataBuilder_;
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public boolean hasCombatInitData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getCombatInitData() {
        if (combatInitDataBuilder_ == null) {
          return combatInitData_;
        } else {
          return combatInitDataBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder setCombatInitData(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData value) {
        if (combatInitDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          combatInitData_ = value;
          onChanged();
        } else {
          combatInitDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder setCombatInitData(
          com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder builderForValue) {
        if (combatInitDataBuilder_ == null) {
          combatInitData_ = builderForValue.build();
          onChanged();
        } else {
          combatInitDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder mergeCombatInitData(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData value) {
        if (combatInitDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              combatInitData_ != com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance()) {
            combatInitData_ =
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.newBuilder(combatInitData_).mergeFrom(value).buildPartial();
          } else {
            combatInitData_ = value;
          }
          onChanged();
        } else {
          combatInitDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public Builder clearCombatInitData() {
        if (combatInitDataBuilder_ == null) {
          combatInitData_ = com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
          onChanged();
        } else {
          combatInitDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder getCombatInitDataBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCombatInitDataFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder getCombatInitDataOrBuilder() {
        if (combatInitDataBuilder_ != null) {
          return combatInitDataBuilder_.getMessageOrBuilder();
        } else {
          return combatInitData_;
        }
      }
      /**
       * <code>required .com.mokylin.CombatInitData combatInitData = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.CombatInitData, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder, com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder> 
          getCombatInitDataFieldBuilder() {
        if (combatInitDataBuilder_ == null) {
          combatInitDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder, com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder>(
                  getCombatInitData(),
                  getParentForChildren(),
                  isClean());
          combatInitData_ = null;
        }
        return combatInitDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.GCCombatInitDataExpedition)
    }

    static {
      defaultInstance = new GCCombatInitDataExpedition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.GCCombatInitDataExpedition)
  }

  public interface CombatInitDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.CombatInitData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 sceneId = 1;</code>
     *
     * <pre>
     ** 场景Id 
     * </pre>
     */
    boolean hasSceneId();
    /**
     * <code>required int32 sceneId = 1;</code>
     *
     * <pre>
     ** 场景Id 
     * </pre>
     */
    int getSceneId();

    /**
     * <code>required int32 combatType = 2;</code>
     *
     * <pre>
     ** 战斗类型 
     * </pre>
     */
    boolean hasCombatType();
    /**
     * <code>required int32 combatType = 2;</code>
     *
     * <pre>
     ** 战斗类型 
     * </pre>
     */
    int getCombatType();

    /**
     * <code>required .com.mokylin.Roles leftRoles = 3;</code>
     *
     * <pre>
     ** 攻方 
     * </pre>
     */
    boolean hasLeftRoles();
    /**
     * <code>required .com.mokylin.Roles leftRoles = 3;</code>
     *
     * <pre>
     ** 攻方 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.Roles getLeftRoles();
    /**
     * <code>required .com.mokylin.Roles leftRoles = 3;</code>
     *
     * <pre>
     ** 攻方 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder getLeftRolesOrBuilder();

    /**
     * <code>required .com.mokylin.Roles rightRoles = 4;</code>
     *
     * <pre>
     ** 守方 
     * </pre>
     */
    boolean hasRightRoles();
    /**
     * <code>required .com.mokylin.Roles rightRoles = 4;</code>
     *
     * <pre>
     ** 守方 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.Roles getRightRoles();
    /**
     * <code>required .com.mokylin.Roles rightRoles = 4;</code>
     *
     * <pre>
     ** 守方 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder getRightRolesOrBuilder();

    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData> 
        getHeroTmplList();
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData getHeroTmpl(int index);
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    int getHeroTmplCount();
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder> 
        getHeroTmplOrBuilderList();
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder getHeroTmplOrBuilder(
        int index);

    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData> 
        getMonsterTmplList();
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData getMonsterTmpl(int index);
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    int getMonsterTmplCount();
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder> 
        getMonsterTmplOrBuilderList();
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder getMonsterTmplOrBuilder(
        int index);

    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData> 
        getSpellTmplList();
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData getSpellTmpl(int index);
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    int getSpellTmplCount();
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder> 
        getSpellTmplOrBuilderList();
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder getSpellTmplOrBuilder(
        int index);

    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData> 
        getSpellLogicTmplList();
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData getSpellLogicTmpl(int index);
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    int getSpellLogicTmplCount();
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder> 
        getSpellLogicTmplOrBuilderList();
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder getSpellLogicTmplOrBuilder(
        int index);

    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData> 
        getBuffActionTmplList();
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData getBuffActionTmpl(int index);
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    int getBuffActionTmplCount();
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder> 
        getBuffActionTmplOrBuilderList();
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder getBuffActionTmplOrBuilder(
        int index);

    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData> 
        getBuffTmplList();
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData getBuffTmpl(int index);
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    int getBuffTmplCount();
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder> 
        getBuffTmplOrBuilderList();
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder getBuffTmplOrBuilder(
        int index);

    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate> 
        getSpellActorDataList();
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate getSpellActorData(int index);
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    int getSpellActorDataCount();
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder> 
        getSpellActorDataOrBuilderList();
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder getSpellActorDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.mokylin.CombatInitData}
   *
   * <pre>
   ** 战斗初始数据 
   * </pre>
   */
  public static final class CombatInitData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.CombatInitData)
      CombatInitDataOrBuilder {
    // Use CombatInitData.newBuilder() to construct.
    private CombatInitData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CombatInitData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CombatInitData defaultInstance;
    public static CombatInitData getDefaultInstance() {
      return defaultInstance;
    }

    public CombatInitData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CombatInitData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sceneId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              combatType_ = input.readInt32();
              break;
            }
            case 26: {
              com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = leftRoles_.toBuilder();
              }
              leftRoles_ = input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.Roles.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(leftRoles_);
                leftRoles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = rightRoles_.toBuilder();
              }
              rightRoles_ = input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.Roles.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rightRoles_);
                rightRoles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                heroTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData>();
                mutable_bitField0_ |= 0x00000010;
              }
              heroTmpl_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                monsterTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData>();
                mutable_bitField0_ |= 0x00000020;
              }
              monsterTmpl_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                spellTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData>();
                mutable_bitField0_ |= 0x00000040;
              }
              spellTmpl_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                spellLogicTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData>();
                mutable_bitField0_ |= 0x00000080;
              }
              spellLogicTmpl_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                buffActionTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData>();
                mutable_bitField0_ |= 0x00000100;
              }
              buffActionTmpl_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.PARSER, extensionRegistry));
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                buffTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData>();
                mutable_bitField0_ |= 0x00000200;
              }
              buffTmpl_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                spellActorData_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate>();
                mutable_bitField0_ |= 0x00000400;
              }
              spellActorData_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          heroTmpl_ = java.util.Collections.unmodifiableList(heroTmpl_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          monsterTmpl_ = java.util.Collections.unmodifiableList(monsterTmpl_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          spellTmpl_ = java.util.Collections.unmodifiableList(spellTmpl_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          spellLogicTmpl_ = java.util.Collections.unmodifiableList(spellLogicTmpl_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          buffActionTmpl_ = java.util.Collections.unmodifiableList(buffActionTmpl_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          buffTmpl_ = java.util.Collections.unmodifiableList(buffTmpl_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          spellActorData_ = java.util.Collections.unmodifiableList(spellActorData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_CombatInitData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_CombatInitData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.class, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder.class);
    }

    public static com.google.protobuf.Parser<CombatInitData> PARSER =
        new com.google.protobuf.AbstractParser<CombatInitData>() {
      public CombatInitData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CombatInitData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CombatInitData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SCENEID_FIELD_NUMBER = 1;
    private int sceneId_;
    /**
     * <code>required int32 sceneId = 1;</code>
     *
     * <pre>
     ** 场景Id 
     * </pre>
     */
    public boolean hasSceneId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 sceneId = 1;</code>
     *
     * <pre>
     ** 场景Id 
     * </pre>
     */
    public int getSceneId() {
      return sceneId_;
    }

    public static final int COMBATTYPE_FIELD_NUMBER = 2;
    private int combatType_;
    /**
     * <code>required int32 combatType = 2;</code>
     *
     * <pre>
     ** 战斗类型 
     * </pre>
     */
    public boolean hasCombatType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 combatType = 2;</code>
     *
     * <pre>
     ** 战斗类型 
     * </pre>
     */
    public int getCombatType() {
      return combatType_;
    }

    public static final int LEFTROLES_FIELD_NUMBER = 3;
    private com.mokylin.bleach.protobuf.CombatMessage.Roles leftRoles_;
    /**
     * <code>required .com.mokylin.Roles leftRoles = 3;</code>
     *
     * <pre>
     ** 攻方 
     * </pre>
     */
    public boolean hasLeftRoles() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .com.mokylin.Roles leftRoles = 3;</code>
     *
     * <pre>
     ** 攻方 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.Roles getLeftRoles() {
      return leftRoles_;
    }
    /**
     * <code>required .com.mokylin.Roles leftRoles = 3;</code>
     *
     * <pre>
     ** 攻方 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder getLeftRolesOrBuilder() {
      return leftRoles_;
    }

    public static final int RIGHTROLES_FIELD_NUMBER = 4;
    private com.mokylin.bleach.protobuf.CombatMessage.Roles rightRoles_;
    /**
     * <code>required .com.mokylin.Roles rightRoles = 4;</code>
     *
     * <pre>
     ** 守方 
     * </pre>
     */
    public boolean hasRightRoles() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .com.mokylin.Roles rightRoles = 4;</code>
     *
     * <pre>
     ** 守方 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.Roles getRightRoles() {
      return rightRoles_;
    }
    /**
     * <code>required .com.mokylin.Roles rightRoles = 4;</code>
     *
     * <pre>
     ** 守方 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder getRightRolesOrBuilder() {
      return rightRoles_;
    }

    public static final int HEROTMPL_FIELD_NUMBER = 5;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData> heroTmpl_;
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData> getHeroTmplList() {
      return heroTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder> 
        getHeroTmplOrBuilderList() {
      return heroTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    public int getHeroTmplCount() {
      return heroTmpl_.size();
    }
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData getHeroTmpl(int index) {
      return heroTmpl_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
     *
     * <pre>
     ** 本次战斗涉及到的英雄模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder getHeroTmplOrBuilder(
        int index) {
      return heroTmpl_.get(index);
    }

    public static final int MONSTERTMPL_FIELD_NUMBER = 6;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData> monsterTmpl_;
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData> getMonsterTmplList() {
      return monsterTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder> 
        getMonsterTmplOrBuilderList() {
      return monsterTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    public int getMonsterTmplCount() {
      return monsterTmpl_.size();
    }
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData getMonsterTmpl(int index) {
      return monsterTmpl_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
     *
     * <pre>
     ** 本次战斗涉及到的怪物模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder getMonsterTmplOrBuilder(
        int index) {
      return monsterTmpl_.get(index);
    }

    public static final int SPELLTMPL_FIELD_NUMBER = 7;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData> spellTmpl_;
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData> getSpellTmplList() {
      return spellTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder> 
        getSpellTmplOrBuilderList() {
      return spellTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    public int getSpellTmplCount() {
      return spellTmpl_.size();
    }
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData getSpellTmpl(int index) {
      return spellTmpl_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder getSpellTmplOrBuilder(
        int index) {
      return spellTmpl_.get(index);
    }

    public static final int SPELLLOGICTMPL_FIELD_NUMBER = 8;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData> spellLogicTmpl_;
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData> getSpellLogicTmplList() {
      return spellLogicTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder> 
        getSpellLogicTmplOrBuilderList() {
      return spellLogicTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    public int getSpellLogicTmplCount() {
      return spellLogicTmpl_.size();
    }
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData getSpellLogicTmpl(int index) {
      return spellLogicTmpl_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能逻辑模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder getSpellLogicTmplOrBuilder(
        int index) {
      return spellLogicTmpl_.get(index);
    }

    public static final int BUFFACTIONTMPL_FIELD_NUMBER = 9;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData> buffActionTmpl_;
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData> getBuffActionTmplList() {
      return buffActionTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder> 
        getBuffActionTmplOrBuilderList() {
      return buffActionTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    public int getBuffActionTmplCount() {
      return buffActionTmpl_.size();
    }
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData getBuffActionTmpl(int index) {
      return buffActionTmpl_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buffAction模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder getBuffActionTmplOrBuilder(
        int index) {
      return buffActionTmpl_.get(index);
    }

    public static final int BUFFTMPL_FIELD_NUMBER = 10;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData> buffTmpl_;
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData> getBuffTmplList() {
      return buffTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder> 
        getBuffTmplOrBuilderList() {
      return buffTmpl_;
    }
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    public int getBuffTmplCount() {
      return buffTmpl_.size();
    }
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData getBuffTmpl(int index) {
      return buffTmpl_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
     *
     * <pre>
     ** 本次战斗涉及到的buff模板数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder getBuffTmplOrBuilder(
        int index) {
      return buffTmpl_.get(index);
    }

    public static final int SPELLACTORDATA_FIELD_NUMBER = 11;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate> spellActorData_;
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate> getSpellActorDataList() {
      return spellActorData_;
    }
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder> 
        getSpellActorDataOrBuilderList() {
      return spellActorData_;
    }
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    public int getSpellActorDataCount() {
      return spellActorData_.size();
    }
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate getSpellActorData(int index) {
      return spellActorData_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
     *
     * <pre>
     ** 本次战斗涉及到的技能显示数据 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder getSpellActorDataOrBuilder(
        int index) {
      return spellActorData_.get(index);
    }

    private void initFields() {
      sceneId_ = 0;
      combatType_ = 0;
      leftRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
      rightRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
      heroTmpl_ = java.util.Collections.emptyList();
      monsterTmpl_ = java.util.Collections.emptyList();
      spellTmpl_ = java.util.Collections.emptyList();
      spellLogicTmpl_ = java.util.Collections.emptyList();
      buffActionTmpl_ = java.util.Collections.emptyList();
      buffTmpl_ = java.util.Collections.emptyList();
      spellActorData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSceneId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCombatType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftRoles()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightRoles()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getLeftRoles().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRightRoles().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getHeroTmplCount(); i++) {
        if (!getHeroTmpl(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMonsterTmplCount(); i++) {
        if (!getMonsterTmpl(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSpellTmplCount(); i++) {
        if (!getSpellTmpl(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSpellLogicTmplCount(); i++) {
        if (!getSpellLogicTmpl(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBuffActionTmplCount(); i++) {
        if (!getBuffActionTmpl(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBuffTmplCount(); i++) {
        if (!getBuffTmpl(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, sceneId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, combatType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, leftRoles_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, rightRoles_);
      }
      for (int i = 0; i < heroTmpl_.size(); i++) {
        output.writeMessage(5, heroTmpl_.get(i));
      }
      for (int i = 0; i < monsterTmpl_.size(); i++) {
        output.writeMessage(6, monsterTmpl_.get(i));
      }
      for (int i = 0; i < spellTmpl_.size(); i++) {
        output.writeMessage(7, spellTmpl_.get(i));
      }
      for (int i = 0; i < spellLogicTmpl_.size(); i++) {
        output.writeMessage(8, spellLogicTmpl_.get(i));
      }
      for (int i = 0; i < buffActionTmpl_.size(); i++) {
        output.writeMessage(9, buffActionTmpl_.get(i));
      }
      for (int i = 0; i < buffTmpl_.size(); i++) {
        output.writeMessage(10, buffTmpl_.get(i));
      }
      for (int i = 0; i < spellActorData_.size(); i++) {
        output.writeMessage(11, spellActorData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, sceneId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, combatType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, leftRoles_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, rightRoles_);
      }
      for (int i = 0; i < heroTmpl_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, heroTmpl_.get(i));
      }
      for (int i = 0; i < monsterTmpl_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, monsterTmpl_.get(i));
      }
      for (int i = 0; i < spellTmpl_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, spellTmpl_.get(i));
      }
      for (int i = 0; i < spellLogicTmpl_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, spellLogicTmpl_.get(i));
      }
      for (int i = 0; i < buffActionTmpl_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, buffActionTmpl_.get(i));
      }
      for (int i = 0; i < buffTmpl_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, buffTmpl_.get(i));
      }
      for (int i = 0; i < spellActorData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, spellActorData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.CombatInitData}
     *
     * <pre>
     ** 战斗初始数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.CombatInitData)
        com.mokylin.bleach.protobuf.CombatMessage.CombatInitDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_CombatInitData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_CombatInitData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.class, com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLeftRolesFieldBuilder();
          getRightRolesFieldBuilder();
          getHeroTmplFieldBuilder();
          getMonsterTmplFieldBuilder();
          getSpellTmplFieldBuilder();
          getSpellLogicTmplFieldBuilder();
          getBuffActionTmplFieldBuilder();
          getBuffTmplFieldBuilder();
          getSpellActorDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sceneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        combatType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (leftRolesBuilder_ == null) {
          leftRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
        } else {
          leftRolesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (rightRolesBuilder_ == null) {
          rightRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
        } else {
          rightRolesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (heroTmplBuilder_ == null) {
          heroTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          heroTmplBuilder_.clear();
        }
        if (monsterTmplBuilder_ == null) {
          monsterTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          monsterTmplBuilder_.clear();
        }
        if (spellTmplBuilder_ == null) {
          spellTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          spellTmplBuilder_.clear();
        }
        if (spellLogicTmplBuilder_ == null) {
          spellLogicTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          spellLogicTmplBuilder_.clear();
        }
        if (buffActionTmplBuilder_ == null) {
          buffActionTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          buffActionTmplBuilder_.clear();
        }
        if (buffTmplBuilder_ == null) {
          buffTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          buffTmplBuilder_.clear();
        }
        if (spellActorDataBuilder_ == null) {
          spellActorData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          spellActorDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_CombatInitData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData build() {
        com.mokylin.bleach.protobuf.CombatMessage.CombatInitData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.CombatInitData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.CombatInitData result = new com.mokylin.bleach.protobuf.CombatMessage.CombatInitData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sceneId_ = sceneId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.combatType_ = combatType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (leftRolesBuilder_ == null) {
          result.leftRoles_ = leftRoles_;
        } else {
          result.leftRoles_ = leftRolesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (rightRolesBuilder_ == null) {
          result.rightRoles_ = rightRoles_;
        } else {
          result.rightRoles_ = rightRolesBuilder_.build();
        }
        if (heroTmplBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            heroTmpl_ = java.util.Collections.unmodifiableList(heroTmpl_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.heroTmpl_ = heroTmpl_;
        } else {
          result.heroTmpl_ = heroTmplBuilder_.build();
        }
        if (monsterTmplBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            monsterTmpl_ = java.util.Collections.unmodifiableList(monsterTmpl_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.monsterTmpl_ = monsterTmpl_;
        } else {
          result.monsterTmpl_ = monsterTmplBuilder_.build();
        }
        if (spellTmplBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            spellTmpl_ = java.util.Collections.unmodifiableList(spellTmpl_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.spellTmpl_ = spellTmpl_;
        } else {
          result.spellTmpl_ = spellTmplBuilder_.build();
        }
        if (spellLogicTmplBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            spellLogicTmpl_ = java.util.Collections.unmodifiableList(spellLogicTmpl_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.spellLogicTmpl_ = spellLogicTmpl_;
        } else {
          result.spellLogicTmpl_ = spellLogicTmplBuilder_.build();
        }
        if (buffActionTmplBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            buffActionTmpl_ = java.util.Collections.unmodifiableList(buffActionTmpl_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.buffActionTmpl_ = buffActionTmpl_;
        } else {
          result.buffActionTmpl_ = buffActionTmplBuilder_.build();
        }
        if (buffTmplBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            buffTmpl_ = java.util.Collections.unmodifiableList(buffTmpl_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.buffTmpl_ = buffTmpl_;
        } else {
          result.buffTmpl_ = buffTmplBuilder_.build();
        }
        if (spellActorDataBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            spellActorData_ = java.util.Collections.unmodifiableList(spellActorData_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.spellActorData_ = spellActorData_;
        } else {
          result.spellActorData_ = spellActorDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.CombatInitData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.CombatInitData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.CombatInitData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.CombatInitData.getDefaultInstance()) return this;
        if (other.hasSceneId()) {
          setSceneId(other.getSceneId());
        }
        if (other.hasCombatType()) {
          setCombatType(other.getCombatType());
        }
        if (other.hasLeftRoles()) {
          mergeLeftRoles(other.getLeftRoles());
        }
        if (other.hasRightRoles()) {
          mergeRightRoles(other.getRightRoles());
        }
        if (heroTmplBuilder_ == null) {
          if (!other.heroTmpl_.isEmpty()) {
            if (heroTmpl_.isEmpty()) {
              heroTmpl_ = other.heroTmpl_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureHeroTmplIsMutable();
              heroTmpl_.addAll(other.heroTmpl_);
            }
            onChanged();
          }
        } else {
          if (!other.heroTmpl_.isEmpty()) {
            if (heroTmplBuilder_.isEmpty()) {
              heroTmplBuilder_.dispose();
              heroTmplBuilder_ = null;
              heroTmpl_ = other.heroTmpl_;
              bitField0_ = (bitField0_ & ~0x00000010);
              heroTmplBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHeroTmplFieldBuilder() : null;
            } else {
              heroTmplBuilder_.addAllMessages(other.heroTmpl_);
            }
          }
        }
        if (monsterTmplBuilder_ == null) {
          if (!other.monsterTmpl_.isEmpty()) {
            if (monsterTmpl_.isEmpty()) {
              monsterTmpl_ = other.monsterTmpl_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureMonsterTmplIsMutable();
              monsterTmpl_.addAll(other.monsterTmpl_);
            }
            onChanged();
          }
        } else {
          if (!other.monsterTmpl_.isEmpty()) {
            if (monsterTmplBuilder_.isEmpty()) {
              monsterTmplBuilder_.dispose();
              monsterTmplBuilder_ = null;
              monsterTmpl_ = other.monsterTmpl_;
              bitField0_ = (bitField0_ & ~0x00000020);
              monsterTmplBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMonsterTmplFieldBuilder() : null;
            } else {
              monsterTmplBuilder_.addAllMessages(other.monsterTmpl_);
            }
          }
        }
        if (spellTmplBuilder_ == null) {
          if (!other.spellTmpl_.isEmpty()) {
            if (spellTmpl_.isEmpty()) {
              spellTmpl_ = other.spellTmpl_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureSpellTmplIsMutable();
              spellTmpl_.addAll(other.spellTmpl_);
            }
            onChanged();
          }
        } else {
          if (!other.spellTmpl_.isEmpty()) {
            if (spellTmplBuilder_.isEmpty()) {
              spellTmplBuilder_.dispose();
              spellTmplBuilder_ = null;
              spellTmpl_ = other.spellTmpl_;
              bitField0_ = (bitField0_ & ~0x00000040);
              spellTmplBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSpellTmplFieldBuilder() : null;
            } else {
              spellTmplBuilder_.addAllMessages(other.spellTmpl_);
            }
          }
        }
        if (spellLogicTmplBuilder_ == null) {
          if (!other.spellLogicTmpl_.isEmpty()) {
            if (spellLogicTmpl_.isEmpty()) {
              spellLogicTmpl_ = other.spellLogicTmpl_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureSpellLogicTmplIsMutable();
              spellLogicTmpl_.addAll(other.spellLogicTmpl_);
            }
            onChanged();
          }
        } else {
          if (!other.spellLogicTmpl_.isEmpty()) {
            if (spellLogicTmplBuilder_.isEmpty()) {
              spellLogicTmplBuilder_.dispose();
              spellLogicTmplBuilder_ = null;
              spellLogicTmpl_ = other.spellLogicTmpl_;
              bitField0_ = (bitField0_ & ~0x00000080);
              spellLogicTmplBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSpellLogicTmplFieldBuilder() : null;
            } else {
              spellLogicTmplBuilder_.addAllMessages(other.spellLogicTmpl_);
            }
          }
        }
        if (buffActionTmplBuilder_ == null) {
          if (!other.buffActionTmpl_.isEmpty()) {
            if (buffActionTmpl_.isEmpty()) {
              buffActionTmpl_ = other.buffActionTmpl_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureBuffActionTmplIsMutable();
              buffActionTmpl_.addAll(other.buffActionTmpl_);
            }
            onChanged();
          }
        } else {
          if (!other.buffActionTmpl_.isEmpty()) {
            if (buffActionTmplBuilder_.isEmpty()) {
              buffActionTmplBuilder_.dispose();
              buffActionTmplBuilder_ = null;
              buffActionTmpl_ = other.buffActionTmpl_;
              bitField0_ = (bitField0_ & ~0x00000100);
              buffActionTmplBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBuffActionTmplFieldBuilder() : null;
            } else {
              buffActionTmplBuilder_.addAllMessages(other.buffActionTmpl_);
            }
          }
        }
        if (buffTmplBuilder_ == null) {
          if (!other.buffTmpl_.isEmpty()) {
            if (buffTmpl_.isEmpty()) {
              buffTmpl_ = other.buffTmpl_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureBuffTmplIsMutable();
              buffTmpl_.addAll(other.buffTmpl_);
            }
            onChanged();
          }
        } else {
          if (!other.buffTmpl_.isEmpty()) {
            if (buffTmplBuilder_.isEmpty()) {
              buffTmplBuilder_.dispose();
              buffTmplBuilder_ = null;
              buffTmpl_ = other.buffTmpl_;
              bitField0_ = (bitField0_ & ~0x00000200);
              buffTmplBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBuffTmplFieldBuilder() : null;
            } else {
              buffTmplBuilder_.addAllMessages(other.buffTmpl_);
            }
          }
        }
        if (spellActorDataBuilder_ == null) {
          if (!other.spellActorData_.isEmpty()) {
            if (spellActorData_.isEmpty()) {
              spellActorData_ = other.spellActorData_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureSpellActorDataIsMutable();
              spellActorData_.addAll(other.spellActorData_);
            }
            onChanged();
          }
        } else {
          if (!other.spellActorData_.isEmpty()) {
            if (spellActorDataBuilder_.isEmpty()) {
              spellActorDataBuilder_.dispose();
              spellActorDataBuilder_ = null;
              spellActorData_ = other.spellActorData_;
              bitField0_ = (bitField0_ & ~0x00000400);
              spellActorDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSpellActorDataFieldBuilder() : null;
            } else {
              spellActorDataBuilder_.addAllMessages(other.spellActorData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSceneId()) {
          
          return false;
        }
        if (!hasCombatType()) {
          
          return false;
        }
        if (!hasLeftRoles()) {
          
          return false;
        }
        if (!hasRightRoles()) {
          
          return false;
        }
        if (!getLeftRoles().isInitialized()) {
          
          return false;
        }
        if (!getRightRoles().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getHeroTmplCount(); i++) {
          if (!getHeroTmpl(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getMonsterTmplCount(); i++) {
          if (!getMonsterTmpl(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSpellTmplCount(); i++) {
          if (!getSpellTmpl(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSpellLogicTmplCount(); i++) {
          if (!getSpellLogicTmpl(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBuffActionTmplCount(); i++) {
          if (!getBuffActionTmpl(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBuffTmplCount(); i++) {
          if (!getBuffTmpl(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.CombatInitData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.CombatInitData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int sceneId_ ;
      /**
       * <code>required int32 sceneId = 1;</code>
       *
       * <pre>
       ** 场景Id 
       * </pre>
       */
      public boolean hasSceneId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 sceneId = 1;</code>
       *
       * <pre>
       ** 场景Id 
       * </pre>
       */
      public int getSceneId() {
        return sceneId_;
      }
      /**
       * <code>required int32 sceneId = 1;</code>
       *
       * <pre>
       ** 场景Id 
       * </pre>
       */
      public Builder setSceneId(int value) {
        bitField0_ |= 0x00000001;
        sceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 sceneId = 1;</code>
       *
       * <pre>
       ** 场景Id 
       * </pre>
       */
      public Builder clearSceneId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sceneId_ = 0;
        onChanged();
        return this;
      }

      private int combatType_ ;
      /**
       * <code>required int32 combatType = 2;</code>
       *
       * <pre>
       ** 战斗类型 
       * </pre>
       */
      public boolean hasCombatType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 combatType = 2;</code>
       *
       * <pre>
       ** 战斗类型 
       * </pre>
       */
      public int getCombatType() {
        return combatType_;
      }
      /**
       * <code>required int32 combatType = 2;</code>
       *
       * <pre>
       ** 战斗类型 
       * </pre>
       */
      public Builder setCombatType(int value) {
        bitField0_ |= 0x00000002;
        combatType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 combatType = 2;</code>
       *
       * <pre>
       ** 战斗类型 
       * </pre>
       */
      public Builder clearCombatType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        combatType_ = 0;
        onChanged();
        return this;
      }

      private com.mokylin.bleach.protobuf.CombatMessage.Roles leftRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.Roles, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder, com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder> leftRolesBuilder_;
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public boolean hasLeftRoles() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Roles getLeftRoles() {
        if (leftRolesBuilder_ == null) {
          return leftRoles_;
        } else {
          return leftRolesBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public Builder setLeftRoles(com.mokylin.bleach.protobuf.CombatMessage.Roles value) {
        if (leftRolesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leftRoles_ = value;
          onChanged();
        } else {
          leftRolesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public Builder setLeftRoles(
          com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder builderForValue) {
        if (leftRolesBuilder_ == null) {
          leftRoles_ = builderForValue.build();
          onChanged();
        } else {
          leftRolesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public Builder mergeLeftRoles(com.mokylin.bleach.protobuf.CombatMessage.Roles value) {
        if (leftRolesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              leftRoles_ != com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance()) {
            leftRoles_ =
              com.mokylin.bleach.protobuf.CombatMessage.Roles.newBuilder(leftRoles_).mergeFrom(value).buildPartial();
          } else {
            leftRoles_ = value;
          }
          onChanged();
        } else {
          leftRolesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public Builder clearLeftRoles() {
        if (leftRolesBuilder_ == null) {
          leftRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
          onChanged();
        } else {
          leftRolesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder getLeftRolesBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLeftRolesFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder getLeftRolesOrBuilder() {
        if (leftRolesBuilder_ != null) {
          return leftRolesBuilder_.getMessageOrBuilder();
        } else {
          return leftRoles_;
        }
      }
      /**
       * <code>required .com.mokylin.Roles leftRoles = 3;</code>
       *
       * <pre>
       ** 攻方 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.Roles, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder, com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder> 
          getLeftRolesFieldBuilder() {
        if (leftRolesBuilder_ == null) {
          leftRolesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.Roles, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder, com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder>(
                  getLeftRoles(),
                  getParentForChildren(),
                  isClean());
          leftRoles_ = null;
        }
        return leftRolesBuilder_;
      }

      private com.mokylin.bleach.protobuf.CombatMessage.Roles rightRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.Roles, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder, com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder> rightRolesBuilder_;
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public boolean hasRightRoles() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Roles getRightRoles() {
        if (rightRolesBuilder_ == null) {
          return rightRoles_;
        } else {
          return rightRolesBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public Builder setRightRoles(com.mokylin.bleach.protobuf.CombatMessage.Roles value) {
        if (rightRolesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rightRoles_ = value;
          onChanged();
        } else {
          rightRolesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public Builder setRightRoles(
          com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder builderForValue) {
        if (rightRolesBuilder_ == null) {
          rightRoles_ = builderForValue.build();
          onChanged();
        } else {
          rightRolesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public Builder mergeRightRoles(com.mokylin.bleach.protobuf.CombatMessage.Roles value) {
        if (rightRolesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              rightRoles_ != com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance()) {
            rightRoles_ =
              com.mokylin.bleach.protobuf.CombatMessage.Roles.newBuilder(rightRoles_).mergeFrom(value).buildPartial();
          } else {
            rightRoles_ = value;
          }
          onChanged();
        } else {
          rightRolesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public Builder clearRightRoles() {
        if (rightRolesBuilder_ == null) {
          rightRoles_ = com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
          onChanged();
        } else {
          rightRolesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder getRightRolesBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRightRolesFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder getRightRolesOrBuilder() {
        if (rightRolesBuilder_ != null) {
          return rightRolesBuilder_.getMessageOrBuilder();
        } else {
          return rightRoles_;
        }
      }
      /**
       * <code>required .com.mokylin.Roles rightRoles = 4;</code>
       *
       * <pre>
       ** 守方 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.Roles, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder, com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder> 
          getRightRolesFieldBuilder() {
        if (rightRolesBuilder_ == null) {
          rightRolesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.Roles, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder, com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder>(
                  getRightRoles(),
                  getParentForChildren(),
                  isClean());
          rightRoles_ = null;
        }
        return rightRolesBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData> heroTmpl_ =
        java.util.Collections.emptyList();
      private void ensureHeroTmplIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          heroTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData>(heroTmpl_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder> heroTmplBuilder_;

      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData> getHeroTmplList() {
        if (heroTmplBuilder_ == null) {
          return java.util.Collections.unmodifiableList(heroTmpl_);
        } else {
          return heroTmplBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public int getHeroTmplCount() {
        if (heroTmplBuilder_ == null) {
          return heroTmpl_.size();
        } else {
          return heroTmplBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData getHeroTmpl(int index) {
        if (heroTmplBuilder_ == null) {
          return heroTmpl_.get(index);
        } else {
          return heroTmplBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder setHeroTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData value) {
        if (heroTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHeroTmplIsMutable();
          heroTmpl_.set(index, value);
          onChanged();
        } else {
          heroTmplBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder setHeroTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder builderForValue) {
        if (heroTmplBuilder_ == null) {
          ensureHeroTmplIsMutable();
          heroTmpl_.set(index, builderForValue.build());
          onChanged();
        } else {
          heroTmplBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder addHeroTmpl(com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData value) {
        if (heroTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHeroTmplIsMutable();
          heroTmpl_.add(value);
          onChanged();
        } else {
          heroTmplBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder addHeroTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData value) {
        if (heroTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHeroTmplIsMutable();
          heroTmpl_.add(index, value);
          onChanged();
        } else {
          heroTmplBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder addHeroTmpl(
          com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder builderForValue) {
        if (heroTmplBuilder_ == null) {
          ensureHeroTmplIsMutable();
          heroTmpl_.add(builderForValue.build());
          onChanged();
        } else {
          heroTmplBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder addHeroTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder builderForValue) {
        if (heroTmplBuilder_ == null) {
          ensureHeroTmplIsMutable();
          heroTmpl_.add(index, builderForValue.build());
          onChanged();
        } else {
          heroTmplBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder addAllHeroTmpl(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData> values) {
        if (heroTmplBuilder_ == null) {
          ensureHeroTmplIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, heroTmpl_);
          onChanged();
        } else {
          heroTmplBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder clearHeroTmpl() {
        if (heroTmplBuilder_ == null) {
          heroTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          heroTmplBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public Builder removeHeroTmpl(int index) {
        if (heroTmplBuilder_ == null) {
          ensureHeroTmplIsMutable();
          heroTmpl_.remove(index);
          onChanged();
        } else {
          heroTmplBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder getHeroTmplBuilder(
          int index) {
        return getHeroTmplFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder getHeroTmplOrBuilder(
          int index) {
        if (heroTmplBuilder_ == null) {
          return heroTmpl_.get(index);  } else {
          return heroTmplBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder> 
           getHeroTmplOrBuilderList() {
        if (heroTmplBuilder_ != null) {
          return heroTmplBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(heroTmpl_);
        }
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder addHeroTmplBuilder() {
        return getHeroTmplFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder addHeroTmplBuilder(
          int index) {
        return getHeroTmplFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.HeroTemplateData heroTmpl = 5;</code>
       *
       * <pre>
       ** 本次战斗涉及到的英雄模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder> 
           getHeroTmplBuilderList() {
        return getHeroTmplFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder> 
          getHeroTmplFieldBuilder() {
        if (heroTmplBuilder_ == null) {
          heroTmplBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder>(
                  heroTmpl_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          heroTmpl_ = null;
        }
        return heroTmplBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData> monsterTmpl_ =
        java.util.Collections.emptyList();
      private void ensureMonsterTmplIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          monsterTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData>(monsterTmpl_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder> monsterTmplBuilder_;

      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData> getMonsterTmplList() {
        if (monsterTmplBuilder_ == null) {
          return java.util.Collections.unmodifiableList(monsterTmpl_);
        } else {
          return monsterTmplBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public int getMonsterTmplCount() {
        if (monsterTmplBuilder_ == null) {
          return monsterTmpl_.size();
        } else {
          return monsterTmplBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData getMonsterTmpl(int index) {
        if (monsterTmplBuilder_ == null) {
          return monsterTmpl_.get(index);
        } else {
          return monsterTmplBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder setMonsterTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData value) {
        if (monsterTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonsterTmplIsMutable();
          monsterTmpl_.set(index, value);
          onChanged();
        } else {
          monsterTmplBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder setMonsterTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder builderForValue) {
        if (monsterTmplBuilder_ == null) {
          ensureMonsterTmplIsMutable();
          monsterTmpl_.set(index, builderForValue.build());
          onChanged();
        } else {
          monsterTmplBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder addMonsterTmpl(com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData value) {
        if (monsterTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonsterTmplIsMutable();
          monsterTmpl_.add(value);
          onChanged();
        } else {
          monsterTmplBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder addMonsterTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData value) {
        if (monsterTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonsterTmplIsMutable();
          monsterTmpl_.add(index, value);
          onChanged();
        } else {
          monsterTmplBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder addMonsterTmpl(
          com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder builderForValue) {
        if (monsterTmplBuilder_ == null) {
          ensureMonsterTmplIsMutable();
          monsterTmpl_.add(builderForValue.build());
          onChanged();
        } else {
          monsterTmplBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder addMonsterTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder builderForValue) {
        if (monsterTmplBuilder_ == null) {
          ensureMonsterTmplIsMutable();
          monsterTmpl_.add(index, builderForValue.build());
          onChanged();
        } else {
          monsterTmplBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder addAllMonsterTmpl(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData> values) {
        if (monsterTmplBuilder_ == null) {
          ensureMonsterTmplIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, monsterTmpl_);
          onChanged();
        } else {
          monsterTmplBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder clearMonsterTmpl() {
        if (monsterTmplBuilder_ == null) {
          monsterTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          monsterTmplBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public Builder removeMonsterTmpl(int index) {
        if (monsterTmplBuilder_ == null) {
          ensureMonsterTmplIsMutable();
          monsterTmpl_.remove(index);
          onChanged();
        } else {
          monsterTmplBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder getMonsterTmplBuilder(
          int index) {
        return getMonsterTmplFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder getMonsterTmplOrBuilder(
          int index) {
        if (monsterTmplBuilder_ == null) {
          return monsterTmpl_.get(index);  } else {
          return monsterTmplBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder> 
           getMonsterTmplOrBuilderList() {
        if (monsterTmplBuilder_ != null) {
          return monsterTmplBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(monsterTmpl_);
        }
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder addMonsterTmplBuilder() {
        return getMonsterTmplFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder addMonsterTmplBuilder(
          int index) {
        return getMonsterTmplFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.MonsterTemplateData monsterTmpl = 6;</code>
       *
       * <pre>
       ** 本次战斗涉及到的怪物模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder> 
           getMonsterTmplBuilderList() {
        return getMonsterTmplFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder> 
          getMonsterTmplFieldBuilder() {
        if (monsterTmplBuilder_ == null) {
          monsterTmplBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder>(
                  monsterTmpl_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          monsterTmpl_ = null;
        }
        return monsterTmplBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData> spellTmpl_ =
        java.util.Collections.emptyList();
      private void ensureSpellTmplIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          spellTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData>(spellTmpl_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder> spellTmplBuilder_;

      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData> getSpellTmplList() {
        if (spellTmplBuilder_ == null) {
          return java.util.Collections.unmodifiableList(spellTmpl_);
        } else {
          return spellTmplBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public int getSpellTmplCount() {
        if (spellTmplBuilder_ == null) {
          return spellTmpl_.size();
        } else {
          return spellTmplBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData getSpellTmpl(int index) {
        if (spellTmplBuilder_ == null) {
          return spellTmpl_.get(index);
        } else {
          return spellTmplBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder setSpellTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData value) {
        if (spellTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellTmplIsMutable();
          spellTmpl_.set(index, value);
          onChanged();
        } else {
          spellTmplBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder setSpellTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder builderForValue) {
        if (spellTmplBuilder_ == null) {
          ensureSpellTmplIsMutable();
          spellTmpl_.set(index, builderForValue.build());
          onChanged();
        } else {
          spellTmplBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder addSpellTmpl(com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData value) {
        if (spellTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellTmplIsMutable();
          spellTmpl_.add(value);
          onChanged();
        } else {
          spellTmplBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder addSpellTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData value) {
        if (spellTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellTmplIsMutable();
          spellTmpl_.add(index, value);
          onChanged();
        } else {
          spellTmplBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder addSpellTmpl(
          com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder builderForValue) {
        if (spellTmplBuilder_ == null) {
          ensureSpellTmplIsMutable();
          spellTmpl_.add(builderForValue.build());
          onChanged();
        } else {
          spellTmplBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder addSpellTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder builderForValue) {
        if (spellTmplBuilder_ == null) {
          ensureSpellTmplIsMutable();
          spellTmpl_.add(index, builderForValue.build());
          onChanged();
        } else {
          spellTmplBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder addAllSpellTmpl(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData> values) {
        if (spellTmplBuilder_ == null) {
          ensureSpellTmplIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, spellTmpl_);
          onChanged();
        } else {
          spellTmplBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder clearSpellTmpl() {
        if (spellTmplBuilder_ == null) {
          spellTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          spellTmplBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public Builder removeSpellTmpl(int index) {
        if (spellTmplBuilder_ == null) {
          ensureSpellTmplIsMutable();
          spellTmpl_.remove(index);
          onChanged();
        } else {
          spellTmplBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder getSpellTmplBuilder(
          int index) {
        return getSpellTmplFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder getSpellTmplOrBuilder(
          int index) {
        if (spellTmplBuilder_ == null) {
          return spellTmpl_.get(index);  } else {
          return spellTmplBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder> 
           getSpellTmplOrBuilderList() {
        if (spellTmplBuilder_ != null) {
          return spellTmplBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(spellTmpl_);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder addSpellTmplBuilder() {
        return getSpellTmplFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder addSpellTmplBuilder(
          int index) {
        return getSpellTmplFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellTemplateData spellTmpl = 7;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder> 
           getSpellTmplBuilderList() {
        return getSpellTmplFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder> 
          getSpellTmplFieldBuilder() {
        if (spellTmplBuilder_ == null) {
          spellTmplBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder>(
                  spellTmpl_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          spellTmpl_ = null;
        }
        return spellTmplBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData> spellLogicTmpl_ =
        java.util.Collections.emptyList();
      private void ensureSpellLogicTmplIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          spellLogicTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData>(spellLogicTmpl_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder> spellLogicTmplBuilder_;

      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData> getSpellLogicTmplList() {
        if (spellLogicTmplBuilder_ == null) {
          return java.util.Collections.unmodifiableList(spellLogicTmpl_);
        } else {
          return spellLogicTmplBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public int getSpellLogicTmplCount() {
        if (spellLogicTmplBuilder_ == null) {
          return spellLogicTmpl_.size();
        } else {
          return spellLogicTmplBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData getSpellLogicTmpl(int index) {
        if (spellLogicTmplBuilder_ == null) {
          return spellLogicTmpl_.get(index);
        } else {
          return spellLogicTmplBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder setSpellLogicTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData value) {
        if (spellLogicTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.set(index, value);
          onChanged();
        } else {
          spellLogicTmplBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder setSpellLogicTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder builderForValue) {
        if (spellLogicTmplBuilder_ == null) {
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.set(index, builderForValue.build());
          onChanged();
        } else {
          spellLogicTmplBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder addSpellLogicTmpl(com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData value) {
        if (spellLogicTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.add(value);
          onChanged();
        } else {
          spellLogicTmplBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder addSpellLogicTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData value) {
        if (spellLogicTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.add(index, value);
          onChanged();
        } else {
          spellLogicTmplBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder addSpellLogicTmpl(
          com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder builderForValue) {
        if (spellLogicTmplBuilder_ == null) {
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.add(builderForValue.build());
          onChanged();
        } else {
          spellLogicTmplBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder addSpellLogicTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder builderForValue) {
        if (spellLogicTmplBuilder_ == null) {
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.add(index, builderForValue.build());
          onChanged();
        } else {
          spellLogicTmplBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder addAllSpellLogicTmpl(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData> values) {
        if (spellLogicTmplBuilder_ == null) {
          ensureSpellLogicTmplIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, spellLogicTmpl_);
          onChanged();
        } else {
          spellLogicTmplBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder clearSpellLogicTmpl() {
        if (spellLogicTmplBuilder_ == null) {
          spellLogicTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          spellLogicTmplBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public Builder removeSpellLogicTmpl(int index) {
        if (spellLogicTmplBuilder_ == null) {
          ensureSpellLogicTmplIsMutable();
          spellLogicTmpl_.remove(index);
          onChanged();
        } else {
          spellLogicTmplBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder getSpellLogicTmplBuilder(
          int index) {
        return getSpellLogicTmplFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder getSpellLogicTmplOrBuilder(
          int index) {
        if (spellLogicTmplBuilder_ == null) {
          return spellLogicTmpl_.get(index);  } else {
          return spellLogicTmplBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder> 
           getSpellLogicTmplOrBuilderList() {
        if (spellLogicTmplBuilder_ != null) {
          return spellLogicTmplBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(spellLogicTmpl_);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder addSpellLogicTmplBuilder() {
        return getSpellLogicTmplFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder addSpellLogicTmplBuilder(
          int index) {
        return getSpellLogicTmplFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellLogicTemplateData spellLogicTmpl = 8;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能逻辑模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder> 
           getSpellLogicTmplBuilderList() {
        return getSpellLogicTmplFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder> 
          getSpellLogicTmplFieldBuilder() {
        if (spellLogicTmplBuilder_ == null) {
          spellLogicTmplBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder>(
                  spellLogicTmpl_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          spellLogicTmpl_ = null;
        }
        return spellLogicTmplBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData> buffActionTmpl_ =
        java.util.Collections.emptyList();
      private void ensureBuffActionTmplIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          buffActionTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData>(buffActionTmpl_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder> buffActionTmplBuilder_;

      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData> getBuffActionTmplList() {
        if (buffActionTmplBuilder_ == null) {
          return java.util.Collections.unmodifiableList(buffActionTmpl_);
        } else {
          return buffActionTmplBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public int getBuffActionTmplCount() {
        if (buffActionTmplBuilder_ == null) {
          return buffActionTmpl_.size();
        } else {
          return buffActionTmplBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData getBuffActionTmpl(int index) {
        if (buffActionTmplBuilder_ == null) {
          return buffActionTmpl_.get(index);
        } else {
          return buffActionTmplBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder setBuffActionTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData value) {
        if (buffActionTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.set(index, value);
          onChanged();
        } else {
          buffActionTmplBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder setBuffActionTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder builderForValue) {
        if (buffActionTmplBuilder_ == null) {
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.set(index, builderForValue.build());
          onChanged();
        } else {
          buffActionTmplBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder addBuffActionTmpl(com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData value) {
        if (buffActionTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.add(value);
          onChanged();
        } else {
          buffActionTmplBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder addBuffActionTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData value) {
        if (buffActionTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.add(index, value);
          onChanged();
        } else {
          buffActionTmplBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder addBuffActionTmpl(
          com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder builderForValue) {
        if (buffActionTmplBuilder_ == null) {
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.add(builderForValue.build());
          onChanged();
        } else {
          buffActionTmplBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder addBuffActionTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder builderForValue) {
        if (buffActionTmplBuilder_ == null) {
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.add(index, builderForValue.build());
          onChanged();
        } else {
          buffActionTmplBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder addAllBuffActionTmpl(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData> values) {
        if (buffActionTmplBuilder_ == null) {
          ensureBuffActionTmplIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, buffActionTmpl_);
          onChanged();
        } else {
          buffActionTmplBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder clearBuffActionTmpl() {
        if (buffActionTmplBuilder_ == null) {
          buffActionTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          buffActionTmplBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public Builder removeBuffActionTmpl(int index) {
        if (buffActionTmplBuilder_ == null) {
          ensureBuffActionTmplIsMutable();
          buffActionTmpl_.remove(index);
          onChanged();
        } else {
          buffActionTmplBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder getBuffActionTmplBuilder(
          int index) {
        return getBuffActionTmplFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder getBuffActionTmplOrBuilder(
          int index) {
        if (buffActionTmplBuilder_ == null) {
          return buffActionTmpl_.get(index);  } else {
          return buffActionTmplBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder> 
           getBuffActionTmplOrBuilderList() {
        if (buffActionTmplBuilder_ != null) {
          return buffActionTmplBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(buffActionTmpl_);
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder addBuffActionTmplBuilder() {
        return getBuffActionTmplFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder addBuffActionTmplBuilder(
          int index) {
        return getBuffActionTmplFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.BuffActionTemplateData buffActionTmpl = 9;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buffAction模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder> 
           getBuffActionTmplBuilderList() {
        return getBuffActionTmplFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder> 
          getBuffActionTmplFieldBuilder() {
        if (buffActionTmplBuilder_ == null) {
          buffActionTmplBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder>(
                  buffActionTmpl_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          buffActionTmpl_ = null;
        }
        return buffActionTmplBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData> buffTmpl_ =
        java.util.Collections.emptyList();
      private void ensureBuffTmplIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          buffTmpl_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData>(buffTmpl_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder> buffTmplBuilder_;

      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData> getBuffTmplList() {
        if (buffTmplBuilder_ == null) {
          return java.util.Collections.unmodifiableList(buffTmpl_);
        } else {
          return buffTmplBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public int getBuffTmplCount() {
        if (buffTmplBuilder_ == null) {
          return buffTmpl_.size();
        } else {
          return buffTmplBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData getBuffTmpl(int index) {
        if (buffTmplBuilder_ == null) {
          return buffTmpl_.get(index);
        } else {
          return buffTmplBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder setBuffTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData value) {
        if (buffTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffTmplIsMutable();
          buffTmpl_.set(index, value);
          onChanged();
        } else {
          buffTmplBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder setBuffTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder builderForValue) {
        if (buffTmplBuilder_ == null) {
          ensureBuffTmplIsMutable();
          buffTmpl_.set(index, builderForValue.build());
          onChanged();
        } else {
          buffTmplBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder addBuffTmpl(com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData value) {
        if (buffTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffTmplIsMutable();
          buffTmpl_.add(value);
          onChanged();
        } else {
          buffTmplBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder addBuffTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData value) {
        if (buffTmplBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuffTmplIsMutable();
          buffTmpl_.add(index, value);
          onChanged();
        } else {
          buffTmplBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder addBuffTmpl(
          com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder builderForValue) {
        if (buffTmplBuilder_ == null) {
          ensureBuffTmplIsMutable();
          buffTmpl_.add(builderForValue.build());
          onChanged();
        } else {
          buffTmplBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder addBuffTmpl(
          int index, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder builderForValue) {
        if (buffTmplBuilder_ == null) {
          ensureBuffTmplIsMutable();
          buffTmpl_.add(index, builderForValue.build());
          onChanged();
        } else {
          buffTmplBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder addAllBuffTmpl(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData> values) {
        if (buffTmplBuilder_ == null) {
          ensureBuffTmplIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, buffTmpl_);
          onChanged();
        } else {
          buffTmplBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder clearBuffTmpl() {
        if (buffTmplBuilder_ == null) {
          buffTmpl_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          buffTmplBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public Builder removeBuffTmpl(int index) {
        if (buffTmplBuilder_ == null) {
          ensureBuffTmplIsMutable();
          buffTmpl_.remove(index);
          onChanged();
        } else {
          buffTmplBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder getBuffTmplBuilder(
          int index) {
        return getBuffTmplFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder getBuffTmplOrBuilder(
          int index) {
        if (buffTmplBuilder_ == null) {
          return buffTmpl_.get(index);  } else {
          return buffTmplBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder> 
           getBuffTmplOrBuilderList() {
        if (buffTmplBuilder_ != null) {
          return buffTmplBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(buffTmpl_);
        }
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder addBuffTmplBuilder() {
        return getBuffTmplFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder addBuffTmplBuilder(
          int index) {
        return getBuffTmplFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.BuffTemplateData buffTmpl = 10;</code>
       *
       * <pre>
       ** 本次战斗涉及到的buff模板数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder> 
           getBuffTmplBuilderList() {
        return getBuffTmplFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder> 
          getBuffTmplFieldBuilder() {
        if (buffTmplBuilder_ == null) {
          buffTmplBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder>(
                  buffTmpl_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          buffTmpl_ = null;
        }
        return buffTmplBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate> spellActorData_ =
        java.util.Collections.emptyList();
      private void ensureSpellActorDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          spellActorData_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate>(spellActorData_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder> spellActorDataBuilder_;

      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate> getSpellActorDataList() {
        if (spellActorDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(spellActorData_);
        } else {
          return spellActorDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public int getSpellActorDataCount() {
        if (spellActorDataBuilder_ == null) {
          return spellActorData_.size();
        } else {
          return spellActorDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate getSpellActorData(int index) {
        if (spellActorDataBuilder_ == null) {
          return spellActorData_.get(index);
        } else {
          return spellActorDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder setSpellActorData(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate value) {
        if (spellActorDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellActorDataIsMutable();
          spellActorData_.set(index, value);
          onChanged();
        } else {
          spellActorDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder setSpellActorData(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder builderForValue) {
        if (spellActorDataBuilder_ == null) {
          ensureSpellActorDataIsMutable();
          spellActorData_.set(index, builderForValue.build());
          onChanged();
        } else {
          spellActorDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder addSpellActorData(com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate value) {
        if (spellActorDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellActorDataIsMutable();
          spellActorData_.add(value);
          onChanged();
        } else {
          spellActorDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder addSpellActorData(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate value) {
        if (spellActorDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellActorDataIsMutable();
          spellActorData_.add(index, value);
          onChanged();
        } else {
          spellActorDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder addSpellActorData(
          com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder builderForValue) {
        if (spellActorDataBuilder_ == null) {
          ensureSpellActorDataIsMutable();
          spellActorData_.add(builderForValue.build());
          onChanged();
        } else {
          spellActorDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder addSpellActorData(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder builderForValue) {
        if (spellActorDataBuilder_ == null) {
          ensureSpellActorDataIsMutable();
          spellActorData_.add(index, builderForValue.build());
          onChanged();
        } else {
          spellActorDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder addAllSpellActorData(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate> values) {
        if (spellActorDataBuilder_ == null) {
          ensureSpellActorDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, spellActorData_);
          onChanged();
        } else {
          spellActorDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder clearSpellActorData() {
        if (spellActorDataBuilder_ == null) {
          spellActorData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          spellActorDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public Builder removeSpellActorData(int index) {
        if (spellActorDataBuilder_ == null) {
          ensureSpellActorDataIsMutable();
          spellActorData_.remove(index);
          onChanged();
        } else {
          spellActorDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder getSpellActorDataBuilder(
          int index) {
        return getSpellActorDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder getSpellActorDataOrBuilder(
          int index) {
        if (spellActorDataBuilder_ == null) {
          return spellActorData_.get(index);  } else {
          return spellActorDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder> 
           getSpellActorDataOrBuilderList() {
        if (spellActorDataBuilder_ != null) {
          return spellActorDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(spellActorData_);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder addSpellActorDataBuilder() {
        return getSpellActorDataFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder addSpellActorDataBuilder(
          int index) {
        return getSpellActorDataFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellPresentAttackRate spellActorData = 11;</code>
       *
       * <pre>
       ** 本次战斗涉及到的技能显示数据 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder> 
           getSpellActorDataBuilderList() {
        return getSpellActorDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder> 
          getSpellActorDataFieldBuilder() {
        if (spellActorDataBuilder_ == null) {
          spellActorDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder>(
                  spellActorData_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          spellActorData_ = null;
        }
        return spellActorDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.CombatInitData)
    }

    static {
      defaultInstance = new CombatInitData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.CombatInitData)
  }

  public interface RolesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.Roles)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 initMP = 1;</code>
     *
     * <pre>
     ** 初始魔法值 
     * </pre>
     */
    boolean hasInitMP();
    /**
     * <code>required int32 initMP = 1;</code>
     *
     * <pre>
     ** 初始魔法值 
     * </pre>
     */
    int getInitMP();

    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo> 
        getRolesList();
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.RoleInfo getRoles(int index);
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    int getRolesCount();
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder> 
        getRolesOrBuilderList();
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder getRolesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.mokylin.Roles}
   *
   * <pre>
   ** 队伍 
   * </pre>
   */
  public static final class Roles extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.Roles)
      RolesOrBuilder {
    // Use Roles.newBuilder() to construct.
    private Roles(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Roles(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Roles defaultInstance;
    public static Roles getDefaultInstance() {
      return defaultInstance;
    }

    public Roles getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Roles(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              initMP_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                roles_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              roles_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          roles_ = java.util.Collections.unmodifiableList(roles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Roles_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Roles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.Roles.class, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder.class);
    }

    public static com.google.protobuf.Parser<Roles> PARSER =
        new com.google.protobuf.AbstractParser<Roles>() {
      public Roles parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Roles(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Roles> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INITMP_FIELD_NUMBER = 1;
    private int initMP_;
    /**
     * <code>required int32 initMP = 1;</code>
     *
     * <pre>
     ** 初始魔法值 
     * </pre>
     */
    public boolean hasInitMP() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 initMP = 1;</code>
     *
     * <pre>
     ** 初始魔法值 
     * </pre>
     */
    public int getInitMP() {
      return initMP_;
    }

    public static final int ROLES_FIELD_NUMBER = 2;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo> roles_;
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo> getRolesList() {
      return roles_;
    }
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder> 
        getRolesOrBuilderList() {
      return roles_;
    }
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    public int getRolesCount() {
      return roles_.size();
    }
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo getRoles(int index) {
      return roles_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
     *
     * <pre>
     ** 武将列表 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder getRolesOrBuilder(
        int index) {
      return roles_.get(index);
    }

    private void initFields() {
      initMP_ = 0;
      roles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasInitMP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getRolesCount(); i++) {
        if (!getRoles(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, initMP_);
      }
      for (int i = 0; i < roles_.size(); i++) {
        output.writeMessage(2, roles_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, initMP_);
      }
      for (int i = 0; i < roles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, roles_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Roles parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.Roles prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.Roles}
     *
     * <pre>
     ** 队伍 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.Roles)
        com.mokylin.bleach.protobuf.CombatMessage.RolesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Roles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Roles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.Roles.class, com.mokylin.bleach.protobuf.CombatMessage.Roles.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.Roles.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRolesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        initMP_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (rolesBuilder_ == null) {
          roles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          rolesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Roles_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.Roles getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.Roles build() {
        com.mokylin.bleach.protobuf.CombatMessage.Roles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.Roles buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.Roles result = new com.mokylin.bleach.protobuf.CombatMessage.Roles(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.initMP_ = initMP_;
        if (rolesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            roles_ = java.util.Collections.unmodifiableList(roles_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.roles_ = roles_;
        } else {
          result.roles_ = rolesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.Roles) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.Roles)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.Roles other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.Roles.getDefaultInstance()) return this;
        if (other.hasInitMP()) {
          setInitMP(other.getInitMP());
        }
        if (rolesBuilder_ == null) {
          if (!other.roles_.isEmpty()) {
            if (roles_.isEmpty()) {
              roles_ = other.roles_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureRolesIsMutable();
              roles_.addAll(other.roles_);
            }
            onChanged();
          }
        } else {
          if (!other.roles_.isEmpty()) {
            if (rolesBuilder_.isEmpty()) {
              rolesBuilder_.dispose();
              rolesBuilder_ = null;
              roles_ = other.roles_;
              bitField0_ = (bitField0_ & ~0x00000002);
              rolesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRolesFieldBuilder() : null;
            } else {
              rolesBuilder_.addAllMessages(other.roles_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasInitMP()) {
          
          return false;
        }
        for (int i = 0; i < getRolesCount(); i++) {
          if (!getRoles(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.Roles parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.Roles) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int initMP_ ;
      /**
       * <code>required int32 initMP = 1;</code>
       *
       * <pre>
       ** 初始魔法值 
       * </pre>
       */
      public boolean hasInitMP() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 initMP = 1;</code>
       *
       * <pre>
       ** 初始魔法值 
       * </pre>
       */
      public int getInitMP() {
        return initMP_;
      }
      /**
       * <code>required int32 initMP = 1;</code>
       *
       * <pre>
       ** 初始魔法值 
       * </pre>
       */
      public Builder setInitMP(int value) {
        bitField0_ |= 0x00000001;
        initMP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 initMP = 1;</code>
       *
       * <pre>
       ** 初始魔法值 
       * </pre>
       */
      public Builder clearInitMP() {
        bitField0_ = (bitField0_ & ~0x00000001);
        initMP_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo> roles_ =
        java.util.Collections.emptyList();
      private void ensureRolesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          roles_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo>(roles_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.RoleInfo, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder, com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder> rolesBuilder_;

      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo> getRolesList() {
        if (rolesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(roles_);
        } else {
          return rolesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public int getRolesCount() {
        if (rolesBuilder_ == null) {
          return roles_.size();
        } else {
          return rolesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo getRoles(int index) {
        if (rolesBuilder_ == null) {
          return roles_.get(index);
        } else {
          return rolesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder setRoles(
          int index, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo value) {
        if (rolesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRolesIsMutable();
          roles_.set(index, value);
          onChanged();
        } else {
          rolesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder setRoles(
          int index, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder builderForValue) {
        if (rolesBuilder_ == null) {
          ensureRolesIsMutable();
          roles_.set(index, builderForValue.build());
          onChanged();
        } else {
          rolesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder addRoles(com.mokylin.bleach.protobuf.CombatMessage.RoleInfo value) {
        if (rolesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRolesIsMutable();
          roles_.add(value);
          onChanged();
        } else {
          rolesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder addRoles(
          int index, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo value) {
        if (rolesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRolesIsMutable();
          roles_.add(index, value);
          onChanged();
        } else {
          rolesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder addRoles(
          com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder builderForValue) {
        if (rolesBuilder_ == null) {
          ensureRolesIsMutable();
          roles_.add(builderForValue.build());
          onChanged();
        } else {
          rolesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder addRoles(
          int index, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder builderForValue) {
        if (rolesBuilder_ == null) {
          ensureRolesIsMutable();
          roles_.add(index, builderForValue.build());
          onChanged();
        } else {
          rolesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder addAllRoles(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.RoleInfo> values) {
        if (rolesBuilder_ == null) {
          ensureRolesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, roles_);
          onChanged();
        } else {
          rolesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder clearRoles() {
        if (rolesBuilder_ == null) {
          roles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          rolesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public Builder removeRoles(int index) {
        if (rolesBuilder_ == null) {
          ensureRolesIsMutable();
          roles_.remove(index);
          onChanged();
        } else {
          rolesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder getRolesBuilder(
          int index) {
        return getRolesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder getRolesOrBuilder(
          int index) {
        if (rolesBuilder_ == null) {
          return roles_.get(index);  } else {
          return rolesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder> 
           getRolesOrBuilderList() {
        if (rolesBuilder_ != null) {
          return rolesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(roles_);
        }
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder addRolesBuilder() {
        return getRolesFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder addRolesBuilder(
          int index) {
        return getRolesFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.RoleInfo roles = 2;</code>
       *
       * <pre>
       ** 武将列表 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder> 
           getRolesBuilderList() {
        return getRolesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.RoleInfo, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder, com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder> 
          getRolesFieldBuilder() {
        if (rolesBuilder_ == null) {
          rolesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.RoleInfo, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder, com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder>(
                  roles_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          roles_ = null;
        }
        return rolesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.Roles)
    }

    static {
      defaultInstance = new Roles(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.Roles)
  }

  public interface RoleInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.RoleInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required bool isHero = 1;</code>
     *
     * <pre>
     ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
     * </pre>
     */
    boolean hasIsHero();
    /**
     * <code>required bool isHero = 1;</code>
     *
     * <pre>
     ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
     * </pre>
     */
    boolean getIsHero();

    /**
     * <code>required int32 initHP = 2;</code>
     *
     * <pre>
     ** 初始血量 
     * </pre>
     */
    boolean hasInitHP();
    /**
     * <code>required int32 initHP = 2;</code>
     *
     * <pre>
     ** 初始血量 
     * </pre>
     */
    int getInitHP();

    /**
     * <code>required int32 position = 3;</code>
     *
     * <pre>
     ** 在阵型中的位置 
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required int32 position = 3;</code>
     *
     * <pre>
     ** 在阵型中的位置 
     * </pre>
     */
    int getPosition();

    /**
     * <code>required int32 roleTmplId = 4;</code>
     *
     * <pre>
     ** 武将模板Id 
     * </pre>
     */
    boolean hasRoleTmplId();
    /**
     * <code>required int32 roleTmplId = 4;</code>
     *
     * <pre>
     ** 武将模板Id 
     * </pre>
     */
    int getRoleTmplId();

    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.InitProp> 
        getInitPropListList();
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.InitProp getInitPropList(int index);
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    int getInitPropListCount();
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder> 
        getInitPropListOrBuilderList();
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder getInitPropListOrBuilder(
        int index);

    /**
     * <code>repeated int32 buffIdList = 6;</code>
     *
     * <pre>
     ** 武将出场时携带的buffId列表 
     * </pre>
     */
    java.util.List<java.lang.Integer> getBuffIdListList();
    /**
     * <code>repeated int32 buffIdList = 6;</code>
     *
     * <pre>
     ** 武将出场时携带的buffId列表 
     * </pre>
     */
    int getBuffIdListCount();
    /**
     * <code>repeated int32 buffIdList = 6;</code>
     *
     * <pre>
     ** 武将出场时携带的buffId列表 
     * </pre>
     */
    int getBuffIdList(int index);

    /**
     * <code>required int32 lingYaLevel = 7;</code>
     *
     * <pre>
     ** 灵压等级 
     * </pre>
     */
    boolean hasLingYaLevel();
    /**
     * <code>required int32 lingYaLevel = 7;</code>
     *
     * <pre>
     ** 灵压等级 
     * </pre>
     */
    int getLingYaLevel();

    /**
     * <code>repeated int32 spellIds = 8;</code>
     *
     * <pre>
     ** 额外会的主动技能ID列表 
     * </pre>
     */
    java.util.List<java.lang.Integer> getSpellIdsList();
    /**
     * <code>repeated int32 spellIds = 8;</code>
     *
     * <pre>
     ** 额外会的主动技能ID列表 
     * </pre>
     */
    int getSpellIdsCount();
    /**
     * <code>repeated int32 spellIds = 8;</code>
     *
     * <pre>
     ** 额外会的主动技能ID列表 
     * </pre>
     */
    int getSpellIds(int index);

    /**
     * <code>repeated int32 auraIds = 9;</code>
     *
     * <pre>
     ** 携带的光环列表 
     * </pre>
     */
    java.util.List<java.lang.Integer> getAuraIdsList();
    /**
     * <code>repeated int32 auraIds = 9;</code>
     *
     * <pre>
     ** 携带的光环列表 
     * </pre>
     */
    int getAuraIdsCount();
    /**
     * <code>repeated int32 auraIds = 9;</code>
     *
     * <pre>
     ** 携带的光环列表 
     * </pre>
     */
    int getAuraIds(int index);
  }
  /**
   * Protobuf type {@code com.mokylin.RoleInfo}
   *
   * <pre>
   ** 武将信息 
   * </pre>
   */
  public static final class RoleInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.RoleInfo)
      RoleInfoOrBuilder {
    // Use RoleInfo.newBuilder() to construct.
    private RoleInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoleInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoleInfo defaultInstance;
    public static RoleInfo getDefaultInstance() {
      return defaultInstance;
    }

    public RoleInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoleInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isHero_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              initHP_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              position_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              roleTmplId_ = input.readInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                initPropList_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.InitProp>();
                mutable_bitField0_ |= 0x00000010;
              }
              initPropList_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.InitProp.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                buffIdList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              buffIdList_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                buffIdList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                buffIdList_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              lingYaLevel_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                spellIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              spellIds_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                spellIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                spellIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                auraIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              auraIds_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                auraIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                auraIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          initPropList_ = java.util.Collections.unmodifiableList(initPropList_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          buffIdList_ = java.util.Collections.unmodifiableList(buffIdList_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          spellIds_ = java.util.Collections.unmodifiableList(spellIds_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          auraIds_ = java.util.Collections.unmodifiableList(auraIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_RoleInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_RoleInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.class, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<RoleInfo> PARSER =
        new com.google.protobuf.AbstractParser<RoleInfo>() {
      public RoleInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoleInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoleInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ISHERO_FIELD_NUMBER = 1;
    private boolean isHero_;
    /**
     * <code>required bool isHero = 1;</code>
     *
     * <pre>
     ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
     * </pre>
     */
    public boolean hasIsHero() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool isHero = 1;</code>
     *
     * <pre>
     ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
     * </pre>
     */
    public boolean getIsHero() {
      return isHero_;
    }

    public static final int INITHP_FIELD_NUMBER = 2;
    private int initHP_;
    /**
     * <code>required int32 initHP = 2;</code>
     *
     * <pre>
     ** 初始血量 
     * </pre>
     */
    public boolean hasInitHP() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 initHP = 2;</code>
     *
     * <pre>
     ** 初始血量 
     * </pre>
     */
    public int getInitHP() {
      return initHP_;
    }

    public static final int POSITION_FIELD_NUMBER = 3;
    private int position_;
    /**
     * <code>required int32 position = 3;</code>
     *
     * <pre>
     ** 在阵型中的位置 
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 position = 3;</code>
     *
     * <pre>
     ** 在阵型中的位置 
     * </pre>
     */
    public int getPosition() {
      return position_;
    }

    public static final int ROLETMPLID_FIELD_NUMBER = 4;
    private int roleTmplId_;
    /**
     * <code>required int32 roleTmplId = 4;</code>
     *
     * <pre>
     ** 武将模板Id 
     * </pre>
     */
    public boolean hasRoleTmplId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 roleTmplId = 4;</code>
     *
     * <pre>
     ** 武将模板Id 
     * </pre>
     */
    public int getRoleTmplId() {
      return roleTmplId_;
    }

    public static final int INITPROPLIST_FIELD_NUMBER = 5;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.InitProp> initPropList_;
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.InitProp> getInitPropListList() {
      return initPropList_;
    }
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder> 
        getInitPropListOrBuilderList() {
      return initPropList_;
    }
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    public int getInitPropListCount() {
      return initPropList_.size();
    }
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.InitProp getInitPropList(int index) {
      return initPropList_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
     *
     * <pre>
     ** 武将的初始属性 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder getInitPropListOrBuilder(
        int index) {
      return initPropList_.get(index);
    }

    public static final int BUFFIDLIST_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> buffIdList_;
    /**
     * <code>repeated int32 buffIdList = 6;</code>
     *
     * <pre>
     ** 武将出场时携带的buffId列表 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBuffIdListList() {
      return buffIdList_;
    }
    /**
     * <code>repeated int32 buffIdList = 6;</code>
     *
     * <pre>
     ** 武将出场时携带的buffId列表 
     * </pre>
     */
    public int getBuffIdListCount() {
      return buffIdList_.size();
    }
    /**
     * <code>repeated int32 buffIdList = 6;</code>
     *
     * <pre>
     ** 武将出场时携带的buffId列表 
     * </pre>
     */
    public int getBuffIdList(int index) {
      return buffIdList_.get(index);
    }

    public static final int LINGYALEVEL_FIELD_NUMBER = 7;
    private int lingYaLevel_;
    /**
     * <code>required int32 lingYaLevel = 7;</code>
     *
     * <pre>
     ** 灵压等级 
     * </pre>
     */
    public boolean hasLingYaLevel() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 lingYaLevel = 7;</code>
     *
     * <pre>
     ** 灵压等级 
     * </pre>
     */
    public int getLingYaLevel() {
      return lingYaLevel_;
    }

    public static final int SPELLIDS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> spellIds_;
    /**
     * <code>repeated int32 spellIds = 8;</code>
     *
     * <pre>
     ** 额外会的主动技能ID列表 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSpellIdsList() {
      return spellIds_;
    }
    /**
     * <code>repeated int32 spellIds = 8;</code>
     *
     * <pre>
     ** 额外会的主动技能ID列表 
     * </pre>
     */
    public int getSpellIdsCount() {
      return spellIds_.size();
    }
    /**
     * <code>repeated int32 spellIds = 8;</code>
     *
     * <pre>
     ** 额外会的主动技能ID列表 
     * </pre>
     */
    public int getSpellIds(int index) {
      return spellIds_.get(index);
    }

    public static final int AURAIDS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> auraIds_;
    /**
     * <code>repeated int32 auraIds = 9;</code>
     *
     * <pre>
     ** 携带的光环列表 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAuraIdsList() {
      return auraIds_;
    }
    /**
     * <code>repeated int32 auraIds = 9;</code>
     *
     * <pre>
     ** 携带的光环列表 
     * </pre>
     */
    public int getAuraIdsCount() {
      return auraIds_.size();
    }
    /**
     * <code>repeated int32 auraIds = 9;</code>
     *
     * <pre>
     ** 携带的光环列表 
     * </pre>
     */
    public int getAuraIds(int index) {
      return auraIds_.get(index);
    }

    private void initFields() {
      isHero_ = false;
      initHP_ = 0;
      position_ = 0;
      roleTmplId_ = 0;
      initPropList_ = java.util.Collections.emptyList();
      buffIdList_ = java.util.Collections.emptyList();
      lingYaLevel_ = 0;
      spellIds_ = java.util.Collections.emptyList();
      auraIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIsHero()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInitHP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoleTmplId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLingYaLevel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getInitPropListCount(); i++) {
        if (!getInitPropList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isHero_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, initHP_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, roleTmplId_);
      }
      for (int i = 0; i < initPropList_.size(); i++) {
        output.writeMessage(5, initPropList_.get(i));
      }
      for (int i = 0; i < buffIdList_.size(); i++) {
        output.writeInt32(6, buffIdList_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, lingYaLevel_);
      }
      for (int i = 0; i < spellIds_.size(); i++) {
        output.writeInt32(8, spellIds_.get(i));
      }
      for (int i = 0; i < auraIds_.size(); i++) {
        output.writeInt32(9, auraIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isHero_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, initHP_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, roleTmplId_);
      }
      for (int i = 0; i < initPropList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, initPropList_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < buffIdList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(buffIdList_.get(i));
        }
        size += dataSize;
        size += 1 * getBuffIdListList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, lingYaLevel_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < spellIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(spellIds_.get(i));
        }
        size += dataSize;
        size += 1 * getSpellIdsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < auraIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(auraIds_.get(i));
        }
        size += dataSize;
        size += 1 * getAuraIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.RoleInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.RoleInfo}
     *
     * <pre>
     ** 武将信息 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.RoleInfo)
        com.mokylin.bleach.protobuf.CombatMessage.RoleInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_RoleInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_RoleInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.class, com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInitPropListFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isHero_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        initHP_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        roleTmplId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (initPropListBuilder_ == null) {
          initPropList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          initPropListBuilder_.clear();
        }
        buffIdList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        lingYaLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        spellIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        auraIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_RoleInfo_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo build() {
        com.mokylin.bleach.protobuf.CombatMessage.RoleInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.RoleInfo buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.RoleInfo result = new com.mokylin.bleach.protobuf.CombatMessage.RoleInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isHero_ = isHero_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.initHP_ = initHP_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.roleTmplId_ = roleTmplId_;
        if (initPropListBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            initPropList_ = java.util.Collections.unmodifiableList(initPropList_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.initPropList_ = initPropList_;
        } else {
          result.initPropList_ = initPropListBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          buffIdList_ = java.util.Collections.unmodifiableList(buffIdList_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.buffIdList_ = buffIdList_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.lingYaLevel_ = lingYaLevel_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          spellIds_ = java.util.Collections.unmodifiableList(spellIds_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.spellIds_ = spellIds_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          auraIds_ = java.util.Collections.unmodifiableList(auraIds_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.auraIds_ = auraIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.RoleInfo) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.RoleInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.RoleInfo other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.RoleInfo.getDefaultInstance()) return this;
        if (other.hasIsHero()) {
          setIsHero(other.getIsHero());
        }
        if (other.hasInitHP()) {
          setInitHP(other.getInitHP());
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasRoleTmplId()) {
          setRoleTmplId(other.getRoleTmplId());
        }
        if (initPropListBuilder_ == null) {
          if (!other.initPropList_.isEmpty()) {
            if (initPropList_.isEmpty()) {
              initPropList_ = other.initPropList_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureInitPropListIsMutable();
              initPropList_.addAll(other.initPropList_);
            }
            onChanged();
          }
        } else {
          if (!other.initPropList_.isEmpty()) {
            if (initPropListBuilder_.isEmpty()) {
              initPropListBuilder_.dispose();
              initPropListBuilder_ = null;
              initPropList_ = other.initPropList_;
              bitField0_ = (bitField0_ & ~0x00000010);
              initPropListBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInitPropListFieldBuilder() : null;
            } else {
              initPropListBuilder_.addAllMessages(other.initPropList_);
            }
          }
        }
        if (!other.buffIdList_.isEmpty()) {
          if (buffIdList_.isEmpty()) {
            buffIdList_ = other.buffIdList_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBuffIdListIsMutable();
            buffIdList_.addAll(other.buffIdList_);
          }
          onChanged();
        }
        if (other.hasLingYaLevel()) {
          setLingYaLevel(other.getLingYaLevel());
        }
        if (!other.spellIds_.isEmpty()) {
          if (spellIds_.isEmpty()) {
            spellIds_ = other.spellIds_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureSpellIdsIsMutable();
            spellIds_.addAll(other.spellIds_);
          }
          onChanged();
        }
        if (!other.auraIds_.isEmpty()) {
          if (auraIds_.isEmpty()) {
            auraIds_ = other.auraIds_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureAuraIdsIsMutable();
            auraIds_.addAll(other.auraIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIsHero()) {
          
          return false;
        }
        if (!hasInitHP()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasRoleTmplId()) {
          
          return false;
        }
        if (!hasLingYaLevel()) {
          
          return false;
        }
        for (int i = 0; i < getInitPropListCount(); i++) {
          if (!getInitPropList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.RoleInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.RoleInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isHero_ ;
      /**
       * <code>required bool isHero = 1;</code>
       *
       * <pre>
       ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
       * </pre>
       */
      public boolean hasIsHero() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool isHero = 1;</code>
       *
       * <pre>
       ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
       * </pre>
       */
      public boolean getIsHero() {
        return isHero_;
      }
      /**
       * <code>required bool isHero = 1;</code>
       *
       * <pre>
       ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
       * </pre>
       */
      public Builder setIsHero(boolean value) {
        bitField0_ |= 0x00000001;
        isHero_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isHero = 1;</code>
       *
       * <pre>
       ** 是不是英雄（英雄读hero表格，非英雄读monster表格） 
       * </pre>
       */
      public Builder clearIsHero() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isHero_ = false;
        onChanged();
        return this;
      }

      private int initHP_ ;
      /**
       * <code>required int32 initHP = 2;</code>
       *
       * <pre>
       ** 初始血量 
       * </pre>
       */
      public boolean hasInitHP() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 initHP = 2;</code>
       *
       * <pre>
       ** 初始血量 
       * </pre>
       */
      public int getInitHP() {
        return initHP_;
      }
      /**
       * <code>required int32 initHP = 2;</code>
       *
       * <pre>
       ** 初始血量 
       * </pre>
       */
      public Builder setInitHP(int value) {
        bitField0_ |= 0x00000002;
        initHP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 initHP = 2;</code>
       *
       * <pre>
       ** 初始血量 
       * </pre>
       */
      public Builder clearInitHP() {
        bitField0_ = (bitField0_ & ~0x00000002);
        initHP_ = 0;
        onChanged();
        return this;
      }

      private int position_ ;
      /**
       * <code>required int32 position = 3;</code>
       *
       * <pre>
       ** 在阵型中的位置 
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 position = 3;</code>
       *
       * <pre>
       ** 在阵型中的位置 
       * </pre>
       */
      public int getPosition() {
        return position_;
      }
      /**
       * <code>required int32 position = 3;</code>
       *
       * <pre>
       ** 在阵型中的位置 
       * </pre>
       */
      public Builder setPosition(int value) {
        bitField0_ |= 0x00000004;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 position = 3;</code>
       *
       * <pre>
       ** 在阵型中的位置 
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000004);
        position_ = 0;
        onChanged();
        return this;
      }

      private int roleTmplId_ ;
      /**
       * <code>required int32 roleTmplId = 4;</code>
       *
       * <pre>
       ** 武将模板Id 
       * </pre>
       */
      public boolean hasRoleTmplId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 roleTmplId = 4;</code>
       *
       * <pre>
       ** 武将模板Id 
       * </pre>
       */
      public int getRoleTmplId() {
        return roleTmplId_;
      }
      /**
       * <code>required int32 roleTmplId = 4;</code>
       *
       * <pre>
       ** 武将模板Id 
       * </pre>
       */
      public Builder setRoleTmplId(int value) {
        bitField0_ |= 0x00000008;
        roleTmplId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 roleTmplId = 4;</code>
       *
       * <pre>
       ** 武将模板Id 
       * </pre>
       */
      public Builder clearRoleTmplId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        roleTmplId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.InitProp> initPropList_ =
        java.util.Collections.emptyList();
      private void ensureInitPropListIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          initPropList_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.InitProp>(initPropList_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.InitProp, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder, com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder> initPropListBuilder_;

      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.InitProp> getInitPropListList() {
        if (initPropListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(initPropList_);
        } else {
          return initPropListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public int getInitPropListCount() {
        if (initPropListBuilder_ == null) {
          return initPropList_.size();
        } else {
          return initPropListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.InitProp getInitPropList(int index) {
        if (initPropListBuilder_ == null) {
          return initPropList_.get(index);
        } else {
          return initPropListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder setInitPropList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.InitProp value) {
        if (initPropListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInitPropListIsMutable();
          initPropList_.set(index, value);
          onChanged();
        } else {
          initPropListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder setInitPropList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder builderForValue) {
        if (initPropListBuilder_ == null) {
          ensureInitPropListIsMutable();
          initPropList_.set(index, builderForValue.build());
          onChanged();
        } else {
          initPropListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder addInitPropList(com.mokylin.bleach.protobuf.CombatMessage.InitProp value) {
        if (initPropListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInitPropListIsMutable();
          initPropList_.add(value);
          onChanged();
        } else {
          initPropListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder addInitPropList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.InitProp value) {
        if (initPropListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInitPropListIsMutable();
          initPropList_.add(index, value);
          onChanged();
        } else {
          initPropListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder addInitPropList(
          com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder builderForValue) {
        if (initPropListBuilder_ == null) {
          ensureInitPropListIsMutable();
          initPropList_.add(builderForValue.build());
          onChanged();
        } else {
          initPropListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder addInitPropList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder builderForValue) {
        if (initPropListBuilder_ == null) {
          ensureInitPropListIsMutable();
          initPropList_.add(index, builderForValue.build());
          onChanged();
        } else {
          initPropListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder addAllInitPropList(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.InitProp> values) {
        if (initPropListBuilder_ == null) {
          ensureInitPropListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, initPropList_);
          onChanged();
        } else {
          initPropListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder clearInitPropList() {
        if (initPropListBuilder_ == null) {
          initPropList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          initPropListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public Builder removeInitPropList(int index) {
        if (initPropListBuilder_ == null) {
          ensureInitPropListIsMutable();
          initPropList_.remove(index);
          onChanged();
        } else {
          initPropListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder getInitPropListBuilder(
          int index) {
        return getInitPropListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder getInitPropListOrBuilder(
          int index) {
        if (initPropListBuilder_ == null) {
          return initPropList_.get(index);  } else {
          return initPropListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder> 
           getInitPropListOrBuilderList() {
        if (initPropListBuilder_ != null) {
          return initPropListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(initPropList_);
        }
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder addInitPropListBuilder() {
        return getInitPropListFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.InitProp.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder addInitPropListBuilder(
          int index) {
        return getInitPropListFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.InitProp.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.InitProp initPropList = 5;</code>
       *
       * <pre>
       ** 武将的初始属性 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder> 
           getInitPropListBuilderList() {
        return getInitPropListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.InitProp, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder, com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder> 
          getInitPropListFieldBuilder() {
        if (initPropListBuilder_ == null) {
          initPropListBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.InitProp, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder, com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder>(
                  initPropList_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          initPropList_ = null;
        }
        return initPropListBuilder_;
      }

      private java.util.List<java.lang.Integer> buffIdList_ = java.util.Collections.emptyList();
      private void ensureBuffIdListIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          buffIdList_ = new java.util.ArrayList<java.lang.Integer>(buffIdList_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBuffIdListList() {
        return java.util.Collections.unmodifiableList(buffIdList_);
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public int getBuffIdListCount() {
        return buffIdList_.size();
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public int getBuffIdList(int index) {
        return buffIdList_.get(index);
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public Builder setBuffIdList(
          int index, int value) {
        ensureBuffIdListIsMutable();
        buffIdList_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public Builder addBuffIdList(int value) {
        ensureBuffIdListIsMutable();
        buffIdList_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public Builder addAllBuffIdList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBuffIdListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, buffIdList_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buffIdList = 6;</code>
       *
       * <pre>
       ** 武将出场时携带的buffId列表 
       * </pre>
       */
      public Builder clearBuffIdList() {
        buffIdList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private int lingYaLevel_ ;
      /**
       * <code>required int32 lingYaLevel = 7;</code>
       *
       * <pre>
       ** 灵压等级 
       * </pre>
       */
      public boolean hasLingYaLevel() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 lingYaLevel = 7;</code>
       *
       * <pre>
       ** 灵压等级 
       * </pre>
       */
      public int getLingYaLevel() {
        return lingYaLevel_;
      }
      /**
       * <code>required int32 lingYaLevel = 7;</code>
       *
       * <pre>
       ** 灵压等级 
       * </pre>
       */
      public Builder setLingYaLevel(int value) {
        bitField0_ |= 0x00000040;
        lingYaLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 lingYaLevel = 7;</code>
       *
       * <pre>
       ** 灵压等级 
       * </pre>
       */
      public Builder clearLingYaLevel() {
        bitField0_ = (bitField0_ & ~0x00000040);
        lingYaLevel_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> spellIds_ = java.util.Collections.emptyList();
      private void ensureSpellIdsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          spellIds_ = new java.util.ArrayList<java.lang.Integer>(spellIds_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSpellIdsList() {
        return java.util.Collections.unmodifiableList(spellIds_);
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public int getSpellIdsCount() {
        return spellIds_.size();
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public int getSpellIds(int index) {
        return spellIds_.get(index);
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public Builder setSpellIds(
          int index, int value) {
        ensureSpellIdsIsMutable();
        spellIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public Builder addSpellIds(int value) {
        ensureSpellIdsIsMutable();
        spellIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public Builder addAllSpellIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSpellIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, spellIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 spellIds = 8;</code>
       *
       * <pre>
       ** 额外会的主动技能ID列表 
       * </pre>
       */
      public Builder clearSpellIds() {
        spellIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> auraIds_ = java.util.Collections.emptyList();
      private void ensureAuraIdsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          auraIds_ = new java.util.ArrayList<java.lang.Integer>(auraIds_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAuraIdsList() {
        return java.util.Collections.unmodifiableList(auraIds_);
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public int getAuraIdsCount() {
        return auraIds_.size();
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public int getAuraIds(int index) {
        return auraIds_.get(index);
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public Builder setAuraIds(
          int index, int value) {
        ensureAuraIdsIsMutable();
        auraIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public Builder addAuraIds(int value) {
        ensureAuraIdsIsMutable();
        auraIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public Builder addAllAuraIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAuraIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, auraIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 auraIds = 9;</code>
       *
       * <pre>
       ** 携带的光环列表 
       * </pre>
       */
      public Builder clearAuraIds() {
        auraIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.RoleInfo)
    }

    static {
      defaultInstance = new RoleInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.RoleInfo)
  }

  public interface InitPropOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.InitProp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 propId = 1;</code>
     */
    boolean hasPropId();
    /**
     * <code>required int32 propId = 1;</code>
     */
    int getPropId();

    /**
     * <code>required float value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>required float value = 2;</code>
     */
    float getValue();
  }
  /**
   * Protobuf type {@code com.mokylin.InitProp}
   *
   * <pre>
   ** 初始属性 
   * </pre>
   */
  public static final class InitProp extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.InitProp)
      InitPropOrBuilder {
    // Use InitProp.newBuilder() to construct.
    private InitProp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InitProp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InitProp defaultInstance;
    public static InitProp getDefaultInstance() {
      return defaultInstance;
    }

    public InitProp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InitProp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              propId_ = input.readInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              value_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_InitProp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_InitProp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.InitProp.class, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder.class);
    }

    public static com.google.protobuf.Parser<InitProp> PARSER =
        new com.google.protobuf.AbstractParser<InitProp>() {
      public InitProp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InitProp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InitProp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PROPID_FIELD_NUMBER = 1;
    private int propId_;
    /**
     * <code>required int32 propId = 1;</code>
     */
    public boolean hasPropId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 propId = 1;</code>
     */
    public int getPropId() {
      return propId_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private float value_;
    /**
     * <code>required float value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float value = 2;</code>
     */
    public float getValue() {
      return value_;
    }

    private void initFields() {
      propId_ = 0;
      value_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPropId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, propId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, propId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.InitProp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.InitProp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.InitProp}
     *
     * <pre>
     ** 初始属性 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.InitProp)
        com.mokylin.bleach.protobuf.CombatMessage.InitPropOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_InitProp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_InitProp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.InitProp.class, com.mokylin.bleach.protobuf.CombatMessage.InitProp.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.InitProp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        propId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_InitProp_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.InitProp getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.InitProp.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.InitProp build() {
        com.mokylin.bleach.protobuf.CombatMessage.InitProp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.InitProp buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.InitProp result = new com.mokylin.bleach.protobuf.CombatMessage.InitProp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.propId_ = propId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.InitProp) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.InitProp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.InitProp other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.InitProp.getDefaultInstance()) return this;
        if (other.hasPropId()) {
          setPropId(other.getPropId());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPropId()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.InitProp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.InitProp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int propId_ ;
      /**
       * <code>required int32 propId = 1;</code>
       */
      public boolean hasPropId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 propId = 1;</code>
       */
      public int getPropId() {
        return propId_;
      }
      /**
       * <code>required int32 propId = 1;</code>
       */
      public Builder setPropId(int value) {
        bitField0_ |= 0x00000001;
        propId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 propId = 1;</code>
       */
      public Builder clearPropId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        propId_ = 0;
        onChanged();
        return this;
      }

      private float value_ ;
      /**
       * <code>required float value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float value = 2;</code>
       */
      public float getValue() {
        return value_;
      }
      /**
       * <code>required float value = 2;</code>
       */
      public Builder setValue(float value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float value = 2;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.InitProp)
    }

    static {
      defaultInstance = new InitProp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.InitProp)
  }

  public interface HeroTemplateDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.HeroTemplateData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    int getId();

    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    boolean hasDoNothingId();
    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    int getDoNothingId();

    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    boolean hasNormalSkillId();
    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    int getNormalSkillId();

    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    boolean hasCriticalSkillId();
    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    int getCriticalSkillId();

    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    boolean hasComboMasterSkillId();
    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    int getComboMasterSkillId();

    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    boolean hasComboSlaveSkillId();
    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    int getComboSlaveSkillId();

    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    java.util.List<java.lang.Integer> getSecondarySkillIdsList();
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    int getSecondarySkillIdsCount();
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    int getSecondarySkillIds(int index);
  }
  /**
   * Protobuf type {@code com.mokylin.HeroTemplateData}
   *
   * <pre>
   ** Hero模板数据 
   * </pre>
   */
  public static final class HeroTemplateData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.HeroTemplateData)
      HeroTemplateDataOrBuilder {
    // Use HeroTemplateData.newBuilder() to construct.
    private HeroTemplateData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HeroTemplateData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HeroTemplateData defaultInstance;
    public static HeroTemplateData getDefaultInstance() {
      return defaultInstance;
    }

    public HeroTemplateData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HeroTemplateData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              doNothingId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              normalSkillId_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              criticalSkillId_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              comboMasterSkillId_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              comboSlaveSkillId_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                secondarySkillIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              secondarySkillIds_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                secondarySkillIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                secondarySkillIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          secondarySkillIds_ = java.util.Collections.unmodifiableList(secondarySkillIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_HeroTemplateData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_HeroTemplateData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder.class);
    }

    public static com.google.protobuf.Parser<HeroTemplateData> PARSER =
        new com.google.protobuf.AbstractParser<HeroTemplateData>() {
      public HeroTemplateData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HeroTemplateData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HeroTemplateData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int DONOTHINGID_FIELD_NUMBER = 2;
    private int doNothingId_;
    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    public boolean hasDoNothingId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    public int getDoNothingId() {
      return doNothingId_;
    }

    public static final int NORMALSKILLID_FIELD_NUMBER = 3;
    private int normalSkillId_;
    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    public boolean hasNormalSkillId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    public int getNormalSkillId() {
      return normalSkillId_;
    }

    public static final int CRITICALSKILLID_FIELD_NUMBER = 4;
    private int criticalSkillId_;
    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    public boolean hasCriticalSkillId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    public int getCriticalSkillId() {
      return criticalSkillId_;
    }

    public static final int COMBOMASTERSKILLID_FIELD_NUMBER = 5;
    private int comboMasterSkillId_;
    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    public boolean hasComboMasterSkillId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    public int getComboMasterSkillId() {
      return comboMasterSkillId_;
    }

    public static final int COMBOSLAVESKILLID_FIELD_NUMBER = 6;
    private int comboSlaveSkillId_;
    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    public boolean hasComboSlaveSkillId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    public int getComboSlaveSkillId() {
      return comboSlaveSkillId_;
    }

    public static final int SECONDARYSKILLIDS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> secondarySkillIds_;
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSecondarySkillIdsList() {
      return secondarySkillIds_;
    }
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    public int getSecondarySkillIdsCount() {
      return secondarySkillIds_.size();
    }
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    public int getSecondarySkillIds(int index) {
      return secondarySkillIds_.get(index);
    }

    private void initFields() {
      id_ = 0;
      doNothingId_ = 0;
      normalSkillId_ = 0;
      criticalSkillId_ = 0;
      comboMasterSkillId_ = 0;
      comboSlaveSkillId_ = 0;
      secondarySkillIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDoNothingId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNormalSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCriticalSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasComboMasterSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasComboSlaveSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, doNothingId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, normalSkillId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, criticalSkillId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, comboMasterSkillId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, comboSlaveSkillId_);
      }
      for (int i = 0; i < secondarySkillIds_.size(); i++) {
        output.writeInt32(7, secondarySkillIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, doNothingId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, normalSkillId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, criticalSkillId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, comboMasterSkillId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, comboSlaveSkillId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < secondarySkillIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(secondarySkillIds_.get(i));
        }
        size += dataSize;
        size += 1 * getSecondarySkillIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.HeroTemplateData}
     *
     * <pre>
     ** Hero模板数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.HeroTemplateData)
        com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_HeroTemplateData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_HeroTemplateData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        doNothingId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        normalSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        criticalSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        comboMasterSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        comboSlaveSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        secondarySkillIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_HeroTemplateData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData build() {
        com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData result = new com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.doNothingId_ = doNothingId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.normalSkillId_ = normalSkillId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.criticalSkillId_ = criticalSkillId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.comboMasterSkillId_ = comboMasterSkillId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.comboSlaveSkillId_ = comboSlaveSkillId_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          secondarySkillIds_ = java.util.Collections.unmodifiableList(secondarySkillIds_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.secondarySkillIds_ = secondarySkillIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasDoNothingId()) {
          setDoNothingId(other.getDoNothingId());
        }
        if (other.hasNormalSkillId()) {
          setNormalSkillId(other.getNormalSkillId());
        }
        if (other.hasCriticalSkillId()) {
          setCriticalSkillId(other.getCriticalSkillId());
        }
        if (other.hasComboMasterSkillId()) {
          setComboMasterSkillId(other.getComboMasterSkillId());
        }
        if (other.hasComboSlaveSkillId()) {
          setComboSlaveSkillId(other.getComboSlaveSkillId());
        }
        if (!other.secondarySkillIds_.isEmpty()) {
          if (secondarySkillIds_.isEmpty()) {
            secondarySkillIds_ = other.secondarySkillIds_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureSecondarySkillIdsIsMutable();
            secondarySkillIds_.addAll(other.secondarySkillIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasDoNothingId()) {
          
          return false;
        }
        if (!hasNormalSkillId()) {
          
          return false;
        }
        if (!hasCriticalSkillId()) {
          
          return false;
        }
        if (!hasComboMasterSkillId()) {
          
          return false;
        }
        if (!hasComboSlaveSkillId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.HeroTemplateData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int doNothingId_ ;
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public boolean hasDoNothingId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public int getDoNothingId() {
        return doNothingId_;
      }
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public Builder setDoNothingId(int value) {
        bitField0_ |= 0x00000002;
        doNothingId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public Builder clearDoNothingId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        doNothingId_ = 0;
        onChanged();
        return this;
      }

      private int normalSkillId_ ;
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public boolean hasNormalSkillId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public int getNormalSkillId() {
        return normalSkillId_;
      }
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public Builder setNormalSkillId(int value) {
        bitField0_ |= 0x00000004;
        normalSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public Builder clearNormalSkillId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        normalSkillId_ = 0;
        onChanged();
        return this;
      }

      private int criticalSkillId_ ;
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public boolean hasCriticalSkillId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public int getCriticalSkillId() {
        return criticalSkillId_;
      }
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public Builder setCriticalSkillId(int value) {
        bitField0_ |= 0x00000008;
        criticalSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public Builder clearCriticalSkillId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        criticalSkillId_ = 0;
        onChanged();
        return this;
      }

      private int comboMasterSkillId_ ;
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public boolean hasComboMasterSkillId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public int getComboMasterSkillId() {
        return comboMasterSkillId_;
      }
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public Builder setComboMasterSkillId(int value) {
        bitField0_ |= 0x00000010;
        comboMasterSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public Builder clearComboMasterSkillId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        comboMasterSkillId_ = 0;
        onChanged();
        return this;
      }

      private int comboSlaveSkillId_ ;
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public boolean hasComboSlaveSkillId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public int getComboSlaveSkillId() {
        return comboSlaveSkillId_;
      }
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public Builder setComboSlaveSkillId(int value) {
        bitField0_ |= 0x00000020;
        comboSlaveSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public Builder clearComboSlaveSkillId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        comboSlaveSkillId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> secondarySkillIds_ = java.util.Collections.emptyList();
      private void ensureSecondarySkillIdsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          secondarySkillIds_ = new java.util.ArrayList<java.lang.Integer>(secondarySkillIds_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSecondarySkillIdsList() {
        return java.util.Collections.unmodifiableList(secondarySkillIds_);
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public int getSecondarySkillIdsCount() {
        return secondarySkillIds_.size();
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public int getSecondarySkillIds(int index) {
        return secondarySkillIds_.get(index);
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder setSecondarySkillIds(
          int index, int value) {
        ensureSecondarySkillIdsIsMutable();
        secondarySkillIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder addSecondarySkillIds(int value) {
        ensureSecondarySkillIdsIsMutable();
        secondarySkillIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder addAllSecondarySkillIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSecondarySkillIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, secondarySkillIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder clearSecondarySkillIds() {
        secondarySkillIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.HeroTemplateData)
    }

    static {
      defaultInstance = new HeroTemplateData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.HeroTemplateData)
  }

  public interface MonsterTemplateDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.MonsterTemplateData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    int getId();

    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    boolean hasDoNothingId();
    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    int getDoNothingId();

    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    boolean hasNormalSkillId();
    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    int getNormalSkillId();

    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    boolean hasCriticalSkillId();
    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    int getCriticalSkillId();

    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    boolean hasComboMasterSkillId();
    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    int getComboMasterSkillId();

    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    boolean hasComboSlaveSkillId();
    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    int getComboSlaveSkillId();

    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    java.util.List<java.lang.Integer> getSecondarySkillIdsList();
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    int getSecondarySkillIdsCount();
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    int getSecondarySkillIds(int index);
  }
  /**
   * Protobuf type {@code com.mokylin.MonsterTemplateData}
   *
   * <pre>
   ** Monster模板数据 
   * </pre>
   */
  public static final class MonsterTemplateData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.MonsterTemplateData)
      MonsterTemplateDataOrBuilder {
    // Use MonsterTemplateData.newBuilder() to construct.
    private MonsterTemplateData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MonsterTemplateData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MonsterTemplateData defaultInstance;
    public static MonsterTemplateData getDefaultInstance() {
      return defaultInstance;
    }

    public MonsterTemplateData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MonsterTemplateData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              doNothingId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              normalSkillId_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              criticalSkillId_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              comboMasterSkillId_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              comboSlaveSkillId_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                secondarySkillIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              secondarySkillIds_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                secondarySkillIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                secondarySkillIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          secondarySkillIds_ = java.util.Collections.unmodifiableList(secondarySkillIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_MonsterTemplateData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_MonsterTemplateData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder.class);
    }

    public static com.google.protobuf.Parser<MonsterTemplateData> PARSER =
        new com.google.protobuf.AbstractParser<MonsterTemplateData>() {
      public MonsterTemplateData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonsterTemplateData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MonsterTemplateData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int DONOTHINGID_FIELD_NUMBER = 2;
    private int doNothingId_;
    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    public boolean hasDoNothingId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 doNothingId = 2;</code>
     *
     * <pre>
     ** 什么都不做技能Id 
     * </pre>
     */
    public int getDoNothingId() {
      return doNothingId_;
    }

    public static final int NORMALSKILLID_FIELD_NUMBER = 3;
    private int normalSkillId_;
    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    public boolean hasNormalSkillId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 normalSkillId = 3;</code>
     *
     * <pre>
     ** 普通技能Id 
     * </pre>
     */
    public int getNormalSkillId() {
      return normalSkillId_;
    }

    public static final int CRITICALSKILLID_FIELD_NUMBER = 4;
    private int criticalSkillId_;
    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    public boolean hasCriticalSkillId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 criticalSkillId = 4;</code>
     *
     * <pre>
     ** 大招技能Id 
     * </pre>
     */
    public int getCriticalSkillId() {
      return criticalSkillId_;
    }

    public static final int COMBOMASTERSKILLID_FIELD_NUMBER = 5;
    private int comboMasterSkillId_;
    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    public boolean hasComboMasterSkillId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 comboMasterSkillId = 5;</code>
     *
     * <pre>
     ** 连携Master技能Id 
     * </pre>
     */
    public int getComboMasterSkillId() {
      return comboMasterSkillId_;
    }

    public static final int COMBOSLAVESKILLID_FIELD_NUMBER = 6;
    private int comboSlaveSkillId_;
    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    public boolean hasComboSlaveSkillId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 comboSlaveSkillId = 6;</code>
     *
     * <pre>
     ** 连携Slave技能Id 
     * </pre>
     */
    public int getComboSlaveSkillId() {
      return comboSlaveSkillId_;
    }

    public static final int SECONDARYSKILLIDS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> secondarySkillIds_;
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSecondarySkillIdsList() {
      return secondarySkillIds_;
    }
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    public int getSecondarySkillIdsCount() {
      return secondarySkillIds_.size();
    }
    /**
     * <code>repeated int32 secondarySkillIds = 7;</code>
     *
     * <pre>
     ** 辅助技能Id列表 
     * </pre>
     */
    public int getSecondarySkillIds(int index) {
      return secondarySkillIds_.get(index);
    }

    private void initFields() {
      id_ = 0;
      doNothingId_ = 0;
      normalSkillId_ = 0;
      criticalSkillId_ = 0;
      comboMasterSkillId_ = 0;
      comboSlaveSkillId_ = 0;
      secondarySkillIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDoNothingId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNormalSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCriticalSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasComboMasterSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasComboSlaveSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, doNothingId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, normalSkillId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, criticalSkillId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, comboMasterSkillId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, comboSlaveSkillId_);
      }
      for (int i = 0; i < secondarySkillIds_.size(); i++) {
        output.writeInt32(7, secondarySkillIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, doNothingId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, normalSkillId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, criticalSkillId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, comboMasterSkillId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, comboSlaveSkillId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < secondarySkillIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(secondarySkillIds_.get(i));
        }
        size += dataSize;
        size += 1 * getSecondarySkillIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.MonsterTemplateData}
     *
     * <pre>
     ** Monster模板数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.MonsterTemplateData)
        com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_MonsterTemplateData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_MonsterTemplateData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        doNothingId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        normalSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        criticalSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        comboMasterSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        comboSlaveSkillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        secondarySkillIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_MonsterTemplateData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData build() {
        com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData result = new com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.doNothingId_ = doNothingId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.normalSkillId_ = normalSkillId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.criticalSkillId_ = criticalSkillId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.comboMasterSkillId_ = comboMasterSkillId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.comboSlaveSkillId_ = comboSlaveSkillId_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          secondarySkillIds_ = java.util.Collections.unmodifiableList(secondarySkillIds_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.secondarySkillIds_ = secondarySkillIds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasDoNothingId()) {
          setDoNothingId(other.getDoNothingId());
        }
        if (other.hasNormalSkillId()) {
          setNormalSkillId(other.getNormalSkillId());
        }
        if (other.hasCriticalSkillId()) {
          setCriticalSkillId(other.getCriticalSkillId());
        }
        if (other.hasComboMasterSkillId()) {
          setComboMasterSkillId(other.getComboMasterSkillId());
        }
        if (other.hasComboSlaveSkillId()) {
          setComboSlaveSkillId(other.getComboSlaveSkillId());
        }
        if (!other.secondarySkillIds_.isEmpty()) {
          if (secondarySkillIds_.isEmpty()) {
            secondarySkillIds_ = other.secondarySkillIds_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureSecondarySkillIdsIsMutable();
            secondarySkillIds_.addAll(other.secondarySkillIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasDoNothingId()) {
          
          return false;
        }
        if (!hasNormalSkillId()) {
          
          return false;
        }
        if (!hasCriticalSkillId()) {
          
          return false;
        }
        if (!hasComboMasterSkillId()) {
          
          return false;
        }
        if (!hasComboSlaveSkillId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.MonsterTemplateData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int doNothingId_ ;
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public boolean hasDoNothingId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public int getDoNothingId() {
        return doNothingId_;
      }
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public Builder setDoNothingId(int value) {
        bitField0_ |= 0x00000002;
        doNothingId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 doNothingId = 2;</code>
       *
       * <pre>
       ** 什么都不做技能Id 
       * </pre>
       */
      public Builder clearDoNothingId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        doNothingId_ = 0;
        onChanged();
        return this;
      }

      private int normalSkillId_ ;
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public boolean hasNormalSkillId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public int getNormalSkillId() {
        return normalSkillId_;
      }
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public Builder setNormalSkillId(int value) {
        bitField0_ |= 0x00000004;
        normalSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 normalSkillId = 3;</code>
       *
       * <pre>
       ** 普通技能Id 
       * </pre>
       */
      public Builder clearNormalSkillId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        normalSkillId_ = 0;
        onChanged();
        return this;
      }

      private int criticalSkillId_ ;
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public boolean hasCriticalSkillId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public int getCriticalSkillId() {
        return criticalSkillId_;
      }
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public Builder setCriticalSkillId(int value) {
        bitField0_ |= 0x00000008;
        criticalSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 criticalSkillId = 4;</code>
       *
       * <pre>
       ** 大招技能Id 
       * </pre>
       */
      public Builder clearCriticalSkillId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        criticalSkillId_ = 0;
        onChanged();
        return this;
      }

      private int comboMasterSkillId_ ;
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public boolean hasComboMasterSkillId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public int getComboMasterSkillId() {
        return comboMasterSkillId_;
      }
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public Builder setComboMasterSkillId(int value) {
        bitField0_ |= 0x00000010;
        comboMasterSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 comboMasterSkillId = 5;</code>
       *
       * <pre>
       ** 连携Master技能Id 
       * </pre>
       */
      public Builder clearComboMasterSkillId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        comboMasterSkillId_ = 0;
        onChanged();
        return this;
      }

      private int comboSlaveSkillId_ ;
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public boolean hasComboSlaveSkillId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public int getComboSlaveSkillId() {
        return comboSlaveSkillId_;
      }
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public Builder setComboSlaveSkillId(int value) {
        bitField0_ |= 0x00000020;
        comboSlaveSkillId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 comboSlaveSkillId = 6;</code>
       *
       * <pre>
       ** 连携Slave技能Id 
       * </pre>
       */
      public Builder clearComboSlaveSkillId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        comboSlaveSkillId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> secondarySkillIds_ = java.util.Collections.emptyList();
      private void ensureSecondarySkillIdsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          secondarySkillIds_ = new java.util.ArrayList<java.lang.Integer>(secondarySkillIds_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSecondarySkillIdsList() {
        return java.util.Collections.unmodifiableList(secondarySkillIds_);
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public int getSecondarySkillIdsCount() {
        return secondarySkillIds_.size();
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public int getSecondarySkillIds(int index) {
        return secondarySkillIds_.get(index);
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder setSecondarySkillIds(
          int index, int value) {
        ensureSecondarySkillIdsIsMutable();
        secondarySkillIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder addSecondarySkillIds(int value) {
        ensureSecondarySkillIdsIsMutable();
        secondarySkillIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder addAllSecondarySkillIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSecondarySkillIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, secondarySkillIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 secondarySkillIds = 7;</code>
       *
       * <pre>
       ** 辅助技能Id列表 
       * </pre>
       */
      public Builder clearSecondarySkillIds() {
        secondarySkillIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.MonsterTemplateData)
    }

    static {
      defaultInstance = new MonsterTemplateData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.MonsterTemplateData)
  }

  public interface SpellTemplateDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.SpellTemplateData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    int getId();

    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode> 
        getSpellIdNodesList();
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode getSpellIdNodes(int index);
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    int getSpellIdNodesCount();
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder> 
        getSpellIdNodesOrBuilderList();
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder getSpellIdNodesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.mokylin.SpellTemplateData}
   *
   * <pre>
   ** 技能模板数据 
   * </pre>
   */
  public static final class SpellTemplateData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.SpellTemplateData)
      SpellTemplateDataOrBuilder {
    // Use SpellTemplateData.newBuilder() to construct.
    private SpellTemplateData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpellTemplateData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpellTemplateData defaultInstance;
    public static SpellTemplateData getDefaultInstance() {
      return defaultInstance;
    }

    public SpellTemplateData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpellTemplateData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                spellIdNodes_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode>();
                mutable_bitField0_ |= 0x00000002;
              }
              spellIdNodes_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          spellIdNodes_ = java.util.Collections.unmodifiableList(spellIdNodes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellTemplateData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellTemplateData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder.class);
    }

    public static com.google.protobuf.Parser<SpellTemplateData> PARSER =
        new com.google.protobuf.AbstractParser<SpellTemplateData>() {
      public SpellTemplateData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpellTemplateData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpellTemplateData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int SPELLIDNODES_FIELD_NUMBER = 2;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode> spellIdNodes_;
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode> getSpellIdNodesList() {
      return spellIdNodes_;
    }
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder> 
        getSpellIdNodesOrBuilderList() {
      return spellIdNodes_;
    }
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    public int getSpellIdNodesCount() {
      return spellIdNodes_.size();
    }
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode getSpellIdNodes(int index) {
      return spellIdNodes_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
     *
     * <pre>
     **技能ID节点列表 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder getSpellIdNodesOrBuilder(
        int index) {
      return spellIdNodes_.get(index);
    }

    private void initFields() {
      id_ = 0;
      spellIdNodes_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSpellIdNodesCount(); i++) {
        if (!getSpellIdNodes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      for (int i = 0; i < spellIdNodes_.size(); i++) {
        output.writeMessage(2, spellIdNodes_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      for (int i = 0; i < spellIdNodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, spellIdNodes_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.SpellTemplateData}
     *
     * <pre>
     ** 技能模板数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.SpellTemplateData)
        com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellTemplateData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellTemplateData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSpellIdNodesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (spellIdNodesBuilder_ == null) {
          spellIdNodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          spellIdNodesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellTemplateData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData build() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData result = new com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (spellIdNodesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            spellIdNodes_ = java.util.Collections.unmodifiableList(spellIdNodes_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.spellIdNodes_ = spellIdNodes_;
        } else {
          result.spellIdNodes_ = spellIdNodesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (spellIdNodesBuilder_ == null) {
          if (!other.spellIdNodes_.isEmpty()) {
            if (spellIdNodes_.isEmpty()) {
              spellIdNodes_ = other.spellIdNodes_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSpellIdNodesIsMutable();
              spellIdNodes_.addAll(other.spellIdNodes_);
            }
            onChanged();
          }
        } else {
          if (!other.spellIdNodes_.isEmpty()) {
            if (spellIdNodesBuilder_.isEmpty()) {
              spellIdNodesBuilder_.dispose();
              spellIdNodesBuilder_ = null;
              spellIdNodes_ = other.spellIdNodes_;
              bitField0_ = (bitField0_ & ~0x00000002);
              spellIdNodesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSpellIdNodesFieldBuilder() : null;
            } else {
              spellIdNodesBuilder_.addAllMessages(other.spellIdNodes_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        for (int i = 0; i < getSpellIdNodesCount(); i++) {
          if (!getSpellIdNodes(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.SpellTemplateData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode> spellIdNodes_ =
        java.util.Collections.emptyList();
      private void ensureSpellIdNodesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          spellIdNodes_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode>(spellIdNodes_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder> spellIdNodesBuilder_;

      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode> getSpellIdNodesList() {
        if (spellIdNodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(spellIdNodes_);
        } else {
          return spellIdNodesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public int getSpellIdNodesCount() {
        if (spellIdNodesBuilder_ == null) {
          return spellIdNodes_.size();
        } else {
          return spellIdNodesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode getSpellIdNodes(int index) {
        if (spellIdNodesBuilder_ == null) {
          return spellIdNodes_.get(index);
        } else {
          return spellIdNodesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder setSpellIdNodes(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode value) {
        if (spellIdNodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.set(index, value);
          onChanged();
        } else {
          spellIdNodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder setSpellIdNodes(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder builderForValue) {
        if (spellIdNodesBuilder_ == null) {
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          spellIdNodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder addSpellIdNodes(com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode value) {
        if (spellIdNodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.add(value);
          onChanged();
        } else {
          spellIdNodesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder addSpellIdNodes(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode value) {
        if (spellIdNodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.add(index, value);
          onChanged();
        } else {
          spellIdNodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder addSpellIdNodes(
          com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder builderForValue) {
        if (spellIdNodesBuilder_ == null) {
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.add(builderForValue.build());
          onChanged();
        } else {
          spellIdNodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder addSpellIdNodes(
          int index, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder builderForValue) {
        if (spellIdNodesBuilder_ == null) {
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          spellIdNodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder addAllSpellIdNodes(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode> values) {
        if (spellIdNodesBuilder_ == null) {
          ensureSpellIdNodesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, spellIdNodes_);
          onChanged();
        } else {
          spellIdNodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder clearSpellIdNodes() {
        if (spellIdNodesBuilder_ == null) {
          spellIdNodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          spellIdNodesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public Builder removeSpellIdNodes(int index) {
        if (spellIdNodesBuilder_ == null) {
          ensureSpellIdNodesIsMutable();
          spellIdNodes_.remove(index);
          onChanged();
        } else {
          spellIdNodesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder getSpellIdNodesBuilder(
          int index) {
        return getSpellIdNodesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder getSpellIdNodesOrBuilder(
          int index) {
        if (spellIdNodesBuilder_ == null) {
          return spellIdNodes_.get(index);  } else {
          return spellIdNodesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder> 
           getSpellIdNodesOrBuilderList() {
        if (spellIdNodesBuilder_ != null) {
          return spellIdNodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(spellIdNodes_);
        }
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder addSpellIdNodesBuilder() {
        return getSpellIdNodesFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder addSpellIdNodesBuilder(
          int index) {
        return getSpellIdNodesFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.SpellIdNode spellIdNodes = 2;</code>
       *
       * <pre>
       **技能ID节点列表 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder> 
           getSpellIdNodesBuilderList() {
        return getSpellIdNodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder> 
          getSpellIdNodesFieldBuilder() {
        if (spellIdNodesBuilder_ == null) {
          spellIdNodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder>(
                  spellIdNodes_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          spellIdNodes_ = null;
        }
        return spellIdNodesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.SpellTemplateData)
    }

    static {
      defaultInstance = new SpellTemplateData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.SpellTemplateData)
  }

  public interface SpellIdNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.SpellIdNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 spellLogicId = 1;</code>
     *
     * <pre>
     ** 技能逻辑模板Id 
     * </pre>
     */
    boolean hasSpellLogicId();
    /**
     * <code>required int32 spellLogicId = 1;</code>
     *
     * <pre>
     ** 技能逻辑模板Id 
     * </pre>
     */
    int getSpellLogicId();

    /**
     * <code>required string spellPresentId = 2;</code>
     *
     * <pre>
     ** 技能显示数据Id 
     * </pre>
     */
    boolean hasSpellPresentId();
    /**
     * <code>required string spellPresentId = 2;</code>
     *
     * <pre>
     ** 技能显示数据Id 
     * </pre>
     */
    java.lang.String getSpellPresentId();
    /**
     * <code>required string spellPresentId = 2;</code>
     *
     * <pre>
     ** 技能显示数据Id 
     * </pre>
     */
    com.google.protobuf.ByteString
        getSpellPresentIdBytes();
  }
  /**
   * Protobuf type {@code com.mokylin.SpellIdNode}
   *
   * <pre>
   ** 技能ID节点 
   * </pre>
   */
  public static final class SpellIdNode extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.SpellIdNode)
      SpellIdNodeOrBuilder {
    // Use SpellIdNode.newBuilder() to construct.
    private SpellIdNode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpellIdNode(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpellIdNode defaultInstance;
    public static SpellIdNode getDefaultInstance() {
      return defaultInstance;
    }

    public SpellIdNode getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpellIdNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              spellLogicId_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              spellPresentId_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellIdNode_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellIdNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.class, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder.class);
    }

    public static com.google.protobuf.Parser<SpellIdNode> PARSER =
        new com.google.protobuf.AbstractParser<SpellIdNode>() {
      public SpellIdNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpellIdNode(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpellIdNode> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SPELLLOGICID_FIELD_NUMBER = 1;
    private int spellLogicId_;
    /**
     * <code>required int32 spellLogicId = 1;</code>
     *
     * <pre>
     ** 技能逻辑模板Id 
     * </pre>
     */
    public boolean hasSpellLogicId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 spellLogicId = 1;</code>
     *
     * <pre>
     ** 技能逻辑模板Id 
     * </pre>
     */
    public int getSpellLogicId() {
      return spellLogicId_;
    }

    public static final int SPELLPRESENTID_FIELD_NUMBER = 2;
    private java.lang.Object spellPresentId_;
    /**
     * <code>required string spellPresentId = 2;</code>
     *
     * <pre>
     ** 技能显示数据Id 
     * </pre>
     */
    public boolean hasSpellPresentId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string spellPresentId = 2;</code>
     *
     * <pre>
     ** 技能显示数据Id 
     * </pre>
     */
    public java.lang.String getSpellPresentId() {
      java.lang.Object ref = spellPresentId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          spellPresentId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string spellPresentId = 2;</code>
     *
     * <pre>
     ** 技能显示数据Id 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSpellPresentIdBytes() {
      java.lang.Object ref = spellPresentId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        spellPresentId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      spellLogicId_ = 0;
      spellPresentId_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSpellLogicId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpellPresentId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, spellLogicId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getSpellPresentIdBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, spellLogicId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getSpellPresentIdBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.SpellIdNode}
     *
     * <pre>
     ** 技能ID节点 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.SpellIdNode)
        com.mokylin.bleach.protobuf.CombatMessage.SpellIdNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellIdNode_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellIdNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.class, com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        spellLogicId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        spellPresentId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellIdNode_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode build() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode result = new com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.spellLogicId_ = spellLogicId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.spellPresentId_ = spellPresentId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode.getDefaultInstance()) return this;
        if (other.hasSpellLogicId()) {
          setSpellLogicId(other.getSpellLogicId());
        }
        if (other.hasSpellPresentId()) {
          bitField0_ |= 0x00000002;
          spellPresentId_ = other.spellPresentId_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSpellLogicId()) {
          
          return false;
        }
        if (!hasSpellPresentId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.SpellIdNode) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int spellLogicId_ ;
      /**
       * <code>required int32 spellLogicId = 1;</code>
       *
       * <pre>
       ** 技能逻辑模板Id 
       * </pre>
       */
      public boolean hasSpellLogicId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 spellLogicId = 1;</code>
       *
       * <pre>
       ** 技能逻辑模板Id 
       * </pre>
       */
      public int getSpellLogicId() {
        return spellLogicId_;
      }
      /**
       * <code>required int32 spellLogicId = 1;</code>
       *
       * <pre>
       ** 技能逻辑模板Id 
       * </pre>
       */
      public Builder setSpellLogicId(int value) {
        bitField0_ |= 0x00000001;
        spellLogicId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 spellLogicId = 1;</code>
       *
       * <pre>
       ** 技能逻辑模板Id 
       * </pre>
       */
      public Builder clearSpellLogicId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        spellLogicId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object spellPresentId_ = "";
      /**
       * <code>required string spellPresentId = 2;</code>
       *
       * <pre>
       ** 技能显示数据Id 
       * </pre>
       */
      public boolean hasSpellPresentId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string spellPresentId = 2;</code>
       *
       * <pre>
       ** 技能显示数据Id 
       * </pre>
       */
      public java.lang.String getSpellPresentId() {
        java.lang.Object ref = spellPresentId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            spellPresentId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string spellPresentId = 2;</code>
       *
       * <pre>
       ** 技能显示数据Id 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSpellPresentIdBytes() {
        java.lang.Object ref = spellPresentId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          spellPresentId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string spellPresentId = 2;</code>
       *
       * <pre>
       ** 技能显示数据Id 
       * </pre>
       */
      public Builder setSpellPresentId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        spellPresentId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string spellPresentId = 2;</code>
       *
       * <pre>
       ** 技能显示数据Id 
       * </pre>
       */
      public Builder clearSpellPresentId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        spellPresentId_ = getDefaultInstance().getSpellPresentId();
        onChanged();
        return this;
      }
      /**
       * <code>required string spellPresentId = 2;</code>
       *
       * <pre>
       ** 技能显示数据Id 
       * </pre>
       */
      public Builder setSpellPresentIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        spellPresentId_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.SpellIdNode)
    }

    static {
      defaultInstance = new SpellIdNode(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.SpellIdNode)
  }

  public interface SpellLogicTemplateDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.SpellLogicTemplateData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    int getId();

    /**
     * <code>required int32 priority = 2;</code>
     *
     * <pre>
     ** 优先级 
     * </pre>
     */
    boolean hasPriority();
    /**
     * <code>required int32 priority = 2;</code>
     *
     * <pre>
     ** 优先级 
     * </pre>
     */
    int getPriority();

    /**
     * <code>required int32 mpCost = 3;</code>
     *
     * <pre>
     ** 能量消耗 
     * </pre>
     */
    boolean hasMpCost();
    /**
     * <code>required int32 mpCost = 3;</code>
     *
     * <pre>
     ** 能量消耗 
     * </pre>
     */
    int getMpCost();

    /**
     * <code>required int32 initCd = 4;</code>
     *
     * <pre>
     ** 初始CD 
     * </pre>
     */
    boolean hasInitCd();
    /**
     * <code>required int32 initCd = 4;</code>
     *
     * <pre>
     ** 初始CD 
     * </pre>
     */
    int getInitCd();

    /**
     * <code>required int32 cd = 5;</code>
     *
     * <pre>
     ** CD 
     * </pre>
     */
    boolean hasCd();
    /**
     * <code>required int32 cd = 5;</code>
     *
     * <pre>
     ** CD 
     * </pre>
     */
    int getCd();

    /**
     * <code>required int32 targetSelector = 6;</code>
     *
     * <pre>
     ** 目标 
     * </pre>
     */
    boolean hasTargetSelector();
    /**
     * <code>required int32 targetSelector = 6;</code>
     *
     * <pre>
     ** 目标 
     * </pre>
     */
    int getTargetSelector();

    /**
     * <code>required int32 rangeSelector = 7;</code>
     *
     * <pre>
     ** 范围 
     * </pre>
     */
    boolean hasRangeSelector();
    /**
     * <code>required int32 rangeSelector = 7;</code>
     *
     * <pre>
     ** 范围 
     * </pre>
     */
    int getRangeSelector();

    /**
     * <code>required int32 yuanSuLeiXing = 8;</code>
     *
     * <pre>
     ** 元素类型 
     * </pre>
     */
    boolean hasYuanSuLeiXing();
    /**
     * <code>required int32 yuanSuLeiXing = 8;</code>
     *
     * <pre>
     ** 元素类型 
     * </pre>
     */
    int getYuanSuLeiXing();

    /**
     * <code>required int32 spellType = 9;</code>
     *
     * <pre>
     ** 技能类型 
     * </pre>
     */
    boolean hasSpellType();
    /**
     * <code>required int32 spellType = 9;</code>
     *
     * <pre>
     ** 技能类型 
     * </pre>
     */
    int getSpellType();

    /**
     * <code>required int32 spellDamageType = 10;</code>
     *
     * <pre>
     ** 技能伤害类型 
     * </pre>
     */
    boolean hasSpellDamageType();
    /**
     * <code>required int32 spellDamageType = 10;</code>
     *
     * <pre>
     ** 技能伤害类型 
     * </pre>
     */
    int getSpellDamageType();

    /**
     * <code>required int32 spellExpType = 11;</code>
     *
     * <pre>
     ** 招式结算公式类型 
     * </pre>
     */
    boolean hasSpellExpType();
    /**
     * <code>required int32 spellExpType = 11;</code>
     *
     * <pre>
     ** 招式结算公式类型 
     * </pre>
     */
    int getSpellExpType();

    /**
     * <code>required float levelRelatedParameter = 12;</code>
     *
     * <pre>
     ** 技能等级相关系数 
     * </pre>
     */
    boolean hasLevelRelatedParameter();
    /**
     * <code>required float levelRelatedParameter = 12;</code>
     *
     * <pre>
     ** 技能等级相关系数 
     * </pre>
     */
    float getLevelRelatedParameter();

    /**
     * <code>required int32 spellCorrectionParameter = 13;</code>
     *
     * <pre>
     ** 技能修正值(万分比) 
     * </pre>
     */
    boolean hasSpellCorrectionParameter();
    /**
     * <code>required int32 spellCorrectionParameter = 13;</code>
     *
     * <pre>
     ** 技能修正值(万分比) 
     * </pre>
     */
    int getSpellCorrectionParameter();

    /**
     * <code>required bool IsBiZhong = 14;</code>
     *
     * <pre>
     ** 是否必中 
     * </pre>
     */
    boolean hasIsBiZhong();
    /**
     * <code>required bool IsBiZhong = 14;</code>
     *
     * <pre>
     ** 是否必中 
     * </pre>
     */
    boolean getIsBiZhong();

    /**
     * <code>required bool IsBiBaoJi = 15;</code>
     *
     * <pre>
     ** 是否比暴击 
     * </pre>
     */
    boolean hasIsBiBaoJi();
    /**
     * <code>required bool IsBiBaoJi = 15;</code>
     *
     * <pre>
     ** 是否比暴击 
     * </pre>
     */
    boolean getIsBiBaoJi();

    /**
     * <code>required bool IsNoBaoJi = 16;</code>
     *
     * <pre>
     ** 是否不判定暴击 
     * </pre>
     */
    boolean hasIsNoBaoJi();
    /**
     * <code>required bool IsNoBaoJi = 16;</code>
     *
     * <pre>
     ** 是否不判定暴击 
     * </pre>
     */
    boolean getIsNoBaoJi();

    /**
     * <code>required bool IsWuFaGeDang = 17;</code>
     *
     * <pre>
     ** 是否无法格挡 
     * </pre>
     */
    boolean hasIsWuFaGeDang();
    /**
     * <code>required bool IsWuFaGeDang = 17;</code>
     *
     * <pre>
     ** 是否无法格挡 
     * </pre>
     */
    boolean getIsWuFaGeDang();

    /**
     * <code>required bool IsBiPoJia = 18;</code>
     *
     * <pre>
     ** 是否比破甲 
     * </pre>
     */
    boolean hasIsBiPoJia();
    /**
     * <code>required bool IsBiPoJia = 18;</code>
     *
     * <pre>
     ** 是否比破甲 
     * </pre>
     */
    boolean getIsBiPoJia();

    /**
     * <code>required string strActionID = 19;</code>
     *
     * <pre>
     ** buff效果器（伤害计算事件ID） 
     * </pre>
     */
    boolean hasStrActionID();
    /**
     * <code>required string strActionID = 19;</code>
     *
     * <pre>
     ** buff效果器（伤害计算事件ID） 
     * </pre>
     */
    java.lang.String getStrActionID();
    /**
     * <code>required string strActionID = 19;</code>
     *
     * <pre>
     ** buff效果器（伤害计算事件ID） 
     * </pre>
     */
    com.google.protobuf.ByteString
        getStrActionIDBytes();

    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue> 
        getAttributeListList();
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue getAttributeList(int index);
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    int getAttributeListCount();
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder> 
        getAttributeListOrBuilderList();
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder getAttributeListOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.mokylin.SpellLogicTemplateData}
   *
   * <pre>
   ** 技能逻辑模板数据 
   * </pre>
   */
  public static final class SpellLogicTemplateData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.SpellLogicTemplateData)
      SpellLogicTemplateDataOrBuilder {
    // Use SpellLogicTemplateData.newBuilder() to construct.
    private SpellLogicTemplateData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpellLogicTemplateData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpellLogicTemplateData defaultInstance;
    public static SpellLogicTemplateData getDefaultInstance() {
      return defaultInstance;
    }

    public SpellLogicTemplateData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpellLogicTemplateData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              priority_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              mpCost_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              initCd_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cd_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              targetSelector_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              rangeSelector_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              yuanSuLeiXing_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              spellType_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              spellDamageType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              spellExpType_ = input.readInt32();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              levelRelatedParameter_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              spellCorrectionParameter_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              isBiZhong_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              isBiBaoJi_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              isNoBaoJi_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              isWuFaGeDang_ = input.readBool();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              isBiPoJia_ = input.readBool();
              break;
            }
            case 154: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00040000;
              strActionID_ = bs;
              break;
            }
            case 162: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                attributeList_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue>();
                mutable_bitField0_ |= 0x00080000;
              }
              attributeList_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          attributeList_ = java.util.Collections.unmodifiableList(attributeList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellLogicTemplateData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellLogicTemplateData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder.class);
    }

    public static com.google.protobuf.Parser<SpellLogicTemplateData> PARSER =
        new com.google.protobuf.AbstractParser<SpellLogicTemplateData>() {
      public SpellLogicTemplateData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpellLogicTemplateData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpellLogicTemplateData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int PRIORITY_FIELD_NUMBER = 2;
    private int priority_;
    /**
     * <code>required int32 priority = 2;</code>
     *
     * <pre>
     ** 优先级 
     * </pre>
     */
    public boolean hasPriority() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 priority = 2;</code>
     *
     * <pre>
     ** 优先级 
     * </pre>
     */
    public int getPriority() {
      return priority_;
    }

    public static final int MPCOST_FIELD_NUMBER = 3;
    private int mpCost_;
    /**
     * <code>required int32 mpCost = 3;</code>
     *
     * <pre>
     ** 能量消耗 
     * </pre>
     */
    public boolean hasMpCost() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 mpCost = 3;</code>
     *
     * <pre>
     ** 能量消耗 
     * </pre>
     */
    public int getMpCost() {
      return mpCost_;
    }

    public static final int INITCD_FIELD_NUMBER = 4;
    private int initCd_;
    /**
     * <code>required int32 initCd = 4;</code>
     *
     * <pre>
     ** 初始CD 
     * </pre>
     */
    public boolean hasInitCd() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 initCd = 4;</code>
     *
     * <pre>
     ** 初始CD 
     * </pre>
     */
    public int getInitCd() {
      return initCd_;
    }

    public static final int CD_FIELD_NUMBER = 5;
    private int cd_;
    /**
     * <code>required int32 cd = 5;</code>
     *
     * <pre>
     ** CD 
     * </pre>
     */
    public boolean hasCd() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 cd = 5;</code>
     *
     * <pre>
     ** CD 
     * </pre>
     */
    public int getCd() {
      return cd_;
    }

    public static final int TARGETSELECTOR_FIELD_NUMBER = 6;
    private int targetSelector_;
    /**
     * <code>required int32 targetSelector = 6;</code>
     *
     * <pre>
     ** 目标 
     * </pre>
     */
    public boolean hasTargetSelector() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 targetSelector = 6;</code>
     *
     * <pre>
     ** 目标 
     * </pre>
     */
    public int getTargetSelector() {
      return targetSelector_;
    }

    public static final int RANGESELECTOR_FIELD_NUMBER = 7;
    private int rangeSelector_;
    /**
     * <code>required int32 rangeSelector = 7;</code>
     *
     * <pre>
     ** 范围 
     * </pre>
     */
    public boolean hasRangeSelector() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 rangeSelector = 7;</code>
     *
     * <pre>
     ** 范围 
     * </pre>
     */
    public int getRangeSelector() {
      return rangeSelector_;
    }

    public static final int YUANSULEIXING_FIELD_NUMBER = 8;
    private int yuanSuLeiXing_;
    /**
     * <code>required int32 yuanSuLeiXing = 8;</code>
     *
     * <pre>
     ** 元素类型 
     * </pre>
     */
    public boolean hasYuanSuLeiXing() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 yuanSuLeiXing = 8;</code>
     *
     * <pre>
     ** 元素类型 
     * </pre>
     */
    public int getYuanSuLeiXing() {
      return yuanSuLeiXing_;
    }

    public static final int SPELLTYPE_FIELD_NUMBER = 9;
    private int spellType_;
    /**
     * <code>required int32 spellType = 9;</code>
     *
     * <pre>
     ** 技能类型 
     * </pre>
     */
    public boolean hasSpellType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 spellType = 9;</code>
     *
     * <pre>
     ** 技能类型 
     * </pre>
     */
    public int getSpellType() {
      return spellType_;
    }

    public static final int SPELLDAMAGETYPE_FIELD_NUMBER = 10;
    private int spellDamageType_;
    /**
     * <code>required int32 spellDamageType = 10;</code>
     *
     * <pre>
     ** 技能伤害类型 
     * </pre>
     */
    public boolean hasSpellDamageType() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 spellDamageType = 10;</code>
     *
     * <pre>
     ** 技能伤害类型 
     * </pre>
     */
    public int getSpellDamageType() {
      return spellDamageType_;
    }

    public static final int SPELLEXPTYPE_FIELD_NUMBER = 11;
    private int spellExpType_;
    /**
     * <code>required int32 spellExpType = 11;</code>
     *
     * <pre>
     ** 招式结算公式类型 
     * </pre>
     */
    public boolean hasSpellExpType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 spellExpType = 11;</code>
     *
     * <pre>
     ** 招式结算公式类型 
     * </pre>
     */
    public int getSpellExpType() {
      return spellExpType_;
    }

    public static final int LEVELRELATEDPARAMETER_FIELD_NUMBER = 12;
    private float levelRelatedParameter_;
    /**
     * <code>required float levelRelatedParameter = 12;</code>
     *
     * <pre>
     ** 技能等级相关系数 
     * </pre>
     */
    public boolean hasLevelRelatedParameter() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float levelRelatedParameter = 12;</code>
     *
     * <pre>
     ** 技能等级相关系数 
     * </pre>
     */
    public float getLevelRelatedParameter() {
      return levelRelatedParameter_;
    }

    public static final int SPELLCORRECTIONPARAMETER_FIELD_NUMBER = 13;
    private int spellCorrectionParameter_;
    /**
     * <code>required int32 spellCorrectionParameter = 13;</code>
     *
     * <pre>
     ** 技能修正值(万分比) 
     * </pre>
     */
    public boolean hasSpellCorrectionParameter() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 spellCorrectionParameter = 13;</code>
     *
     * <pre>
     ** 技能修正值(万分比) 
     * </pre>
     */
    public int getSpellCorrectionParameter() {
      return spellCorrectionParameter_;
    }

    public static final int ISBIZHONG_FIELD_NUMBER = 14;
    private boolean isBiZhong_;
    /**
     * <code>required bool IsBiZhong = 14;</code>
     *
     * <pre>
     ** 是否必中 
     * </pre>
     */
    public boolean hasIsBiZhong() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required bool IsBiZhong = 14;</code>
     *
     * <pre>
     ** 是否必中 
     * </pre>
     */
    public boolean getIsBiZhong() {
      return isBiZhong_;
    }

    public static final int ISBIBAOJI_FIELD_NUMBER = 15;
    private boolean isBiBaoJi_;
    /**
     * <code>required bool IsBiBaoJi = 15;</code>
     *
     * <pre>
     ** 是否比暴击 
     * </pre>
     */
    public boolean hasIsBiBaoJi() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required bool IsBiBaoJi = 15;</code>
     *
     * <pre>
     ** 是否比暴击 
     * </pre>
     */
    public boolean getIsBiBaoJi() {
      return isBiBaoJi_;
    }

    public static final int ISNOBAOJI_FIELD_NUMBER = 16;
    private boolean isNoBaoJi_;
    /**
     * <code>required bool IsNoBaoJi = 16;</code>
     *
     * <pre>
     ** 是否不判定暴击 
     * </pre>
     */
    public boolean hasIsNoBaoJi() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required bool IsNoBaoJi = 16;</code>
     *
     * <pre>
     ** 是否不判定暴击 
     * </pre>
     */
    public boolean getIsNoBaoJi() {
      return isNoBaoJi_;
    }

    public static final int ISWUFAGEDANG_FIELD_NUMBER = 17;
    private boolean isWuFaGeDang_;
    /**
     * <code>required bool IsWuFaGeDang = 17;</code>
     *
     * <pre>
     ** 是否无法格挡 
     * </pre>
     */
    public boolean hasIsWuFaGeDang() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required bool IsWuFaGeDang = 17;</code>
     *
     * <pre>
     ** 是否无法格挡 
     * </pre>
     */
    public boolean getIsWuFaGeDang() {
      return isWuFaGeDang_;
    }

    public static final int ISBIPOJIA_FIELD_NUMBER = 18;
    private boolean isBiPoJia_;
    /**
     * <code>required bool IsBiPoJia = 18;</code>
     *
     * <pre>
     ** 是否比破甲 
     * </pre>
     */
    public boolean hasIsBiPoJia() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required bool IsBiPoJia = 18;</code>
     *
     * <pre>
     ** 是否比破甲 
     * </pre>
     */
    public boolean getIsBiPoJia() {
      return isBiPoJia_;
    }

    public static final int STRACTIONID_FIELD_NUMBER = 19;
    private java.lang.Object strActionID_;
    /**
     * <code>required string strActionID = 19;</code>
     *
     * <pre>
     ** buff效果器（伤害计算事件ID） 
     * </pre>
     */
    public boolean hasStrActionID() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required string strActionID = 19;</code>
     *
     * <pre>
     ** buff效果器（伤害计算事件ID） 
     * </pre>
     */
    public java.lang.String getStrActionID() {
      java.lang.Object ref = strActionID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          strActionID_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string strActionID = 19;</code>
     *
     * <pre>
     ** buff效果器（伤害计算事件ID） 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStrActionIDBytes() {
      java.lang.Object ref = strActionID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        strActionID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ATTRIBUTELIST_FIELD_NUMBER = 20;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue> attributeList_;
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue> getAttributeListList() {
      return attributeList_;
    }
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder> 
        getAttributeListOrBuilderList() {
      return attributeList_;
    }
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    public int getAttributeListCount() {
      return attributeList_.size();
    }
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue getAttributeList(int index) {
      return attributeList_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
     *
     * <pre>
     ** 附带的属性(绝对值2) 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder getAttributeListOrBuilder(
        int index) {
      return attributeList_.get(index);
    }

    private void initFields() {
      id_ = 0;
      priority_ = 0;
      mpCost_ = 0;
      initCd_ = 0;
      cd_ = 0;
      targetSelector_ = 0;
      rangeSelector_ = 0;
      yuanSuLeiXing_ = 0;
      spellType_ = 0;
      spellDamageType_ = 0;
      spellExpType_ = 0;
      levelRelatedParameter_ = 0F;
      spellCorrectionParameter_ = 0;
      isBiZhong_ = false;
      isBiBaoJi_ = false;
      isNoBaoJi_ = false;
      isWuFaGeDang_ = false;
      isBiPoJia_ = false;
      strActionID_ = "";
      attributeList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPriority()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMpCost()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInitCd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetSelector()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRangeSelector()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYuanSuLeiXing()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpellType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpellDamageType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpellExpType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLevelRelatedParameter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpellCorrectionParameter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsBiZhong()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsBiBaoJi()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsNoBaoJi()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsWuFaGeDang()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsBiPoJia()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStrActionID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getAttributeListCount(); i++) {
        if (!getAttributeList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, priority_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, mpCost_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, initCd_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, cd_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, targetSelector_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, rangeSelector_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, yuanSuLeiXing_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, spellType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, spellDamageType_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, spellExpType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, levelRelatedParameter_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, spellCorrectionParameter_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(14, isBiZhong_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, isBiBaoJi_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(16, isNoBaoJi_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(17, isWuFaGeDang_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(18, isBiPoJia_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBytes(19, getStrActionIDBytes());
      }
      for (int i = 0; i < attributeList_.size(); i++) {
        output.writeMessage(20, attributeList_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, priority_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, mpCost_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, initCd_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cd_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, targetSelector_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, rangeSelector_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, yuanSuLeiXing_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, spellType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, spellDamageType_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, spellExpType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, levelRelatedParameter_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, spellCorrectionParameter_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, isBiZhong_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, isBiBaoJi_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, isNoBaoJi_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, isWuFaGeDang_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, isBiPoJia_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(19, getStrActionIDBytes());
      }
      for (int i = 0; i < attributeList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, attributeList_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.SpellLogicTemplateData}
     *
     * <pre>
     ** 技能逻辑模板数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.SpellLogicTemplateData)
        com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellLogicTemplateData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellLogicTemplateData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAttributeListFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        priority_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mpCost_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        initCd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        targetSelector_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        rangeSelector_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        yuanSuLeiXing_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        spellType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        spellDamageType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        spellExpType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        levelRelatedParameter_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        spellCorrectionParameter_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        isBiZhong_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        isBiBaoJi_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        isNoBaoJi_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        isWuFaGeDang_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        isBiPoJia_ = false;
        bitField0_ = (bitField0_ & ~0x00020000);
        strActionID_ = "";
        bitField0_ = (bitField0_ & ~0x00040000);
        if (attributeListBuilder_ == null) {
          attributeList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
        } else {
          attributeListBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellLogicTemplateData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData build() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData result = new com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.priority_ = priority_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mpCost_ = mpCost_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.initCd_ = initCd_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cd_ = cd_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.targetSelector_ = targetSelector_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rangeSelector_ = rangeSelector_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.yuanSuLeiXing_ = yuanSuLeiXing_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.spellType_ = spellType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.spellDamageType_ = spellDamageType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.spellExpType_ = spellExpType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.levelRelatedParameter_ = levelRelatedParameter_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.spellCorrectionParameter_ = spellCorrectionParameter_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.isBiZhong_ = isBiZhong_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.isBiBaoJi_ = isBiBaoJi_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.isNoBaoJi_ = isNoBaoJi_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.isWuFaGeDang_ = isWuFaGeDang_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.isBiPoJia_ = isBiPoJia_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.strActionID_ = strActionID_;
        if (attributeListBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000)) {
            attributeList_ = java.util.Collections.unmodifiableList(attributeList_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.attributeList_ = attributeList_;
        } else {
          result.attributeList_ = attributeListBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasPriority()) {
          setPriority(other.getPriority());
        }
        if (other.hasMpCost()) {
          setMpCost(other.getMpCost());
        }
        if (other.hasInitCd()) {
          setInitCd(other.getInitCd());
        }
        if (other.hasCd()) {
          setCd(other.getCd());
        }
        if (other.hasTargetSelector()) {
          setTargetSelector(other.getTargetSelector());
        }
        if (other.hasRangeSelector()) {
          setRangeSelector(other.getRangeSelector());
        }
        if (other.hasYuanSuLeiXing()) {
          setYuanSuLeiXing(other.getYuanSuLeiXing());
        }
        if (other.hasSpellType()) {
          setSpellType(other.getSpellType());
        }
        if (other.hasSpellDamageType()) {
          setSpellDamageType(other.getSpellDamageType());
        }
        if (other.hasSpellExpType()) {
          setSpellExpType(other.getSpellExpType());
        }
        if (other.hasLevelRelatedParameter()) {
          setLevelRelatedParameter(other.getLevelRelatedParameter());
        }
        if (other.hasSpellCorrectionParameter()) {
          setSpellCorrectionParameter(other.getSpellCorrectionParameter());
        }
        if (other.hasIsBiZhong()) {
          setIsBiZhong(other.getIsBiZhong());
        }
        if (other.hasIsBiBaoJi()) {
          setIsBiBaoJi(other.getIsBiBaoJi());
        }
        if (other.hasIsNoBaoJi()) {
          setIsNoBaoJi(other.getIsNoBaoJi());
        }
        if (other.hasIsWuFaGeDang()) {
          setIsWuFaGeDang(other.getIsWuFaGeDang());
        }
        if (other.hasIsBiPoJia()) {
          setIsBiPoJia(other.getIsBiPoJia());
        }
        if (other.hasStrActionID()) {
          bitField0_ |= 0x00040000;
          strActionID_ = other.strActionID_;
          onChanged();
        }
        if (attributeListBuilder_ == null) {
          if (!other.attributeList_.isEmpty()) {
            if (attributeList_.isEmpty()) {
              attributeList_ = other.attributeList_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensureAttributeListIsMutable();
              attributeList_.addAll(other.attributeList_);
            }
            onChanged();
          }
        } else {
          if (!other.attributeList_.isEmpty()) {
            if (attributeListBuilder_.isEmpty()) {
              attributeListBuilder_.dispose();
              attributeListBuilder_ = null;
              attributeList_ = other.attributeList_;
              bitField0_ = (bitField0_ & ~0x00080000);
              attributeListBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAttributeListFieldBuilder() : null;
            } else {
              attributeListBuilder_.addAllMessages(other.attributeList_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasPriority()) {
          
          return false;
        }
        if (!hasMpCost()) {
          
          return false;
        }
        if (!hasInitCd()) {
          
          return false;
        }
        if (!hasCd()) {
          
          return false;
        }
        if (!hasTargetSelector()) {
          
          return false;
        }
        if (!hasRangeSelector()) {
          
          return false;
        }
        if (!hasYuanSuLeiXing()) {
          
          return false;
        }
        if (!hasSpellType()) {
          
          return false;
        }
        if (!hasSpellDamageType()) {
          
          return false;
        }
        if (!hasSpellExpType()) {
          
          return false;
        }
        if (!hasLevelRelatedParameter()) {
          
          return false;
        }
        if (!hasSpellCorrectionParameter()) {
          
          return false;
        }
        if (!hasIsBiZhong()) {
          
          return false;
        }
        if (!hasIsBiBaoJi()) {
          
          return false;
        }
        if (!hasIsNoBaoJi()) {
          
          return false;
        }
        if (!hasIsWuFaGeDang()) {
          
          return false;
        }
        if (!hasIsBiPoJia()) {
          
          return false;
        }
        if (!hasStrActionID()) {
          
          return false;
        }
        for (int i = 0; i < getAttributeListCount(); i++) {
          if (!getAttributeList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.SpellLogicTemplateData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int priority_ ;
      /**
       * <code>required int32 priority = 2;</code>
       *
       * <pre>
       ** 优先级 
       * </pre>
       */
      public boolean hasPriority() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 priority = 2;</code>
       *
       * <pre>
       ** 优先级 
       * </pre>
       */
      public int getPriority() {
        return priority_;
      }
      /**
       * <code>required int32 priority = 2;</code>
       *
       * <pre>
       ** 优先级 
       * </pre>
       */
      public Builder setPriority(int value) {
        bitField0_ |= 0x00000002;
        priority_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 priority = 2;</code>
       *
       * <pre>
       ** 优先级 
       * </pre>
       */
      public Builder clearPriority() {
        bitField0_ = (bitField0_ & ~0x00000002);
        priority_ = 0;
        onChanged();
        return this;
      }

      private int mpCost_ ;
      /**
       * <code>required int32 mpCost = 3;</code>
       *
       * <pre>
       ** 能量消耗 
       * </pre>
       */
      public boolean hasMpCost() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 mpCost = 3;</code>
       *
       * <pre>
       ** 能量消耗 
       * </pre>
       */
      public int getMpCost() {
        return mpCost_;
      }
      /**
       * <code>required int32 mpCost = 3;</code>
       *
       * <pre>
       ** 能量消耗 
       * </pre>
       */
      public Builder setMpCost(int value) {
        bitField0_ |= 0x00000004;
        mpCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 mpCost = 3;</code>
       *
       * <pre>
       ** 能量消耗 
       * </pre>
       */
      public Builder clearMpCost() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mpCost_ = 0;
        onChanged();
        return this;
      }

      private int initCd_ ;
      /**
       * <code>required int32 initCd = 4;</code>
       *
       * <pre>
       ** 初始CD 
       * </pre>
       */
      public boolean hasInitCd() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 initCd = 4;</code>
       *
       * <pre>
       ** 初始CD 
       * </pre>
       */
      public int getInitCd() {
        return initCd_;
      }
      /**
       * <code>required int32 initCd = 4;</code>
       *
       * <pre>
       ** 初始CD 
       * </pre>
       */
      public Builder setInitCd(int value) {
        bitField0_ |= 0x00000008;
        initCd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 initCd = 4;</code>
       *
       * <pre>
       ** 初始CD 
       * </pre>
       */
      public Builder clearInitCd() {
        bitField0_ = (bitField0_ & ~0x00000008);
        initCd_ = 0;
        onChanged();
        return this;
      }

      private int cd_ ;
      /**
       * <code>required int32 cd = 5;</code>
       *
       * <pre>
       ** CD 
       * </pre>
       */
      public boolean hasCd() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 cd = 5;</code>
       *
       * <pre>
       ** CD 
       * </pre>
       */
      public int getCd() {
        return cd_;
      }
      /**
       * <code>required int32 cd = 5;</code>
       *
       * <pre>
       ** CD 
       * </pre>
       */
      public Builder setCd(int value) {
        bitField0_ |= 0x00000010;
        cd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 cd = 5;</code>
       *
       * <pre>
       ** CD 
       * </pre>
       */
      public Builder clearCd() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cd_ = 0;
        onChanged();
        return this;
      }

      private int targetSelector_ ;
      /**
       * <code>required int32 targetSelector = 6;</code>
       *
       * <pre>
       ** 目标 
       * </pre>
       */
      public boolean hasTargetSelector() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 targetSelector = 6;</code>
       *
       * <pre>
       ** 目标 
       * </pre>
       */
      public int getTargetSelector() {
        return targetSelector_;
      }
      /**
       * <code>required int32 targetSelector = 6;</code>
       *
       * <pre>
       ** 目标 
       * </pre>
       */
      public Builder setTargetSelector(int value) {
        bitField0_ |= 0x00000020;
        targetSelector_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 targetSelector = 6;</code>
       *
       * <pre>
       ** 目标 
       * </pre>
       */
      public Builder clearTargetSelector() {
        bitField0_ = (bitField0_ & ~0x00000020);
        targetSelector_ = 0;
        onChanged();
        return this;
      }

      private int rangeSelector_ ;
      /**
       * <code>required int32 rangeSelector = 7;</code>
       *
       * <pre>
       ** 范围 
       * </pre>
       */
      public boolean hasRangeSelector() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 rangeSelector = 7;</code>
       *
       * <pre>
       ** 范围 
       * </pre>
       */
      public int getRangeSelector() {
        return rangeSelector_;
      }
      /**
       * <code>required int32 rangeSelector = 7;</code>
       *
       * <pre>
       ** 范围 
       * </pre>
       */
      public Builder setRangeSelector(int value) {
        bitField0_ |= 0x00000040;
        rangeSelector_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 rangeSelector = 7;</code>
       *
       * <pre>
       ** 范围 
       * </pre>
       */
      public Builder clearRangeSelector() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rangeSelector_ = 0;
        onChanged();
        return this;
      }

      private int yuanSuLeiXing_ ;
      /**
       * <code>required int32 yuanSuLeiXing = 8;</code>
       *
       * <pre>
       ** 元素类型 
       * </pre>
       */
      public boolean hasYuanSuLeiXing() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 yuanSuLeiXing = 8;</code>
       *
       * <pre>
       ** 元素类型 
       * </pre>
       */
      public int getYuanSuLeiXing() {
        return yuanSuLeiXing_;
      }
      /**
       * <code>required int32 yuanSuLeiXing = 8;</code>
       *
       * <pre>
       ** 元素类型 
       * </pre>
       */
      public Builder setYuanSuLeiXing(int value) {
        bitField0_ |= 0x00000080;
        yuanSuLeiXing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 yuanSuLeiXing = 8;</code>
       *
       * <pre>
       ** 元素类型 
       * </pre>
       */
      public Builder clearYuanSuLeiXing() {
        bitField0_ = (bitField0_ & ~0x00000080);
        yuanSuLeiXing_ = 0;
        onChanged();
        return this;
      }

      private int spellType_ ;
      /**
       * <code>required int32 spellType = 9;</code>
       *
       * <pre>
       ** 技能类型 
       * </pre>
       */
      public boolean hasSpellType() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 spellType = 9;</code>
       *
       * <pre>
       ** 技能类型 
       * </pre>
       */
      public int getSpellType() {
        return spellType_;
      }
      /**
       * <code>required int32 spellType = 9;</code>
       *
       * <pre>
       ** 技能类型 
       * </pre>
       */
      public Builder setSpellType(int value) {
        bitField0_ |= 0x00000100;
        spellType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 spellType = 9;</code>
       *
       * <pre>
       ** 技能类型 
       * </pre>
       */
      public Builder clearSpellType() {
        bitField0_ = (bitField0_ & ~0x00000100);
        spellType_ = 0;
        onChanged();
        return this;
      }

      private int spellDamageType_ ;
      /**
       * <code>required int32 spellDamageType = 10;</code>
       *
       * <pre>
       ** 技能伤害类型 
       * </pre>
       */
      public boolean hasSpellDamageType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 spellDamageType = 10;</code>
       *
       * <pre>
       ** 技能伤害类型 
       * </pre>
       */
      public int getSpellDamageType() {
        return spellDamageType_;
      }
      /**
       * <code>required int32 spellDamageType = 10;</code>
       *
       * <pre>
       ** 技能伤害类型 
       * </pre>
       */
      public Builder setSpellDamageType(int value) {
        bitField0_ |= 0x00000200;
        spellDamageType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 spellDamageType = 10;</code>
       *
       * <pre>
       ** 技能伤害类型 
       * </pre>
       */
      public Builder clearSpellDamageType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        spellDamageType_ = 0;
        onChanged();
        return this;
      }

      private int spellExpType_ ;
      /**
       * <code>required int32 spellExpType = 11;</code>
       *
       * <pre>
       ** 招式结算公式类型 
       * </pre>
       */
      public boolean hasSpellExpType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 spellExpType = 11;</code>
       *
       * <pre>
       ** 招式结算公式类型 
       * </pre>
       */
      public int getSpellExpType() {
        return spellExpType_;
      }
      /**
       * <code>required int32 spellExpType = 11;</code>
       *
       * <pre>
       ** 招式结算公式类型 
       * </pre>
       */
      public Builder setSpellExpType(int value) {
        bitField0_ |= 0x00000400;
        spellExpType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 spellExpType = 11;</code>
       *
       * <pre>
       ** 招式结算公式类型 
       * </pre>
       */
      public Builder clearSpellExpType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        spellExpType_ = 0;
        onChanged();
        return this;
      }

      private float levelRelatedParameter_ ;
      /**
       * <code>required float levelRelatedParameter = 12;</code>
       *
       * <pre>
       ** 技能等级相关系数 
       * </pre>
       */
      public boolean hasLevelRelatedParameter() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required float levelRelatedParameter = 12;</code>
       *
       * <pre>
       ** 技能等级相关系数 
       * </pre>
       */
      public float getLevelRelatedParameter() {
        return levelRelatedParameter_;
      }
      /**
       * <code>required float levelRelatedParameter = 12;</code>
       *
       * <pre>
       ** 技能等级相关系数 
       * </pre>
       */
      public Builder setLevelRelatedParameter(float value) {
        bitField0_ |= 0x00000800;
        levelRelatedParameter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float levelRelatedParameter = 12;</code>
       *
       * <pre>
       ** 技能等级相关系数 
       * </pre>
       */
      public Builder clearLevelRelatedParameter() {
        bitField0_ = (bitField0_ & ~0x00000800);
        levelRelatedParameter_ = 0F;
        onChanged();
        return this;
      }

      private int spellCorrectionParameter_ ;
      /**
       * <code>required int32 spellCorrectionParameter = 13;</code>
       *
       * <pre>
       ** 技能修正值(万分比) 
       * </pre>
       */
      public boolean hasSpellCorrectionParameter() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required int32 spellCorrectionParameter = 13;</code>
       *
       * <pre>
       ** 技能修正值(万分比) 
       * </pre>
       */
      public int getSpellCorrectionParameter() {
        return spellCorrectionParameter_;
      }
      /**
       * <code>required int32 spellCorrectionParameter = 13;</code>
       *
       * <pre>
       ** 技能修正值(万分比) 
       * </pre>
       */
      public Builder setSpellCorrectionParameter(int value) {
        bitField0_ |= 0x00001000;
        spellCorrectionParameter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 spellCorrectionParameter = 13;</code>
       *
       * <pre>
       ** 技能修正值(万分比) 
       * </pre>
       */
      public Builder clearSpellCorrectionParameter() {
        bitField0_ = (bitField0_ & ~0x00001000);
        spellCorrectionParameter_ = 0;
        onChanged();
        return this;
      }

      private boolean isBiZhong_ ;
      /**
       * <code>required bool IsBiZhong = 14;</code>
       *
       * <pre>
       ** 是否必中 
       * </pre>
       */
      public boolean hasIsBiZhong() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required bool IsBiZhong = 14;</code>
       *
       * <pre>
       ** 是否必中 
       * </pre>
       */
      public boolean getIsBiZhong() {
        return isBiZhong_;
      }
      /**
       * <code>required bool IsBiZhong = 14;</code>
       *
       * <pre>
       ** 是否必中 
       * </pre>
       */
      public Builder setIsBiZhong(boolean value) {
        bitField0_ |= 0x00002000;
        isBiZhong_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool IsBiZhong = 14;</code>
       *
       * <pre>
       ** 是否必中 
       * </pre>
       */
      public Builder clearIsBiZhong() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isBiZhong_ = false;
        onChanged();
        return this;
      }

      private boolean isBiBaoJi_ ;
      /**
       * <code>required bool IsBiBaoJi = 15;</code>
       *
       * <pre>
       ** 是否比暴击 
       * </pre>
       */
      public boolean hasIsBiBaoJi() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required bool IsBiBaoJi = 15;</code>
       *
       * <pre>
       ** 是否比暴击 
       * </pre>
       */
      public boolean getIsBiBaoJi() {
        return isBiBaoJi_;
      }
      /**
       * <code>required bool IsBiBaoJi = 15;</code>
       *
       * <pre>
       ** 是否比暴击 
       * </pre>
       */
      public Builder setIsBiBaoJi(boolean value) {
        bitField0_ |= 0x00004000;
        isBiBaoJi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool IsBiBaoJi = 15;</code>
       *
       * <pre>
       ** 是否比暴击 
       * </pre>
       */
      public Builder clearIsBiBaoJi() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isBiBaoJi_ = false;
        onChanged();
        return this;
      }

      private boolean isNoBaoJi_ ;
      /**
       * <code>required bool IsNoBaoJi = 16;</code>
       *
       * <pre>
       ** 是否不判定暴击 
       * </pre>
       */
      public boolean hasIsNoBaoJi() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required bool IsNoBaoJi = 16;</code>
       *
       * <pre>
       ** 是否不判定暴击 
       * </pre>
       */
      public boolean getIsNoBaoJi() {
        return isNoBaoJi_;
      }
      /**
       * <code>required bool IsNoBaoJi = 16;</code>
       *
       * <pre>
       ** 是否不判定暴击 
       * </pre>
       */
      public Builder setIsNoBaoJi(boolean value) {
        bitField0_ |= 0x00008000;
        isNoBaoJi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool IsNoBaoJi = 16;</code>
       *
       * <pre>
       ** 是否不判定暴击 
       * </pre>
       */
      public Builder clearIsNoBaoJi() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isNoBaoJi_ = false;
        onChanged();
        return this;
      }

      private boolean isWuFaGeDang_ ;
      /**
       * <code>required bool IsWuFaGeDang = 17;</code>
       *
       * <pre>
       ** 是否无法格挡 
       * </pre>
       */
      public boolean hasIsWuFaGeDang() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required bool IsWuFaGeDang = 17;</code>
       *
       * <pre>
       ** 是否无法格挡 
       * </pre>
       */
      public boolean getIsWuFaGeDang() {
        return isWuFaGeDang_;
      }
      /**
       * <code>required bool IsWuFaGeDang = 17;</code>
       *
       * <pre>
       ** 是否无法格挡 
       * </pre>
       */
      public Builder setIsWuFaGeDang(boolean value) {
        bitField0_ |= 0x00010000;
        isWuFaGeDang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool IsWuFaGeDang = 17;</code>
       *
       * <pre>
       ** 是否无法格挡 
       * </pre>
       */
      public Builder clearIsWuFaGeDang() {
        bitField0_ = (bitField0_ & ~0x00010000);
        isWuFaGeDang_ = false;
        onChanged();
        return this;
      }

      private boolean isBiPoJia_ ;
      /**
       * <code>required bool IsBiPoJia = 18;</code>
       *
       * <pre>
       ** 是否比破甲 
       * </pre>
       */
      public boolean hasIsBiPoJia() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required bool IsBiPoJia = 18;</code>
       *
       * <pre>
       ** 是否比破甲 
       * </pre>
       */
      public boolean getIsBiPoJia() {
        return isBiPoJia_;
      }
      /**
       * <code>required bool IsBiPoJia = 18;</code>
       *
       * <pre>
       ** 是否比破甲 
       * </pre>
       */
      public Builder setIsBiPoJia(boolean value) {
        bitField0_ |= 0x00020000;
        isBiPoJia_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool IsBiPoJia = 18;</code>
       *
       * <pre>
       ** 是否比破甲 
       * </pre>
       */
      public Builder clearIsBiPoJia() {
        bitField0_ = (bitField0_ & ~0x00020000);
        isBiPoJia_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object strActionID_ = "";
      /**
       * <code>required string strActionID = 19;</code>
       *
       * <pre>
       ** buff效果器（伤害计算事件ID） 
       * </pre>
       */
      public boolean hasStrActionID() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required string strActionID = 19;</code>
       *
       * <pre>
       ** buff效果器（伤害计算事件ID） 
       * </pre>
       */
      public java.lang.String getStrActionID() {
        java.lang.Object ref = strActionID_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            strActionID_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string strActionID = 19;</code>
       *
       * <pre>
       ** buff效果器（伤害计算事件ID） 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStrActionIDBytes() {
        java.lang.Object ref = strActionID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          strActionID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string strActionID = 19;</code>
       *
       * <pre>
       ** buff效果器（伤害计算事件ID） 
       * </pre>
       */
      public Builder setStrActionID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00040000;
        strActionID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string strActionID = 19;</code>
       *
       * <pre>
       ** buff效果器（伤害计算事件ID） 
       * </pre>
       */
      public Builder clearStrActionID() {
        bitField0_ = (bitField0_ & ~0x00040000);
        strActionID_ = getDefaultInstance().getStrActionID();
        onChanged();
        return this;
      }
      /**
       * <code>required string strActionID = 19;</code>
       *
       * <pre>
       ** buff效果器（伤害计算事件ID） 
       * </pre>
       */
      public Builder setStrActionIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00040000;
        strActionID_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue> attributeList_ =
        java.util.Collections.emptyList();
      private void ensureAttributeListIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          attributeList_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue>(attributeList_);
          bitField0_ |= 0x00080000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder> attributeListBuilder_;

      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue> getAttributeListList() {
        if (attributeListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(attributeList_);
        } else {
          return attributeListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public int getAttributeListCount() {
        if (attributeListBuilder_ == null) {
          return attributeList_.size();
        } else {
          return attributeListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue getAttributeList(int index) {
        if (attributeListBuilder_ == null) {
          return attributeList_.get(index);
        } else {
          return attributeListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder setAttributeList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue value) {
        if (attributeListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributeListIsMutable();
          attributeList_.set(index, value);
          onChanged();
        } else {
          attributeListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder setAttributeList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder builderForValue) {
        if (attributeListBuilder_ == null) {
          ensureAttributeListIsMutable();
          attributeList_.set(index, builderForValue.build());
          onChanged();
        } else {
          attributeListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder addAttributeList(com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue value) {
        if (attributeListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributeListIsMutable();
          attributeList_.add(value);
          onChanged();
        } else {
          attributeListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder addAttributeList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue value) {
        if (attributeListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributeListIsMutable();
          attributeList_.add(index, value);
          onChanged();
        } else {
          attributeListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder addAttributeList(
          com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder builderForValue) {
        if (attributeListBuilder_ == null) {
          ensureAttributeListIsMutable();
          attributeList_.add(builderForValue.build());
          onChanged();
        } else {
          attributeListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder addAttributeList(
          int index, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder builderForValue) {
        if (attributeListBuilder_ == null) {
          ensureAttributeListIsMutable();
          attributeList_.add(index, builderForValue.build());
          onChanged();
        } else {
          attributeListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder addAllAttributeList(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue> values) {
        if (attributeListBuilder_ == null) {
          ensureAttributeListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, attributeList_);
          onChanged();
        } else {
          attributeListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder clearAttributeList() {
        if (attributeListBuilder_ == null) {
          attributeList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          attributeListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public Builder removeAttributeList(int index) {
        if (attributeListBuilder_ == null) {
          ensureAttributeListIsMutable();
          attributeList_.remove(index);
          onChanged();
        } else {
          attributeListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder getAttributeListBuilder(
          int index) {
        return getAttributeListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder getAttributeListOrBuilder(
          int index) {
        if (attributeListBuilder_ == null) {
          return attributeList_.get(index);  } else {
          return attributeListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder> 
           getAttributeListOrBuilderList() {
        if (attributeListBuilder_ != null) {
          return attributeListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(attributeList_);
        }
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder addAttributeListBuilder() {
        return getAttributeListFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder addAttributeListBuilder(
          int index) {
        return getAttributeListFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.Abs2PropValue attributeList = 20;</code>
       *
       * <pre>
       ** 附带的属性(绝对值2) 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder> 
           getAttributeListBuilderList() {
        return getAttributeListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder> 
          getAttributeListFieldBuilder() {
        if (attributeListBuilder_ == null) {
          attributeListBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder>(
                  attributeList_,
                  ((bitField0_ & 0x00080000) == 0x00080000),
                  getParentForChildren(),
                  isClean());
          attributeList_ = null;
        }
        return attributeListBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.SpellLogicTemplateData)
    }

    static {
      defaultInstance = new SpellLogicTemplateData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.SpellLogicTemplateData)
  }

  public interface BuffActionTemplateDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.BuffActionTemplateData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    int getId();

    /**
     * <code>required string strTargetBuffIds = 2;</code>
     *
     * <pre>
     ** 给目标加上的buffId列表 
     * </pre>
     */
    boolean hasStrTargetBuffIds();
    /**
     * <code>required string strTargetBuffIds = 2;</code>
     *
     * <pre>
     ** 给目标加上的buffId列表 
     * </pre>
     */
    java.lang.String getStrTargetBuffIds();
    /**
     * <code>required string strTargetBuffIds = 2;</code>
     *
     * <pre>
     ** 给目标加上的buffId列表 
     * </pre>
     */
    com.google.protobuf.ByteString
        getStrTargetBuffIdsBytes();

    /**
     * <code>required string strCasterBuffIds = 3;</code>
     *
     * <pre>
     ** 给施放者加上的buffId列表 
     * </pre>
     */
    boolean hasStrCasterBuffIds();
    /**
     * <code>required string strCasterBuffIds = 3;</code>
     *
     * <pre>
     ** 给施放者加上的buffId列表 
     * </pre>
     */
    java.lang.String getStrCasterBuffIds();
    /**
     * <code>required string strCasterBuffIds = 3;</code>
     *
     * <pre>
     ** 给施放者加上的buffId列表 
     * </pre>
     */
    com.google.protobuf.ByteString
        getStrCasterBuffIdsBytes();

    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.EffectData> 
        getEffectDatasList();
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectDatas(int index);
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    int getEffectDatasCount();
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> 
        getEffectDatasOrBuilderList();
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectDatasOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.mokylin.BuffActionTemplateData}
   *
   * <pre>
   ** BuffAction模板数据 
   * </pre>
   */
  public static final class BuffActionTemplateData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.BuffActionTemplateData)
      BuffActionTemplateDataOrBuilder {
    // Use BuffActionTemplateData.newBuilder() to construct.
    private BuffActionTemplateData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuffActionTemplateData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BuffActionTemplateData defaultInstance;
    public static BuffActionTemplateData getDefaultInstance() {
      return defaultInstance;
    }

    public BuffActionTemplateData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BuffActionTemplateData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              strTargetBuffIds_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              strCasterBuffIds_ = bs;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                effectDatas_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.EffectData>();
                mutable_bitField0_ |= 0x00000008;
              }
              effectDatas_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.EffectData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          effectDatas_ = java.util.Collections.unmodifiableList(effectDatas_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffActionTemplateData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffActionTemplateData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder.class);
    }

    public static com.google.protobuf.Parser<BuffActionTemplateData> PARSER =
        new com.google.protobuf.AbstractParser<BuffActionTemplateData>() {
      public BuffActionTemplateData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuffActionTemplateData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuffActionTemplateData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** Id 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int STRTARGETBUFFIDS_FIELD_NUMBER = 2;
    private java.lang.Object strTargetBuffIds_;
    /**
     * <code>required string strTargetBuffIds = 2;</code>
     *
     * <pre>
     ** 给目标加上的buffId列表 
     * </pre>
     */
    public boolean hasStrTargetBuffIds() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string strTargetBuffIds = 2;</code>
     *
     * <pre>
     ** 给目标加上的buffId列表 
     * </pre>
     */
    public java.lang.String getStrTargetBuffIds() {
      java.lang.Object ref = strTargetBuffIds_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          strTargetBuffIds_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string strTargetBuffIds = 2;</code>
     *
     * <pre>
     ** 给目标加上的buffId列表 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStrTargetBuffIdsBytes() {
      java.lang.Object ref = strTargetBuffIds_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        strTargetBuffIds_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STRCASTERBUFFIDS_FIELD_NUMBER = 3;
    private java.lang.Object strCasterBuffIds_;
    /**
     * <code>required string strCasterBuffIds = 3;</code>
     *
     * <pre>
     ** 给施放者加上的buffId列表 
     * </pre>
     */
    public boolean hasStrCasterBuffIds() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string strCasterBuffIds = 3;</code>
     *
     * <pre>
     ** 给施放者加上的buffId列表 
     * </pre>
     */
    public java.lang.String getStrCasterBuffIds() {
      java.lang.Object ref = strCasterBuffIds_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          strCasterBuffIds_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string strCasterBuffIds = 3;</code>
     *
     * <pre>
     ** 给施放者加上的buffId列表 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStrCasterBuffIdsBytes() {
      java.lang.Object ref = strCasterBuffIds_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        strCasterBuffIds_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EFFECTDATAS_FIELD_NUMBER = 4;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.EffectData> effectDatas_;
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.EffectData> getEffectDatasList() {
      return effectDatas_;
    }
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> 
        getEffectDatasOrBuilderList() {
      return effectDatas_;
    }
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    public int getEffectDatasCount() {
      return effectDatas_.size();
    }
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectDatas(int index) {
      return effectDatas_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
     *
     * <pre>
     ** 效果器列表 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectDatasOrBuilder(
        int index) {
      return effectDatas_.get(index);
    }

    private void initFields() {
      id_ = 0;
      strTargetBuffIds_ = "";
      strCasterBuffIds_ = "";
      effectDatas_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStrTargetBuffIds()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStrCasterBuffIds()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getEffectDatasCount(); i++) {
        if (!getEffectDatas(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getStrTargetBuffIdsBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getStrCasterBuffIdsBytes());
      }
      for (int i = 0; i < effectDatas_.size(); i++) {
        output.writeMessage(4, effectDatas_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getStrTargetBuffIdsBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getStrCasterBuffIdsBytes());
      }
      for (int i = 0; i < effectDatas_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, effectDatas_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.BuffActionTemplateData}
     *
     * <pre>
     ** BuffAction模板数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.BuffActionTemplateData)
        com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffActionTemplateData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffActionTemplateData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEffectDatasFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        strTargetBuffIds_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        strCasterBuffIds_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (effectDatasBuilder_ == null) {
          effectDatas_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          effectDatasBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffActionTemplateData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData build() {
        com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData result = new com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.strTargetBuffIds_ = strTargetBuffIds_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.strCasterBuffIds_ = strCasterBuffIds_;
        if (effectDatasBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            effectDatas_ = java.util.Collections.unmodifiableList(effectDatas_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.effectDatas_ = effectDatas_;
        } else {
          result.effectDatas_ = effectDatasBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasStrTargetBuffIds()) {
          bitField0_ |= 0x00000002;
          strTargetBuffIds_ = other.strTargetBuffIds_;
          onChanged();
        }
        if (other.hasStrCasterBuffIds()) {
          bitField0_ |= 0x00000004;
          strCasterBuffIds_ = other.strCasterBuffIds_;
          onChanged();
        }
        if (effectDatasBuilder_ == null) {
          if (!other.effectDatas_.isEmpty()) {
            if (effectDatas_.isEmpty()) {
              effectDatas_ = other.effectDatas_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureEffectDatasIsMutable();
              effectDatas_.addAll(other.effectDatas_);
            }
            onChanged();
          }
        } else {
          if (!other.effectDatas_.isEmpty()) {
            if (effectDatasBuilder_.isEmpty()) {
              effectDatasBuilder_.dispose();
              effectDatasBuilder_ = null;
              effectDatas_ = other.effectDatas_;
              bitField0_ = (bitField0_ & ~0x00000008);
              effectDatasBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEffectDatasFieldBuilder() : null;
            } else {
              effectDatasBuilder_.addAllMessages(other.effectDatas_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasStrTargetBuffIds()) {
          
          return false;
        }
        if (!hasStrCasterBuffIds()) {
          
          return false;
        }
        for (int i = 0; i < getEffectDatasCount(); i++) {
          if (!getEffectDatas(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.BuffActionTemplateData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** Id 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object strTargetBuffIds_ = "";
      /**
       * <code>required string strTargetBuffIds = 2;</code>
       *
       * <pre>
       ** 给目标加上的buffId列表 
       * </pre>
       */
      public boolean hasStrTargetBuffIds() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string strTargetBuffIds = 2;</code>
       *
       * <pre>
       ** 给目标加上的buffId列表 
       * </pre>
       */
      public java.lang.String getStrTargetBuffIds() {
        java.lang.Object ref = strTargetBuffIds_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            strTargetBuffIds_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string strTargetBuffIds = 2;</code>
       *
       * <pre>
       ** 给目标加上的buffId列表 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStrTargetBuffIdsBytes() {
        java.lang.Object ref = strTargetBuffIds_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          strTargetBuffIds_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string strTargetBuffIds = 2;</code>
       *
       * <pre>
       ** 给目标加上的buffId列表 
       * </pre>
       */
      public Builder setStrTargetBuffIds(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        strTargetBuffIds_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string strTargetBuffIds = 2;</code>
       *
       * <pre>
       ** 给目标加上的buffId列表 
       * </pre>
       */
      public Builder clearStrTargetBuffIds() {
        bitField0_ = (bitField0_ & ~0x00000002);
        strTargetBuffIds_ = getDefaultInstance().getStrTargetBuffIds();
        onChanged();
        return this;
      }
      /**
       * <code>required string strTargetBuffIds = 2;</code>
       *
       * <pre>
       ** 给目标加上的buffId列表 
       * </pre>
       */
      public Builder setStrTargetBuffIdsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        strTargetBuffIds_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object strCasterBuffIds_ = "";
      /**
       * <code>required string strCasterBuffIds = 3;</code>
       *
       * <pre>
       ** 给施放者加上的buffId列表 
       * </pre>
       */
      public boolean hasStrCasterBuffIds() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string strCasterBuffIds = 3;</code>
       *
       * <pre>
       ** 给施放者加上的buffId列表 
       * </pre>
       */
      public java.lang.String getStrCasterBuffIds() {
        java.lang.Object ref = strCasterBuffIds_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            strCasterBuffIds_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string strCasterBuffIds = 3;</code>
       *
       * <pre>
       ** 给施放者加上的buffId列表 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStrCasterBuffIdsBytes() {
        java.lang.Object ref = strCasterBuffIds_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          strCasterBuffIds_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string strCasterBuffIds = 3;</code>
       *
       * <pre>
       ** 给施放者加上的buffId列表 
       * </pre>
       */
      public Builder setStrCasterBuffIds(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        strCasterBuffIds_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string strCasterBuffIds = 3;</code>
       *
       * <pre>
       ** 给施放者加上的buffId列表 
       * </pre>
       */
      public Builder clearStrCasterBuffIds() {
        bitField0_ = (bitField0_ & ~0x00000004);
        strCasterBuffIds_ = getDefaultInstance().getStrCasterBuffIds();
        onChanged();
        return this;
      }
      /**
       * <code>required string strCasterBuffIds = 3;</code>
       *
       * <pre>
       ** 给施放者加上的buffId列表 
       * </pre>
       */
      public Builder setStrCasterBuffIdsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        strCasterBuffIds_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.EffectData> effectDatas_ =
        java.util.Collections.emptyList();
      private void ensureEffectDatasIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          effectDatas_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.EffectData>(effectDatas_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> effectDatasBuilder_;

      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.EffectData> getEffectDatasList() {
        if (effectDatasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(effectDatas_);
        } else {
          return effectDatasBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public int getEffectDatasCount() {
        if (effectDatasBuilder_ == null) {
          return effectDatas_.size();
        } else {
          return effectDatasBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectDatas(int index) {
        if (effectDatasBuilder_ == null) {
          return effectDatas_.get(index);
        } else {
          return effectDatasBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder setEffectDatas(
          int index, com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectDatasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectDatasIsMutable();
          effectDatas_.set(index, value);
          onChanged();
        } else {
          effectDatasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder setEffectDatas(
          int index, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder builderForValue) {
        if (effectDatasBuilder_ == null) {
          ensureEffectDatasIsMutable();
          effectDatas_.set(index, builderForValue.build());
          onChanged();
        } else {
          effectDatasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder addEffectDatas(com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectDatasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectDatasIsMutable();
          effectDatas_.add(value);
          onChanged();
        } else {
          effectDatasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder addEffectDatas(
          int index, com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectDatasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEffectDatasIsMutable();
          effectDatas_.add(index, value);
          onChanged();
        } else {
          effectDatasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder addEffectDatas(
          com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder builderForValue) {
        if (effectDatasBuilder_ == null) {
          ensureEffectDatasIsMutable();
          effectDatas_.add(builderForValue.build());
          onChanged();
        } else {
          effectDatasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder addEffectDatas(
          int index, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder builderForValue) {
        if (effectDatasBuilder_ == null) {
          ensureEffectDatasIsMutable();
          effectDatas_.add(index, builderForValue.build());
          onChanged();
        } else {
          effectDatasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder addAllEffectDatas(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.EffectData> values) {
        if (effectDatasBuilder_ == null) {
          ensureEffectDatasIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, effectDatas_);
          onChanged();
        } else {
          effectDatasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder clearEffectDatas() {
        if (effectDatasBuilder_ == null) {
          effectDatas_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          effectDatasBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public Builder removeEffectDatas(int index) {
        if (effectDatasBuilder_ == null) {
          ensureEffectDatasIsMutable();
          effectDatas_.remove(index);
          onChanged();
        } else {
          effectDatasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder getEffectDatasBuilder(
          int index) {
        return getEffectDatasFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectDatasOrBuilder(
          int index) {
        if (effectDatasBuilder_ == null) {
          return effectDatas_.get(index);  } else {
          return effectDatasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> 
           getEffectDatasOrBuilderList() {
        if (effectDatasBuilder_ != null) {
          return effectDatasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(effectDatas_);
        }
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder addEffectDatasBuilder() {
        return getEffectDatasFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder addEffectDatasBuilder(
          int index) {
        return getEffectDatasFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.EffectData effectDatas = 4;</code>
       *
       * <pre>
       ** 效果器列表 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder> 
           getEffectDatasBuilderList() {
        return getEffectDatasFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> 
          getEffectDatasFieldBuilder() {
        if (effectDatasBuilder_ == null) {
          effectDatasBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder>(
                  effectDatas_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          effectDatas_ = null;
        }
        return effectDatasBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.BuffActionTemplateData)
    }

    static {
      defaultInstance = new BuffActionTemplateData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.BuffActionTemplateData)
  }

  public interface BuffTemplateDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.BuffTemplateData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** ID 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** ID 
     * </pre>
     */
    int getId();

    /**
     * <code>required int32 workingTime = 2;</code>
     *
     * <pre>
     ** buff的EffectMain效果器执行时间 
     * </pre>
     */
    boolean hasWorkingTime();
    /**
     * <code>required int32 workingTime = 2;</code>
     *
     * <pre>
     ** buff的EffectMain效果器执行时间 
     * </pre>
     */
    int getWorkingTime();

    /**
     * <code>required int32 remainTime = 3;</code>
     *
     * <pre>
     ** 持续回合数 
     * </pre>
     */
    boolean hasRemainTime();
    /**
     * <code>required int32 remainTime = 3;</code>
     *
     * <pre>
     ** 持续回合数 
     * </pre>
     */
    int getRemainTime();

    /**
     * <code>required int32 buffType = 4;</code>
     *
     * <pre>
     ** 正负级别 
     * </pre>
     */
    boolean hasBuffType();
    /**
     * <code>required int32 buffType = 4;</code>
     *
     * <pre>
     ** 正负级别 
     * </pre>
     */
    int getBuffType();

    /**
     * <code>required bool isCanStop = 5;</code>
     *
     * <pre>
     ** 是否可以被驱散 
     * </pre>
     */
    boolean hasIsCanStop();
    /**
     * <code>required bool isCanStop = 5;</code>
     *
     * <pre>
     ** 是否可以被驱散 
     * </pre>
     */
    boolean getIsCanStop();

    /**
     * <code>required int32 spellBuffHitType = 6;</code>
     *
     * <pre>
     ** Buff命中规则 
     * </pre>
     */
    boolean hasSpellBuffHitType();
    /**
     * <code>required int32 spellBuffHitType = 6;</code>
     *
     * <pre>
     ** Buff命中规则 
     * </pre>
     */
    int getSpellBuffHitType();

    /**
     * <code>required .com.mokylin.EffectData effectMain = 7;</code>
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    boolean hasEffectMain();
    /**
     * <code>required .com.mokylin.EffectData effectMain = 7;</code>
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectMain();
    /**
     * <code>required .com.mokylin.EffectData effectMain = 7;</code>
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectMainOrBuilder();

    /**
     * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
     *
     * <pre>
     ** Buff结束时需要执行的效果器 
     * </pre>
     */
    boolean hasEffectEnd();
    /**
     * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
     *
     * <pre>
     ** Buff结束时需要执行的效果器 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectEnd();
    /**
     * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
     *
     * <pre>
     ** Buff结束时需要执行的效果器 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectEndOrBuilder();

    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    java.util.List<com.mokylin.bleach.protobuf.CombatMessage.PropValue> 
        getPropsList();
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.PropValue getProps(int index);
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    int getPropsCount();
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder> 
        getPropsOrBuilderList();
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder getPropsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.mokylin.BuffTemplateData}
   *
   * <pre>
   ** Buff模板数据 
   * </pre>
   */
  public static final class BuffTemplateData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.BuffTemplateData)
      BuffTemplateDataOrBuilder {
    // Use BuffTemplateData.newBuilder() to construct.
    private BuffTemplateData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuffTemplateData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BuffTemplateData defaultInstance;
    public static BuffTemplateData getDefaultInstance() {
      return defaultInstance;
    }

    public BuffTemplateData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BuffTemplateData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              workingTime_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              remainTime_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              buffType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isCanStop_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              spellBuffHitType_ = input.readInt32();
              break;
            }
            case 58: {
              com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = effectMain_.toBuilder();
              }
              effectMain_ = input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.EffectData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectMain_);
                effectMain_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = effectEnd_.toBuilder();
              }
              effectEnd_ = input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.EffectData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectEnd_);
                effectEnd_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                props_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.PropValue>();
                mutable_bitField0_ |= 0x00000100;
              }
              props_.add(input.readMessage(com.mokylin.bleach.protobuf.CombatMessage.PropValue.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          props_ = java.util.Collections.unmodifiableList(props_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffTemplateData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffTemplateData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder.class);
    }

    public static com.google.protobuf.Parser<BuffTemplateData> PARSER =
        new com.google.protobuf.AbstractParser<BuffTemplateData>() {
      public BuffTemplateData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuffTemplateData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuffTemplateData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** ID 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     *
     * <pre>
     ** ID 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int WORKINGTIME_FIELD_NUMBER = 2;
    private int workingTime_;
    /**
     * <code>required int32 workingTime = 2;</code>
     *
     * <pre>
     ** buff的EffectMain效果器执行时间 
     * </pre>
     */
    public boolean hasWorkingTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 workingTime = 2;</code>
     *
     * <pre>
     ** buff的EffectMain效果器执行时间 
     * </pre>
     */
    public int getWorkingTime() {
      return workingTime_;
    }

    public static final int REMAINTIME_FIELD_NUMBER = 3;
    private int remainTime_;
    /**
     * <code>required int32 remainTime = 3;</code>
     *
     * <pre>
     ** 持续回合数 
     * </pre>
     */
    public boolean hasRemainTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 remainTime = 3;</code>
     *
     * <pre>
     ** 持续回合数 
     * </pre>
     */
    public int getRemainTime() {
      return remainTime_;
    }

    public static final int BUFFTYPE_FIELD_NUMBER = 4;
    private int buffType_;
    /**
     * <code>required int32 buffType = 4;</code>
     *
     * <pre>
     ** 正负级别 
     * </pre>
     */
    public boolean hasBuffType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 buffType = 4;</code>
     *
     * <pre>
     ** 正负级别 
     * </pre>
     */
    public int getBuffType() {
      return buffType_;
    }

    public static final int ISCANSTOP_FIELD_NUMBER = 5;
    private boolean isCanStop_;
    /**
     * <code>required bool isCanStop = 5;</code>
     *
     * <pre>
     ** 是否可以被驱散 
     * </pre>
     */
    public boolean hasIsCanStop() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool isCanStop = 5;</code>
     *
     * <pre>
     ** 是否可以被驱散 
     * </pre>
     */
    public boolean getIsCanStop() {
      return isCanStop_;
    }

    public static final int SPELLBUFFHITTYPE_FIELD_NUMBER = 6;
    private int spellBuffHitType_;
    /**
     * <code>required int32 spellBuffHitType = 6;</code>
     *
     * <pre>
     ** Buff命中规则 
     * </pre>
     */
    public boolean hasSpellBuffHitType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 spellBuffHitType = 6;</code>
     *
     * <pre>
     ** Buff命中规则 
     * </pre>
     */
    public int getSpellBuffHitType() {
      return spellBuffHitType_;
    }

    public static final int EFFECTMAIN_FIELD_NUMBER = 7;
    private com.mokylin.bleach.protobuf.CombatMessage.EffectData effectMain_;
    /**
     * <code>required .com.mokylin.EffectData effectMain = 7;</code>
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    public boolean hasEffectMain() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required .com.mokylin.EffectData effectMain = 7;</code>
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectMain() {
      return effectMain_;
    }
    /**
     * <code>required .com.mokylin.EffectData effectMain = 7;</code>
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectMainOrBuilder() {
      return effectMain_;
    }

    public static final int EFFECTEND_FIELD_NUMBER = 8;
    private com.mokylin.bleach.protobuf.CombatMessage.EffectData effectEnd_;
    /**
     * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
     *
     * <pre>
     ** Buff结束时需要执行的效果器 
     * </pre>
     */
    public boolean hasEffectEnd() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
     *
     * <pre>
     ** Buff结束时需要执行的效果器 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectEnd() {
      return effectEnd_;
    }
    /**
     * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
     *
     * <pre>
     ** Buff结束时需要执行的效果器 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectEndOrBuilder() {
      return effectEnd_;
    }

    public static final int PROPS_FIELD_NUMBER = 9;
    private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.PropValue> props_;
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.PropValue> getPropsList() {
      return props_;
    }
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder> 
        getPropsOrBuilderList() {
      return props_;
    }
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    public int getPropsCount() {
      return props_.size();
    }
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.PropValue getProps(int index) {
      return props_.get(index);
    }
    /**
     * <code>repeated .com.mokylin.PropValue props = 9;</code>
     *
     * <pre>
     ** 附加的属性 
     * </pre>
     */
    public com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder getPropsOrBuilder(
        int index) {
      return props_.get(index);
    }

    private void initFields() {
      id_ = 0;
      workingTime_ = 0;
      remainTime_ = 0;
      buffType_ = 0;
      isCanStop_ = false;
      spellBuffHitType_ = 0;
      effectMain_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
      effectEnd_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
      props_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWorkingTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRemainTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBuffType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsCanStop()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpellBuffHitType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEffectMain()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEffectEnd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getEffectMain().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getEffectEnd().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPropsCount(); i++) {
        if (!getProps(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, workingTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, remainTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, buffType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isCanStop_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, spellBuffHitType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, effectMain_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, effectEnd_);
      }
      for (int i = 0; i < props_.size(); i++) {
        output.writeMessage(9, props_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, workingTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, remainTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, buffType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isCanStop_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, spellBuffHitType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, effectMain_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, effectEnd_);
      }
      for (int i = 0; i < props_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, props_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.BuffTemplateData}
     *
     * <pre>
     ** Buff模板数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.BuffTemplateData)
        com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffTemplateData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffTemplateData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.class, com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEffectMainFieldBuilder();
          getEffectEndFieldBuilder();
          getPropsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        workingTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        remainTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        buffType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        isCanStop_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        spellBuffHitType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (effectMainBuilder_ == null) {
          effectMain_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
        } else {
          effectMainBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (effectEndBuilder_ == null) {
          effectEnd_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
        } else {
          effectEndBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (propsBuilder_ == null) {
          props_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          propsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_BuffTemplateData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData build() {
        com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData result = new com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.workingTime_ = workingTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.remainTime_ = remainTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.buffType_ = buffType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isCanStop_ = isCanStop_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.spellBuffHitType_ = spellBuffHitType_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (effectMainBuilder_ == null) {
          result.effectMain_ = effectMain_;
        } else {
          result.effectMain_ = effectMainBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (effectEndBuilder_ == null) {
          result.effectEnd_ = effectEnd_;
        } else {
          result.effectEnd_ = effectEndBuilder_.build();
        }
        if (propsBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            props_ = java.util.Collections.unmodifiableList(props_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.props_ = props_;
        } else {
          result.props_ = propsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasWorkingTime()) {
          setWorkingTime(other.getWorkingTime());
        }
        if (other.hasRemainTime()) {
          setRemainTime(other.getRemainTime());
        }
        if (other.hasBuffType()) {
          setBuffType(other.getBuffType());
        }
        if (other.hasIsCanStop()) {
          setIsCanStop(other.getIsCanStop());
        }
        if (other.hasSpellBuffHitType()) {
          setSpellBuffHitType(other.getSpellBuffHitType());
        }
        if (other.hasEffectMain()) {
          mergeEffectMain(other.getEffectMain());
        }
        if (other.hasEffectEnd()) {
          mergeEffectEnd(other.getEffectEnd());
        }
        if (propsBuilder_ == null) {
          if (!other.props_.isEmpty()) {
            if (props_.isEmpty()) {
              props_ = other.props_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensurePropsIsMutable();
              props_.addAll(other.props_);
            }
            onChanged();
          }
        } else {
          if (!other.props_.isEmpty()) {
            if (propsBuilder_.isEmpty()) {
              propsBuilder_.dispose();
              propsBuilder_ = null;
              props_ = other.props_;
              bitField0_ = (bitField0_ & ~0x00000100);
              propsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropsFieldBuilder() : null;
            } else {
              propsBuilder_.addAllMessages(other.props_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasWorkingTime()) {
          
          return false;
        }
        if (!hasRemainTime()) {
          
          return false;
        }
        if (!hasBuffType()) {
          
          return false;
        }
        if (!hasIsCanStop()) {
          
          return false;
        }
        if (!hasSpellBuffHitType()) {
          
          return false;
        }
        if (!hasEffectMain()) {
          
          return false;
        }
        if (!hasEffectEnd()) {
          
          return false;
        }
        if (!getEffectMain().isInitialized()) {
          
          return false;
        }
        if (!getEffectEnd().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getPropsCount(); i++) {
          if (!getProps(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.BuffTemplateData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** ID 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** ID 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** ID 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       *
       * <pre>
       ** ID 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int workingTime_ ;
      /**
       * <code>required int32 workingTime = 2;</code>
       *
       * <pre>
       ** buff的EffectMain效果器执行时间 
       * </pre>
       */
      public boolean hasWorkingTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 workingTime = 2;</code>
       *
       * <pre>
       ** buff的EffectMain效果器执行时间 
       * </pre>
       */
      public int getWorkingTime() {
        return workingTime_;
      }
      /**
       * <code>required int32 workingTime = 2;</code>
       *
       * <pre>
       ** buff的EffectMain效果器执行时间 
       * </pre>
       */
      public Builder setWorkingTime(int value) {
        bitField0_ |= 0x00000002;
        workingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 workingTime = 2;</code>
       *
       * <pre>
       ** buff的EffectMain效果器执行时间 
       * </pre>
       */
      public Builder clearWorkingTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        workingTime_ = 0;
        onChanged();
        return this;
      }

      private int remainTime_ ;
      /**
       * <code>required int32 remainTime = 3;</code>
       *
       * <pre>
       ** 持续回合数 
       * </pre>
       */
      public boolean hasRemainTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 remainTime = 3;</code>
       *
       * <pre>
       ** 持续回合数 
       * </pre>
       */
      public int getRemainTime() {
        return remainTime_;
      }
      /**
       * <code>required int32 remainTime = 3;</code>
       *
       * <pre>
       ** 持续回合数 
       * </pre>
       */
      public Builder setRemainTime(int value) {
        bitField0_ |= 0x00000004;
        remainTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 remainTime = 3;</code>
       *
       * <pre>
       ** 持续回合数 
       * </pre>
       */
      public Builder clearRemainTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        remainTime_ = 0;
        onChanged();
        return this;
      }

      private int buffType_ ;
      /**
       * <code>required int32 buffType = 4;</code>
       *
       * <pre>
       ** 正负级别 
       * </pre>
       */
      public boolean hasBuffType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 buffType = 4;</code>
       *
       * <pre>
       ** 正负级别 
       * </pre>
       */
      public int getBuffType() {
        return buffType_;
      }
      /**
       * <code>required int32 buffType = 4;</code>
       *
       * <pre>
       ** 正负级别 
       * </pre>
       */
      public Builder setBuffType(int value) {
        bitField0_ |= 0x00000008;
        buffType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 buffType = 4;</code>
       *
       * <pre>
       ** 正负级别 
       * </pre>
       */
      public Builder clearBuffType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        buffType_ = 0;
        onChanged();
        return this;
      }

      private boolean isCanStop_ ;
      /**
       * <code>required bool isCanStop = 5;</code>
       *
       * <pre>
       ** 是否可以被驱散 
       * </pre>
       */
      public boolean hasIsCanStop() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool isCanStop = 5;</code>
       *
       * <pre>
       ** 是否可以被驱散 
       * </pre>
       */
      public boolean getIsCanStop() {
        return isCanStop_;
      }
      /**
       * <code>required bool isCanStop = 5;</code>
       *
       * <pre>
       ** 是否可以被驱散 
       * </pre>
       */
      public Builder setIsCanStop(boolean value) {
        bitField0_ |= 0x00000010;
        isCanStop_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isCanStop = 5;</code>
       *
       * <pre>
       ** 是否可以被驱散 
       * </pre>
       */
      public Builder clearIsCanStop() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isCanStop_ = false;
        onChanged();
        return this;
      }

      private int spellBuffHitType_ ;
      /**
       * <code>required int32 spellBuffHitType = 6;</code>
       *
       * <pre>
       ** Buff命中规则 
       * </pre>
       */
      public boolean hasSpellBuffHitType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 spellBuffHitType = 6;</code>
       *
       * <pre>
       ** Buff命中规则 
       * </pre>
       */
      public int getSpellBuffHitType() {
        return spellBuffHitType_;
      }
      /**
       * <code>required int32 spellBuffHitType = 6;</code>
       *
       * <pre>
       ** Buff命中规则 
       * </pre>
       */
      public Builder setSpellBuffHitType(int value) {
        bitField0_ |= 0x00000020;
        spellBuffHitType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 spellBuffHitType = 6;</code>
       *
       * <pre>
       ** Buff命中规则 
       * </pre>
       */
      public Builder clearSpellBuffHitType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        spellBuffHitType_ = 0;
        onChanged();
        return this;
      }

      private com.mokylin.bleach.protobuf.CombatMessage.EffectData effectMain_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> effectMainBuilder_;
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public boolean hasEffectMain() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectMain() {
        if (effectMainBuilder_ == null) {
          return effectMain_;
        } else {
          return effectMainBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public Builder setEffectMain(com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectMainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectMain_ = value;
          onChanged();
        } else {
          effectMainBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public Builder setEffectMain(
          com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder builderForValue) {
        if (effectMainBuilder_ == null) {
          effectMain_ = builderForValue.build();
          onChanged();
        } else {
          effectMainBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public Builder mergeEffectMain(com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectMainBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              effectMain_ != com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance()) {
            effectMain_ =
              com.mokylin.bleach.protobuf.CombatMessage.EffectData.newBuilder(effectMain_).mergeFrom(value).buildPartial();
          } else {
            effectMain_ = value;
          }
          onChanged();
        } else {
          effectMainBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public Builder clearEffectMain() {
        if (effectMainBuilder_ == null) {
          effectMain_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
          onChanged();
        } else {
          effectMainBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder getEffectMainBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getEffectMainFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectMainOrBuilder() {
        if (effectMainBuilder_ != null) {
          return effectMainBuilder_.getMessageOrBuilder();
        } else {
          return effectMain_;
        }
      }
      /**
       * <code>required .com.mokylin.EffectData effectMain = 7;</code>
       *
       * <pre>
       ** 效果器 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> 
          getEffectMainFieldBuilder() {
        if (effectMainBuilder_ == null) {
          effectMainBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder>(
                  getEffectMain(),
                  getParentForChildren(),
                  isClean());
          effectMain_ = null;
        }
        return effectMainBuilder_;
      }

      private com.mokylin.bleach.protobuf.CombatMessage.EffectData effectEnd_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> effectEndBuilder_;
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public boolean hasEffectEnd() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData getEffectEnd() {
        if (effectEndBuilder_ == null) {
          return effectEnd_;
        } else {
          return effectEndBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public Builder setEffectEnd(com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectEndBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectEnd_ = value;
          onChanged();
        } else {
          effectEndBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public Builder setEffectEnd(
          com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder builderForValue) {
        if (effectEndBuilder_ == null) {
          effectEnd_ = builderForValue.build();
          onChanged();
        } else {
          effectEndBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public Builder mergeEffectEnd(com.mokylin.bleach.protobuf.CombatMessage.EffectData value) {
        if (effectEndBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              effectEnd_ != com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance()) {
            effectEnd_ =
              com.mokylin.bleach.protobuf.CombatMessage.EffectData.newBuilder(effectEnd_).mergeFrom(value).buildPartial();
          } else {
            effectEnd_ = value;
          }
          onChanged();
        } else {
          effectEndBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public Builder clearEffectEnd() {
        if (effectEndBuilder_ == null) {
          effectEnd_ = com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
          onChanged();
        } else {
          effectEndBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder getEffectEndBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getEffectEndFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder getEffectEndOrBuilder() {
        if (effectEndBuilder_ != null) {
          return effectEndBuilder_.getMessageOrBuilder();
        } else {
          return effectEnd_;
        }
      }
      /**
       * <code>required .com.mokylin.EffectData effectEnd = 8;</code>
       *
       * <pre>
       ** Buff结束时需要执行的效果器 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder> 
          getEffectEndFieldBuilder() {
        if (effectEndBuilder_ == null) {
          effectEndBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.EffectData, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder, com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder>(
                  getEffectEnd(),
                  getParentForChildren(),
                  isClean());
          effectEnd_ = null;
        }
        return effectEndBuilder_;
      }

      private java.util.List<com.mokylin.bleach.protobuf.CombatMessage.PropValue> props_ =
        java.util.Collections.emptyList();
      private void ensurePropsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          props_ = new java.util.ArrayList<com.mokylin.bleach.protobuf.CombatMessage.PropValue>(props_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.PropValue, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder, com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder> propsBuilder_;

      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.PropValue> getPropsList() {
        if (propsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(props_);
        } else {
          return propsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public int getPropsCount() {
        if (propsBuilder_ == null) {
          return props_.size();
        } else {
          return propsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.PropValue getProps(int index) {
        if (propsBuilder_ == null) {
          return props_.get(index);
        } else {
          return propsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder setProps(
          int index, com.mokylin.bleach.protobuf.CombatMessage.PropValue value) {
        if (propsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropsIsMutable();
          props_.set(index, value);
          onChanged();
        } else {
          propsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder setProps(
          int index, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder builderForValue) {
        if (propsBuilder_ == null) {
          ensurePropsIsMutable();
          props_.set(index, builderForValue.build());
          onChanged();
        } else {
          propsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder addProps(com.mokylin.bleach.protobuf.CombatMessage.PropValue value) {
        if (propsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropsIsMutable();
          props_.add(value);
          onChanged();
        } else {
          propsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder addProps(
          int index, com.mokylin.bleach.protobuf.CombatMessage.PropValue value) {
        if (propsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropsIsMutable();
          props_.add(index, value);
          onChanged();
        } else {
          propsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder addProps(
          com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder builderForValue) {
        if (propsBuilder_ == null) {
          ensurePropsIsMutable();
          props_.add(builderForValue.build());
          onChanged();
        } else {
          propsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder addProps(
          int index, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder builderForValue) {
        if (propsBuilder_ == null) {
          ensurePropsIsMutable();
          props_.add(index, builderForValue.build());
          onChanged();
        } else {
          propsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder addAllProps(
          java.lang.Iterable<? extends com.mokylin.bleach.protobuf.CombatMessage.PropValue> values) {
        if (propsBuilder_ == null) {
          ensurePropsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, props_);
          onChanged();
        } else {
          propsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder clearProps() {
        if (propsBuilder_ == null) {
          props_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          propsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public Builder removeProps(int index) {
        if (propsBuilder_ == null) {
          ensurePropsIsMutable();
          props_.remove(index);
          onChanged();
        } else {
          propsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder getPropsBuilder(
          int index) {
        return getPropsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder getPropsOrBuilder(
          int index) {
        if (propsBuilder_ == null) {
          return props_.get(index);  } else {
          return propsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public java.util.List<? extends com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder> 
           getPropsOrBuilderList() {
        if (propsBuilder_ != null) {
          return propsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(props_);
        }
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder addPropsBuilder() {
        return getPropsFieldBuilder().addBuilder(
            com.mokylin.bleach.protobuf.CombatMessage.PropValue.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder addPropsBuilder(
          int index) {
        return getPropsFieldBuilder().addBuilder(
            index, com.mokylin.bleach.protobuf.CombatMessage.PropValue.getDefaultInstance());
      }
      /**
       * <code>repeated .com.mokylin.PropValue props = 9;</code>
       *
       * <pre>
       ** 附加的属性 
       * </pre>
       */
      public java.util.List<com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder> 
           getPropsBuilderList() {
        return getPropsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mokylin.bleach.protobuf.CombatMessage.PropValue, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder, com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder> 
          getPropsFieldBuilder() {
        if (propsBuilder_ == null) {
          propsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mokylin.bleach.protobuf.CombatMessage.PropValue, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder, com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder>(
                  props_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          props_ = null;
        }
        return propsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.BuffTemplateData)
    }

    static {
      defaultInstance = new BuffTemplateData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.BuffTemplateData)
  }

  public interface EffectDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.EffectData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 effectId = 1;</code>
     *
     * <pre>
     ** 效果器Id 
     * </pre>
     */
    boolean hasEffectId();
    /**
     * <code>required int32 effectId = 1;</code>
     *
     * <pre>
     ** 效果器Id 
     * </pre>
     */
    int getEffectId();

    /**
     * <code>repeated float params = 2;</code>
     *
     * <pre>
     ** 参数 
     * </pre>
     */
    java.util.List<java.lang.Float> getParamsList();
    /**
     * <code>repeated float params = 2;</code>
     *
     * <pre>
     ** 参数 
     * </pre>
     */
    int getParamsCount();
    /**
     * <code>repeated float params = 2;</code>
     *
     * <pre>
     ** 参数 
     * </pre>
     */
    float getParams(int index);
  }
  /**
   * Protobuf type {@code com.mokylin.EffectData}
   *
   * <pre>
   ** 效果器 
   * </pre>
   */
  public static final class EffectData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.EffectData)
      EffectDataOrBuilder {
    // Use EffectData.newBuilder() to construct.
    private EffectData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EffectData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EffectData defaultInstance;
    public static EffectData getDefaultInstance() {
      return defaultInstance;
    }

    public EffectData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EffectData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              effectId_ = input.readInt32();
              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                params_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              params_.add(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                params_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                params_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = java.util.Collections.unmodifiableList(params_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_EffectData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_EffectData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.EffectData.class, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder.class);
    }

    public static com.google.protobuf.Parser<EffectData> PARSER =
        new com.google.protobuf.AbstractParser<EffectData>() {
      public EffectData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EffectData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EffectData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int EFFECTID_FIELD_NUMBER = 1;
    private int effectId_;
    /**
     * <code>required int32 effectId = 1;</code>
     *
     * <pre>
     ** 效果器Id 
     * </pre>
     */
    public boolean hasEffectId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 effectId = 1;</code>
     *
     * <pre>
     ** 效果器Id 
     * </pre>
     */
    public int getEffectId() {
      return effectId_;
    }

    public static final int PARAMS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Float> params_;
    /**
     * <code>repeated float params = 2;</code>
     *
     * <pre>
     ** 参数 
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getParamsList() {
      return params_;
    }
    /**
     * <code>repeated float params = 2;</code>
     *
     * <pre>
     ** 参数 
     * </pre>
     */
    public int getParamsCount() {
      return params_.size();
    }
    /**
     * <code>repeated float params = 2;</code>
     *
     * <pre>
     ** 参数 
     * </pre>
     */
    public float getParams(int index) {
      return params_.get(index);
    }

    private void initFields() {
      effectId_ = 0;
      params_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasEffectId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, effectId_);
      }
      for (int i = 0; i < params_.size(); i++) {
        output.writeFloat(2, params_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, effectId_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getParamsList().size();
        size += dataSize;
        size += 1 * getParamsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.EffectData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.EffectData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.EffectData}
     *
     * <pre>
     ** 效果器 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.EffectData)
        com.mokylin.bleach.protobuf.CombatMessage.EffectDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_EffectData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_EffectData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.EffectData.class, com.mokylin.bleach.protobuf.CombatMessage.EffectData.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.EffectData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        effectId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        params_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_EffectData_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.EffectData getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.EffectData build() {
        com.mokylin.bleach.protobuf.CombatMessage.EffectData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.EffectData buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.EffectData result = new com.mokylin.bleach.protobuf.CombatMessage.EffectData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.effectId_ = effectId_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = java.util.Collections.unmodifiableList(params_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.params_ = params_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.EffectData) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.EffectData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.EffectData other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.EffectData.getDefaultInstance()) return this;
        if (other.hasEffectId()) {
          setEffectId(other.getEffectId());
        }
        if (!other.params_.isEmpty()) {
          if (params_.isEmpty()) {
            params_ = other.params_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureParamsIsMutable();
            params_.addAll(other.params_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEffectId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.EffectData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.EffectData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int effectId_ ;
      /**
       * <code>required int32 effectId = 1;</code>
       *
       * <pre>
       ** 效果器Id 
       * </pre>
       */
      public boolean hasEffectId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 effectId = 1;</code>
       *
       * <pre>
       ** 效果器Id 
       * </pre>
       */
      public int getEffectId() {
        return effectId_;
      }
      /**
       * <code>required int32 effectId = 1;</code>
       *
       * <pre>
       ** 效果器Id 
       * </pre>
       */
      public Builder setEffectId(int value) {
        bitField0_ |= 0x00000001;
        effectId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 effectId = 1;</code>
       *
       * <pre>
       ** 效果器Id 
       * </pre>
       */
      public Builder clearEffectId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        effectId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> params_ = java.util.Collections.emptyList();
      private void ensureParamsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = new java.util.ArrayList<java.lang.Float>(params_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getParamsList() {
        return java.util.Collections.unmodifiableList(params_);
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public int getParamsCount() {
        return params_.size();
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public float getParams(int index) {
        return params_.get(index);
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public Builder setParams(
          int index, float value) {
        ensureParamsIsMutable();
        params_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public Builder addParams(float value) {
        ensureParamsIsMutable();
        params_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public Builder addAllParams(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureParamsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, params_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float params = 2;</code>
       *
       * <pre>
       ** 参数 
       * </pre>
       */
      public Builder clearParams() {
        params_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.EffectData)
    }

    static {
      defaultInstance = new EffectData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.EffectData)
  }

  public interface Abs2PropValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.Abs2PropValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    boolean hasPropId();
    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    int getPropId();

    /**
     * <code>required int32 value = 2;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>required int32 value = 2;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    int getValue();
  }
  /**
   * Protobuf type {@code com.mokylin.Abs2PropValue}
   *
   * <pre>
   ** 绝对值属性 
   * </pre>
   */
  public static final class Abs2PropValue extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.Abs2PropValue)
      Abs2PropValueOrBuilder {
    // Use Abs2PropValue.newBuilder() to construct.
    private Abs2PropValue(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Abs2PropValue(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Abs2PropValue defaultInstance;
    public static Abs2PropValue getDefaultInstance() {
      return defaultInstance;
    }

    public Abs2PropValue getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Abs2PropValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              propId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Abs2PropValue_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Abs2PropValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.class, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder.class);
    }

    public static com.google.protobuf.Parser<Abs2PropValue> PARSER =
        new com.google.protobuf.AbstractParser<Abs2PropValue>() {
      public Abs2PropValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Abs2PropValue(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Abs2PropValue> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PROPID_FIELD_NUMBER = 1;
    private int propId_;
    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    public boolean hasPropId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    public int getPropId() {
      return propId_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>required int32 value = 2;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 value = 2;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    private void initFields() {
      propId_ = 0;
      value_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPropId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, propId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, propId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.Abs2PropValue}
     *
     * <pre>
     ** 绝对值属性 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.Abs2PropValue)
        com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Abs2PropValue_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Abs2PropValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.class, com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        propId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_Abs2PropValue_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue build() {
        com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue result = new com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.propId_ = propId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue.getDefaultInstance()) return this;
        if (other.hasPropId()) {
          setPropId(other.getPropId());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPropId()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.Abs2PropValue) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int propId_ ;
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public boolean hasPropId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public int getPropId() {
        return propId_;
      }
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public Builder setPropId(int value) {
        bitField0_ |= 0x00000001;
        propId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public Builder clearPropId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        propId_ = 0;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>required int32 value = 2;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 value = 2;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>required int32 value = 2;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 value = 2;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.Abs2PropValue)
    }

    static {
      defaultInstance = new Abs2PropValue(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.Abs2PropValue)
  }

  public interface PropValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.PropValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    boolean hasPropId();
    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    int getPropId();

    /**
     * <code>required int32 propEffectType = 2;</code>
     *
     * <pre>
     ** 属性作用类型 
     * </pre>
     */
    boolean hasPropEffectType();
    /**
     * <code>required int32 propEffectType = 2;</code>
     *
     * <pre>
     ** 属性作用类型 
     * </pre>
     */
    int getPropEffectType();

    /**
     * <code>required int32 value = 3;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>required int32 value = 3;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    int getValue();
  }
  /**
   * Protobuf type {@code com.mokylin.PropValue}
   *
   * <pre>
   ** 属性 
   * </pre>
   */
  public static final class PropValue extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.PropValue)
      PropValueOrBuilder {
    // Use PropValue.newBuilder() to construct.
    private PropValue(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PropValue(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PropValue defaultInstance;
    public static PropValue getDefaultInstance() {
      return defaultInstance;
    }

    public PropValue getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PropValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              propId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              propEffectType_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              value_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_PropValue_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_PropValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.PropValue.class, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder.class);
    }

    public static com.google.protobuf.Parser<PropValue> PARSER =
        new com.google.protobuf.AbstractParser<PropValue>() {
      public PropValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PropValue(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PropValue> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PROPID_FIELD_NUMBER = 1;
    private int propId_;
    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    public boolean hasPropId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 propId = 1;</code>
     *
     * <pre>
     ** 属性Id 
     * </pre>
     */
    public int getPropId() {
      return propId_;
    }

    public static final int PROPEFFECTTYPE_FIELD_NUMBER = 2;
    private int propEffectType_;
    /**
     * <code>required int32 propEffectType = 2;</code>
     *
     * <pre>
     ** 属性作用类型 
     * </pre>
     */
    public boolean hasPropEffectType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 propEffectType = 2;</code>
     *
     * <pre>
     ** 属性作用类型 
     * </pre>
     */
    public int getPropEffectType() {
      return propEffectType_;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private int value_;
    /**
     * <code>required int32 value = 3;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 value = 3;</code>
     *
     * <pre>
     ** 属性值 
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    private void initFields() {
      propId_ = 0;
      propEffectType_ = 0;
      value_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPropId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPropEffectType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, propId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, propEffectType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, propId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, propEffectType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.PropValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.PropValue prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.PropValue}
     *
     * <pre>
     ** 属性 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.PropValue)
        com.mokylin.bleach.protobuf.CombatMessage.PropValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_PropValue_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_PropValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.PropValue.class, com.mokylin.bleach.protobuf.CombatMessage.PropValue.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.PropValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        propId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        propEffectType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_PropValue_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.PropValue getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.PropValue.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.PropValue build() {
        com.mokylin.bleach.protobuf.CombatMessage.PropValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.PropValue buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.PropValue result = new com.mokylin.bleach.protobuf.CombatMessage.PropValue(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.propId_ = propId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.propEffectType_ = propEffectType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.PropValue) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.PropValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.PropValue other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.PropValue.getDefaultInstance()) return this;
        if (other.hasPropId()) {
          setPropId(other.getPropId());
        }
        if (other.hasPropEffectType()) {
          setPropEffectType(other.getPropEffectType());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPropId()) {
          
          return false;
        }
        if (!hasPropEffectType()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.PropValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.PropValue) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int propId_ ;
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public boolean hasPropId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public int getPropId() {
        return propId_;
      }
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public Builder setPropId(int value) {
        bitField0_ |= 0x00000001;
        propId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 propId = 1;</code>
       *
       * <pre>
       ** 属性Id 
       * </pre>
       */
      public Builder clearPropId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        propId_ = 0;
        onChanged();
        return this;
      }

      private int propEffectType_ ;
      /**
       * <code>required int32 propEffectType = 2;</code>
       *
       * <pre>
       ** 属性作用类型 
       * </pre>
       */
      public boolean hasPropEffectType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 propEffectType = 2;</code>
       *
       * <pre>
       ** 属性作用类型 
       * </pre>
       */
      public int getPropEffectType() {
        return propEffectType_;
      }
      /**
       * <code>required int32 propEffectType = 2;</code>
       *
       * <pre>
       ** 属性作用类型 
       * </pre>
       */
      public Builder setPropEffectType(int value) {
        bitField0_ |= 0x00000002;
        propEffectType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 propEffectType = 2;</code>
       *
       * <pre>
       ** 属性作用类型 
       * </pre>
       */
      public Builder clearPropEffectType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        propEffectType_ = 0;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>required int32 value = 3;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 value = 3;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>required int32 value = 3;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000004;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 value = 3;</code>
       *
       * <pre>
       ** 属性值 
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        value_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.PropValue)
    }

    static {
      defaultInstance = new PropValue(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.PropValue)
  }

  public interface SpellPresentAttackRateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.mokylin.SpellPresentAttackRate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated float comboSpellActionAttackRates = 1;</code>
     *
     * <pre>
     ** 连携打击中的伤害系数 
     * </pre>
     */
    java.util.List<java.lang.Float> getComboSpellActionAttackRatesList();
    /**
     * <code>repeated float comboSpellActionAttackRates = 1;</code>
     *
     * <pre>
     ** 连携打击中的伤害系数 
     * </pre>
     */
    int getComboSpellActionAttackRatesCount();
    /**
     * <code>repeated float comboSpellActionAttackRates = 1;</code>
     *
     * <pre>
     ** 连携打击中的伤害系数 
     * </pre>
     */
    float getComboSpellActionAttackRates(int index);

    /**
     * <code>repeated float actionAttackRates = 2;</code>
     *
     * <pre>
     ** 技能打击中的伤害系数 
     * </pre>
     */
    java.util.List<java.lang.Float> getActionAttackRatesList();
    /**
     * <code>repeated float actionAttackRates = 2;</code>
     *
     * <pre>
     ** 技能打击中的伤害系数 
     * </pre>
     */
    int getActionAttackRatesCount();
    /**
     * <code>repeated float actionAttackRates = 2;</code>
     *
     * <pre>
     ** 技能打击中的伤害系数 
     * </pre>
     */
    float getActionAttackRates(int index);
  }
  /**
   * Protobuf type {@code com.mokylin.SpellPresentAttackRate}
   *
   * <pre>
   ** 技能显示数据中的伤害系数 
   * </pre>
   */
  public static final class SpellPresentAttackRate extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.mokylin.SpellPresentAttackRate)
      SpellPresentAttackRateOrBuilder {
    // Use SpellPresentAttackRate.newBuilder() to construct.
    private SpellPresentAttackRate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpellPresentAttackRate(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpellPresentAttackRate defaultInstance;
    public static SpellPresentAttackRate getDefaultInstance() {
      return defaultInstance;
    }

    public SpellPresentAttackRate getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpellPresentAttackRate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                comboSpellActionAttackRates_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              comboSpellActionAttackRates_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                comboSpellActionAttackRates_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                comboSpellActionAttackRates_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                actionAttackRates_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              actionAttackRates_.add(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                actionAttackRates_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                actionAttackRates_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          comboSpellActionAttackRates_ = java.util.Collections.unmodifiableList(comboSpellActionAttackRates_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          actionAttackRates_ = java.util.Collections.unmodifiableList(actionAttackRates_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellPresentAttackRate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellPresentAttackRate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.class, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder.class);
    }

    public static com.google.protobuf.Parser<SpellPresentAttackRate> PARSER =
        new com.google.protobuf.AbstractParser<SpellPresentAttackRate>() {
      public SpellPresentAttackRate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpellPresentAttackRate(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpellPresentAttackRate> getParserForType() {
      return PARSER;
    }

    public static final int COMBOSPELLACTIONATTACKRATES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Float> comboSpellActionAttackRates_;
    /**
     * <code>repeated float comboSpellActionAttackRates = 1;</code>
     *
     * <pre>
     ** 连携打击中的伤害系数 
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getComboSpellActionAttackRatesList() {
      return comboSpellActionAttackRates_;
    }
    /**
     * <code>repeated float comboSpellActionAttackRates = 1;</code>
     *
     * <pre>
     ** 连携打击中的伤害系数 
     * </pre>
     */
    public int getComboSpellActionAttackRatesCount() {
      return comboSpellActionAttackRates_.size();
    }
    /**
     * <code>repeated float comboSpellActionAttackRates = 1;</code>
     *
     * <pre>
     ** 连携打击中的伤害系数 
     * </pre>
     */
    public float getComboSpellActionAttackRates(int index) {
      return comboSpellActionAttackRates_.get(index);
    }

    public static final int ACTIONATTACKRATES_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Float> actionAttackRates_;
    /**
     * <code>repeated float actionAttackRates = 2;</code>
     *
     * <pre>
     ** 技能打击中的伤害系数 
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getActionAttackRatesList() {
      return actionAttackRates_;
    }
    /**
     * <code>repeated float actionAttackRates = 2;</code>
     *
     * <pre>
     ** 技能打击中的伤害系数 
     * </pre>
     */
    public int getActionAttackRatesCount() {
      return actionAttackRates_.size();
    }
    /**
     * <code>repeated float actionAttackRates = 2;</code>
     *
     * <pre>
     ** 技能打击中的伤害系数 
     * </pre>
     */
    public float getActionAttackRates(int index) {
      return actionAttackRates_.get(index);
    }

    private void initFields() {
      comboSpellActionAttackRates_ = java.util.Collections.emptyList();
      actionAttackRates_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < comboSpellActionAttackRates_.size(); i++) {
        output.writeFloat(1, comboSpellActionAttackRates_.get(i));
      }
      for (int i = 0; i < actionAttackRates_.size(); i++) {
        output.writeFloat(2, actionAttackRates_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getComboSpellActionAttackRatesList().size();
        size += dataSize;
        size += 1 * getComboSpellActionAttackRatesList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getActionAttackRatesList().size();
        size += dataSize;
        size += 1 * getActionAttackRatesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.mokylin.SpellPresentAttackRate}
     *
     * <pre>
     ** 技能显示数据中的伤害系数 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.mokylin.SpellPresentAttackRate)
        com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellPresentAttackRate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellPresentAttackRate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.class, com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.Builder.class);
      }

      // Construct using com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        comboSpellActionAttackRates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        actionAttackRates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.internal_static_com_mokylin_SpellPresentAttackRate_descriptor;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate getDefaultInstanceForType() {
        return com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.getDefaultInstance();
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate build() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate buildPartial() {
        com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate result = new com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          comboSpellActionAttackRates_ = java.util.Collections.unmodifiableList(comboSpellActionAttackRates_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.comboSpellActionAttackRates_ = comboSpellActionAttackRates_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          actionAttackRates_ = java.util.Collections.unmodifiableList(actionAttackRates_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.actionAttackRates_ = actionAttackRates_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate) {
          return mergeFrom((com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate other) {
        if (other == com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate.getDefaultInstance()) return this;
        if (!other.comboSpellActionAttackRates_.isEmpty()) {
          if (comboSpellActionAttackRates_.isEmpty()) {
            comboSpellActionAttackRates_ = other.comboSpellActionAttackRates_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureComboSpellActionAttackRatesIsMutable();
            comboSpellActionAttackRates_.addAll(other.comboSpellActionAttackRates_);
          }
          onChanged();
        }
        if (!other.actionAttackRates_.isEmpty()) {
          if (actionAttackRates_.isEmpty()) {
            actionAttackRates_ = other.actionAttackRates_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureActionAttackRatesIsMutable();
            actionAttackRates_.addAll(other.actionAttackRates_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mokylin.bleach.protobuf.CombatMessage.SpellPresentAttackRate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Float> comboSpellActionAttackRates_ = java.util.Collections.emptyList();
      private void ensureComboSpellActionAttackRatesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          comboSpellActionAttackRates_ = new java.util.ArrayList<java.lang.Float>(comboSpellActionAttackRates_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getComboSpellActionAttackRatesList() {
        return java.util.Collections.unmodifiableList(comboSpellActionAttackRates_);
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public int getComboSpellActionAttackRatesCount() {
        return comboSpellActionAttackRates_.size();
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public float getComboSpellActionAttackRates(int index) {
        return comboSpellActionAttackRates_.get(index);
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public Builder setComboSpellActionAttackRates(
          int index, float value) {
        ensureComboSpellActionAttackRatesIsMutable();
        comboSpellActionAttackRates_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public Builder addComboSpellActionAttackRates(float value) {
        ensureComboSpellActionAttackRatesIsMutable();
        comboSpellActionAttackRates_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public Builder addAllComboSpellActionAttackRates(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureComboSpellActionAttackRatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, comboSpellActionAttackRates_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float comboSpellActionAttackRates = 1;</code>
       *
       * <pre>
       ** 连携打击中的伤害系数 
       * </pre>
       */
      public Builder clearComboSpellActionAttackRates() {
        comboSpellActionAttackRates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> actionAttackRates_ = java.util.Collections.emptyList();
      private void ensureActionAttackRatesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          actionAttackRates_ = new java.util.ArrayList<java.lang.Float>(actionAttackRates_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getActionAttackRatesList() {
        return java.util.Collections.unmodifiableList(actionAttackRates_);
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public int getActionAttackRatesCount() {
        return actionAttackRates_.size();
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public float getActionAttackRates(int index) {
        return actionAttackRates_.get(index);
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public Builder setActionAttackRates(
          int index, float value) {
        ensureActionAttackRatesIsMutable();
        actionAttackRates_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public Builder addActionAttackRates(float value) {
        ensureActionAttackRatesIsMutable();
        actionAttackRates_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public Builder addAllActionAttackRates(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureActionAttackRatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, actionAttackRates_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float actionAttackRates = 2;</code>
       *
       * <pre>
       ** 技能打击中的伤害系数 
       * </pre>
       */
      public Builder clearActionAttackRates() {
        actionAttackRates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.mokylin.SpellPresentAttackRate)
    }

    static {
      defaultInstance = new SpellPresentAttackRate(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.mokylin.SpellPresentAttackRate)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_GCCombatInitDataMission_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_GCCombatInitDataMission_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_GCCombatInitDataExpedition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_GCCombatInitDataExpedition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_CombatInitData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_CombatInitData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_Roles_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_Roles_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_RoleInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_RoleInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_InitProp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_InitProp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_HeroTemplateData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_HeroTemplateData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_MonsterTemplateData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_MonsterTemplateData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_SpellTemplateData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_SpellTemplateData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_SpellIdNode_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_SpellIdNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_SpellLogicTemplateData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_SpellLogicTemplateData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_BuffActionTemplateData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_BuffActionTemplateData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_BuffTemplateData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_BuffTemplateData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_EffectData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_EffectData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_Abs2PropValue_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_Abs2PropValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_PropValue_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_PropValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_mokylin_SpellPresentAttackRate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_mokylin_SpellPresentAttackRate_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Combat.proto\022\013com.mokylin\032\021MessageType" +
      ".proto\"n\n\027GCCombatInitDataMission\0223\n\016com" +
      "batInitData\030\001 \002(\0132\033.com.mokylin.CombatIn" +
      "itData\022\027\n\017remainDrammaIds\030\002 \003(\005:\005\220\265\030\360\005\"X" +
      "\n\032GCCombatInitDataExpedition\0223\n\016combatIn" +
      "itData\030\001 \002(\0132\033.com.mokylin.CombatInitDat" +
      "a:\005\220\265\030\361\005\"\207\004\n\016CombatInitData\022\017\n\007sceneId\030\001" +
      " \002(\005\022\022\n\ncombatType\030\002 \002(\005\022%\n\tleftRoles\030\003 " +
      "\002(\0132\022.com.mokylin.Roles\022&\n\nrightRoles\030\004 " +
      "\002(\0132\022.com.mokylin.Roles\022/\n\010heroTmpl\030\005 \003(",
      "\0132\035.com.mokylin.HeroTemplateData\0225\n\013mons" +
      "terTmpl\030\006 \003(\0132 .com.mokylin.MonsterTempl" +
      "ateData\0221\n\tspellTmpl\030\007 \003(\0132\036.com.mokylin" +
      ".SpellTemplateData\022;\n\016spellLogicTmpl\030\010 \003" +
      "(\0132#.com.mokylin.SpellLogicTemplateData\022" +
      ";\n\016buffActionTmpl\030\t \003(\0132#.com.mokylin.Bu" +
      "ffActionTemplateData\022/\n\010buffTmpl\030\n \003(\0132\035" +
      ".com.mokylin.BuffTemplateData\022;\n\016spellAc" +
      "torData\030\013 \003(\0132#.com.mokylin.SpellPresent" +
      "AttackRate\"=\n\005Roles\022\016\n\006initMP\030\001 \002(\005\022$\n\005r",
      "oles\030\002 \003(\0132\025.com.mokylin.RoleInfo\"\311\001\n\010Ro" +
      "leInfo\022\016\n\006isHero\030\001 \002(\010\022\016\n\006initHP\030\002 \002(\005\022\020" +
      "\n\010position\030\003 \002(\005\022\022\n\nroleTmplId\030\004 \002(\005\022+\n\014" +
      "initPropList\030\005 \003(\0132\025.com.mokylin.InitPro" +
      "p\022\022\n\nbuffIdList\030\006 \003(\005\022\023\n\013lingYaLevel\030\007 \002" +
      "(\005\022\020\n\010spellIds\030\010 \003(\005\022\017\n\007auraIds\030\t \003(\005\")\n" +
      "\010InitProp\022\016\n\006propId\030\001 \002(\005\022\r\n\005value\030\002 \002(\002" +
      "\"\265\001\n\020HeroTemplateData\022\n\n\002id\030\001 \002(\005\022\023\n\013doN" +
      "othingId\030\002 \002(\005\022\025\n\rnormalSkillId\030\003 \002(\005\022\027\n" +
      "\017criticalSkillId\030\004 \002(\005\022\032\n\022comboMasterSki",
      "llId\030\005 \002(\005\022\031\n\021comboSlaveSkillId\030\006 \002(\005\022\031\n" +
      "\021secondarySkillIds\030\007 \003(\005\"\270\001\n\023MonsterTemp" +
      "lateData\022\n\n\002id\030\001 \002(\005\022\023\n\013doNothingId\030\002 \002(" +
      "\005\022\025\n\rnormalSkillId\030\003 \002(\005\022\027\n\017criticalSkil" +
      "lId\030\004 \002(\005\022\032\n\022comboMasterSkillId\030\005 \002(\005\022\031\n" +
      "\021comboSlaveSkillId\030\006 \002(\005\022\031\n\021secondarySki" +
      "llIds\030\007 \003(\005\"O\n\021SpellTemplateData\022\n\n\002id\030\001" +
      " \002(\005\022.\n\014spellIdNodes\030\002 \003(\0132\030.com.mokylin" +
      ".SpellIdNode\";\n\013SpellIdNode\022\024\n\014spellLogi" +
      "cId\030\001 \002(\005\022\026\n\016spellPresentId\030\002 \002(\t\"\325\003\n\026Sp",
      "ellLogicTemplateData\022\n\n\002id\030\001 \002(\005\022\020\n\010prio" +
      "rity\030\002 \002(\005\022\016\n\006mpCost\030\003 \002(\005\022\016\n\006initCd\030\004 \002" +
      "(\005\022\n\n\002cd\030\005 \002(\005\022\026\n\016targetSelector\030\006 \002(\005\022\025" +
      "\n\rrangeSelector\030\007 \002(\005\022\025\n\ryuanSuLeiXing\030\010" +
      " \002(\005\022\021\n\tspellType\030\t \002(\005\022\027\n\017spellDamageTy" +
      "pe\030\n \002(\005\022\024\n\014spellExpType\030\013 \002(\005\022\035\n\025levelR" +
      "elatedParameter\030\014 \002(\002\022 \n\030spellCorrection" +
      "Parameter\030\r \002(\005\022\021\n\tIsBiZhong\030\016 \002(\010\022\021\n\tIs" +
      "BiBaoJi\030\017 \002(\010\022\021\n\tIsNoBaoJi\030\020 \002(\010\022\024\n\014IsWu" +
      "FaGeDang\030\021 \002(\010\022\021\n\tIsBiPoJia\030\022 \002(\010\022\023\n\013str",
      "ActionID\030\023 \002(\t\0221\n\rattributeList\030\024 \003(\0132\032." +
      "com.mokylin.Abs2PropValue\"\206\001\n\026BuffAction" +
      "TemplateData\022\n\n\002id\030\001 \002(\005\022\030\n\020strTargetBuf" +
      "fIds\030\002 \002(\t\022\030\n\020strCasterBuffIds\030\003 \002(\t\022,\n\013" +
      "effectDatas\030\004 \003(\0132\027.com.mokylin.EffectDa" +
      "ta\"\206\002\n\020BuffTemplateData\022\n\n\002id\030\001 \002(\005\022\023\n\013w" +
      "orkingTime\030\002 \002(\005\022\022\n\nremainTime\030\003 \002(\005\022\020\n\010" +
      "buffType\030\004 \002(\005\022\021\n\tisCanStop\030\005 \002(\010\022\030\n\020spe" +
      "llBuffHitType\030\006 \002(\005\022+\n\neffectMain\030\007 \002(\0132" +
      "\027.com.mokylin.EffectData\022*\n\teffectEnd\030\010 ",
      "\002(\0132\027.com.mokylin.EffectData\022%\n\005props\030\t " +
      "\003(\0132\026.com.mokylin.PropValue\".\n\nEffectDat" +
      "a\022\020\n\010effectId\030\001 \002(\005\022\016\n\006params\030\002 \003(\002\".\n\rA" +
      "bs2PropValue\022\016\n\006propId\030\001 \002(\005\022\r\n\005value\030\002 " +
      "\002(\005\"B\n\tPropValue\022\016\n\006propId\030\001 \002(\005\022\026\n\016prop" +
      "EffectType\030\002 \002(\005\022\r\n\005value\030\003 \002(\005\"X\n\026Spell" +
      "PresentAttackRate\022#\n\033comboSpellActionAtt" +
      "ackRates\030\001 \003(\002\022\031\n\021actionAttackRates\030\002 \003(" +
      "\002B,\n\033com.mokylin.bleach.protobufB\rCombat" +
      "Message"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.mokylin.bleach.protobuf.MessageType.getDescriptor(),
        }, assigner);
    internal_static_com_mokylin_GCCombatInitDataMission_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_mokylin_GCCombatInitDataMission_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_GCCombatInitDataMission_descriptor,
        new java.lang.String[] { "CombatInitData", "RemainDrammaIds", });
    internal_static_com_mokylin_GCCombatInitDataExpedition_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_mokylin_GCCombatInitDataExpedition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_GCCombatInitDataExpedition_descriptor,
        new java.lang.String[] { "CombatInitData", });
    internal_static_com_mokylin_CombatInitData_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_mokylin_CombatInitData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_CombatInitData_descriptor,
        new java.lang.String[] { "SceneId", "CombatType", "LeftRoles", "RightRoles", "HeroTmpl", "MonsterTmpl", "SpellTmpl", "SpellLogicTmpl", "BuffActionTmpl", "BuffTmpl", "SpellActorData", });
    internal_static_com_mokylin_Roles_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_mokylin_Roles_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_Roles_descriptor,
        new java.lang.String[] { "InitMP", "Roles", });
    internal_static_com_mokylin_RoleInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_com_mokylin_RoleInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_RoleInfo_descriptor,
        new java.lang.String[] { "IsHero", "InitHP", "Position", "RoleTmplId", "InitPropList", "BuffIdList", "LingYaLevel", "SpellIds", "AuraIds", });
    internal_static_com_mokylin_InitProp_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_com_mokylin_InitProp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_InitProp_descriptor,
        new java.lang.String[] { "PropId", "Value", });
    internal_static_com_mokylin_HeroTemplateData_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_com_mokylin_HeroTemplateData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_HeroTemplateData_descriptor,
        new java.lang.String[] { "Id", "DoNothingId", "NormalSkillId", "CriticalSkillId", "ComboMasterSkillId", "ComboSlaveSkillId", "SecondarySkillIds", });
    internal_static_com_mokylin_MonsterTemplateData_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_com_mokylin_MonsterTemplateData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_MonsterTemplateData_descriptor,
        new java.lang.String[] { "Id", "DoNothingId", "NormalSkillId", "CriticalSkillId", "ComboMasterSkillId", "ComboSlaveSkillId", "SecondarySkillIds", });
    internal_static_com_mokylin_SpellTemplateData_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_com_mokylin_SpellTemplateData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_SpellTemplateData_descriptor,
        new java.lang.String[] { "Id", "SpellIdNodes", });
    internal_static_com_mokylin_SpellIdNode_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_com_mokylin_SpellIdNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_SpellIdNode_descriptor,
        new java.lang.String[] { "SpellLogicId", "SpellPresentId", });
    internal_static_com_mokylin_SpellLogicTemplateData_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_com_mokylin_SpellLogicTemplateData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_SpellLogicTemplateData_descriptor,
        new java.lang.String[] { "Id", "Priority", "MpCost", "InitCd", "Cd", "TargetSelector", "RangeSelector", "YuanSuLeiXing", "SpellType", "SpellDamageType", "SpellExpType", "LevelRelatedParameter", "SpellCorrectionParameter", "IsBiZhong", "IsBiBaoJi", "IsNoBaoJi", "IsWuFaGeDang", "IsBiPoJia", "StrActionID", "AttributeList", });
    internal_static_com_mokylin_BuffActionTemplateData_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_com_mokylin_BuffActionTemplateData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_BuffActionTemplateData_descriptor,
        new java.lang.String[] { "Id", "StrTargetBuffIds", "StrCasterBuffIds", "EffectDatas", });
    internal_static_com_mokylin_BuffTemplateData_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_com_mokylin_BuffTemplateData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_BuffTemplateData_descriptor,
        new java.lang.String[] { "Id", "WorkingTime", "RemainTime", "BuffType", "IsCanStop", "SpellBuffHitType", "EffectMain", "EffectEnd", "Props", });
    internal_static_com_mokylin_EffectData_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_com_mokylin_EffectData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_EffectData_descriptor,
        new java.lang.String[] { "EffectId", "Params", });
    internal_static_com_mokylin_Abs2PropValue_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_com_mokylin_Abs2PropValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_Abs2PropValue_descriptor,
        new java.lang.String[] { "PropId", "Value", });
    internal_static_com_mokylin_PropValue_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_com_mokylin_PropValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_PropValue_descriptor,
        new java.lang.String[] { "PropId", "PropEffectType", "Value", });
    internal_static_com_mokylin_SpellPresentAttackRate_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_com_mokylin_SpellPresentAttackRate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_mokylin_SpellPresentAttackRate_descriptor,
        new java.lang.String[] { "ComboSpellActionAttackRates", "ActionAttackRates", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.mokylin.bleach.protobuf.MessageType.gcMessageType);
    registry.add(com.mokylin.bleach.protobuf.MessageType.gcMessageType);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.mokylin.bleach.protobuf.MessageType.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
